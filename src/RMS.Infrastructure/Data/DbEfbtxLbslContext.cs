using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using RMS.Infrastructure.Data.Entities;

namespace RMS.Infrastructure.Data;

public partial class DbEfbtxLbslContext : DbContext
{
    public DbEfbtxLbslContext()
    {
    }

    public DbEfbtxLbslContext(DbContextOptions<DbEfbtxLbslContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccContDtl> AccContDtls { get; set; }

    public virtual DbSet<AccContDtlHistory> AccContDtlHistories { get; set; }

    public virtual DbSet<AccContType> AccContTypes { get; set; }

    public virtual DbSet<AccPymtCont> AccPymtConts { get; set; }

    public virtual DbSet<AccPymtContHistory> AccPymtContHistories { get; set; }

    public virtual DbSet<AccPymtExcp> AccPymtExcps { get; set; }

    public virtual DbSet<AccPymtRefNo> AccPymtRefNos { get; set; }

    public virtual DbSet<AccPymtRefNoHistory> AccPymtRefNoHistories { get; set; }

    public virtual DbSet<AccPymtStatus> AccPymtStatuses { get; set; }

    public virtual DbSet<AccTrustDtl> AccTrustDtls { get; set; }

    public virtual DbSet<AccTrustSumm> AccTrustSumms { get; set; }

    public virtual DbSet<AccTrustSummOthCcy> AccTrustSummOthCcies { get; set; }

    public virtual DbSet<AccountSummary> AccountSummaries { get; set; }

    public virtual DbSet<AccountSummary202403011751> AccountSummary202403011751s { get; set; }

    public virtual DbSet<AccountSummaryHistory> AccountSummaryHistories { get; set; }

    public virtual DbSet<AlgoOrder> AlgoOrders { get; set; }

    public virtual DbSet<AlgoOrderHistory> AlgoOrderHistories { get; set; }

    public virtual DbSet<AllClient> AllClients { get; set; }

    public virtual DbSet<AllUserClient> AllUserClients { get; set; }

    public virtual DbSet<Announcement> Announcements { get; set; }

    public virtual DbSet<AnnouncementsControl> AnnouncementsControls { get; set; }

    public virtual DbSet<AnnouncementsControlUsr> AnnouncementsControlUsrs { get; set; }

    public virtual DbSet<ArchiveTablesLog> ArchiveTablesLogs { get; set; }

    public virtual DbSet<BannerInfo> BannerInfos { get; set; }

    public virtual DbSet<BeTask202403261024> BeTask202403261024s { get; set; }

    public virtual DbSet<BeTask202404291342> BeTask202404291342s { get; set; }

    public virtual DbSet<BeTask202406250955> BeTask202406250955s { get; set; }

    public virtual DbSet<BebrkInfoStartTask> BebrkInfoStartTasks { get; set; }

    public virtual DbSet<BemidDayStartTask> BemidDayStartTasks { get; set; }

    public virtual DbSet<BerptStartTask> BerptStartTasks { get; set; }

    public virtual DbSet<BestartTask> BestartTasks { get; set; }

    public virtual DbSet<Betask> Betasks { get; set; }

    public virtual DbSet<Betask20150727> Betask20150727s { get; set; }

    public virtual DbSet<Betask20210621> Betask20210621s { get; set; }

    public virtual DbSet<Betask202205171150> Betask202205171150s { get; set; }

    public virtual DbSet<Betask202404031550> Betask202404031550s { get; set; }

    public virtual DbSet<Betask202406281351> Betask202406281351s { get; set; }

    public virtual DbSet<BetaskKibbNewTask> BetaskKibbNewTasks { get; set; }

    public virtual DbSet<BetaskKibbNewTasks20210625> BetaskKibbNewTasks20210625s { get; set; }

    public virtual DbSet<BetaskLog> BetaskLogs { get; set; }

    public virtual DbSet<BidSetting> BidSettings { get; set; }

    public virtual DbSet<BroadcastMsgMaint> BroadcastMsgMaints { get; set; }

    public virtual DbSet<BroadcastMsgMaintArchive> BroadcastMsgMaintArchives { get; set; }

    public virtual DbSet<BroadcastMsgMaintUserRead> BroadcastMsgMaintUserReads { get; set; }

    public virtual DbSet<BuyingInDefaulter> BuyingInDefaulters { get; set; }

    public virtual DbSet<CareOrderAssignment> CareOrderAssignments { get; set; }

    public virtual DbSet<CareOrderGroup> CareOrderGroups { get; set; }

    public virtual DbSet<CareOrderGroupStock> CareOrderGroupStocks { get; set; }

    public virtual DbSet<CareOrderPlaced> CareOrderPlaceds { get; set; }

    public virtual DbSet<CareOrderRouteDtl> CareOrderRouteDtls { get; set; }

    public virtual DbSet<ClientList> ClientLists { get; set; }

    public virtual DbSet<ClientOrderInfo> ClientOrderInfos { get; set; }

    public virtual DbSet<ClientOrderInfoArchive> ClientOrderInfoArchives { get; set; }

    public virtual DbSet<ClientSetOff> ClientSetOffs { get; set; }

    public virtual DbSet<ClientTradeInfo> ClientTradeInfos { get; set; }

    public virtual DbSet<ClientTradeInfoArchive> ClientTradeInfoArchives { get; set; }

    public virtual DbSet<ClientTradeInfoBatch> ClientTradeInfoBatches { get; set; }

    public virtual DbSet<ClientTradeInfoBatchArchive> ClientTradeInfoBatchArchives { get; set; }

    public virtual DbSet<ClientTurnOver> ClientTurnOvers { get; set; }

    public virtual DbSet<ClntAcct> ClntAccts { get; set; }

    public virtual DbSet<ClntAcct202201281900> ClntAcct202201281900s { get; set; }

    public virtual DbSet<ClntAcct20240220> ClntAcct20240220s { get; set; }

    public virtual DbSet<ClntAcct202406211438> ClntAcct202406211438s { get; set; }

    public virtual DbSet<ClntAcctDeleted> ClntAcctDeleteds { get; set; }

    public virtual DbSet<ClntAcctTest> ClntAcctTests { get; set; }

    public virtual DbSet<ClntBankAccInfo> ClntBankAccInfos { get; set; }

    public virtual DbSet<ClntChgBrch> ClntChgBrches { get; set; }

    public virtual DbSet<ClntChgBrchLog> ClntChgBrchLogs { get; set; }

    public virtual DbSet<ClntChgBrchLogArchive> ClntChgBrchLogArchives { get; set; }

    public virtual DbSet<ClntCshWithdrawLimitHistory> ClntCshWithdrawLimitHistories { get; set; }

    public virtual DbSet<ClntDefList> ClntDefLists { get; set; }

    public virtual DbSet<ClntFslist> ClntFslists { get; set; }

    public virtual DbSet<ClntInfoA> ClntInfoAs { get; set; }

    public virtual DbSet<ClntInfoB> ClntInfoBs { get; set; }

    public virtual DbSet<ClntLimitDtl> ClntLimitDtls { get; set; }

    public virtual DbSet<ClntLimitDtlHistory> ClntLimitDtlHistories { get; set; }

    public virtual DbSet<ClntMaster> ClntMasters { get; set; }

    public virtual DbSet<ClntMaster202406211438> ClntMaster202406211438s { get; set; }

    public virtual DbSet<ClntMasterTest> ClntMasterTests { get; set; }

    public virtual DbSet<ClntNotUpdatedDf10740> ClntNotUpdatedDf10740s { get; set; }

    public virtual DbSet<ClntOdrDate> ClntOdrDates { get; set; }

    public virtual DbSet<ClntSettFile> ClntSettFiles { get; set; }

    public virtual DbSet<ClntStatementFile> ClntStatementFiles { get; set; }

    public virtual DbSet<ClntStkCtrl> ClntStkCtrls { get; set; }

    public virtual DbSet<ClntStkDtl> ClntStkDtls { get; set; }

    public virtual DbSet<ClntStkSumm> ClntStkSumms { get; set; }

    public virtual DbSet<ClntTrustAcTrnx> ClntTrustAcTrnxes { get; set; }

    public virtual DbSet<ClntXchg> ClntXchgs { get; set; }

    public virtual DbSet<ClntXchg202406211438> ClntXchg202406211438s { get; set; }

    public virtual DbSet<ClrAcct> ClrAccts { get; set; }

    public virtual DbSet<ColumnName> ColumnNames { get; set; }

    public virtual DbSet<ComMngtMoveWltest> ComMngtMoveWltests { get; set; }

    public virtual DbSet<ComMngtTokenTest> ComMngtTokenTests { get; set; }

    public virtual DbSet<CompanyCodeMaintenance> CompanyCodeMaintenances { get; set; }

    public virtual DbSet<ConditionInfo> ConditionInfos { get; set; }

    public virtual DbSet<ConfirmClOrdId> ConfirmClOrdIds { get; set; }

    public virtual DbSet<ConfirmClOrdId20220325> ConfirmClOrdId20220325s { get; set; }

    public virtual DbSet<ConfirmExTrsno> ConfirmExTrsnos { get; set; }

    public virtual DbSet<ContraDetail> ContraDetails { get; set; }

    public virtual DbSet<ContraGain> ContraGains { get; set; }

    public virtual DbSet<ContraGainsHistory> ContraGainsHistories { get; set; }

    public virtual DbSet<ContraLoss> ContraLosses { get; set; }

    public virtual DbSet<ContraLossesHistory> ContraLossesHistories { get; set; }

    public virtual DbSet<ContraLossesHistoryArchive> ContraLossesHistoryArchives { get; set; }

    public virtual DbSet<ContraSetOff> ContraSetOffs { get; set; }

    public virtual DbSet<ContraSummary> ContraSummaries { get; set; }

    public virtual DbSet<ContractSummary> ContractSummaries { get; set; }

    public virtual DbSet<ContractSummaryDel> ContractSummaryDels { get; set; }

    public virtual DbSet<CountryList> CountryLists { get; set; }

    public virtual DbSet<CpreconFlag> CpreconFlags { get; set; }

    public virtual DbSet<Csprofile> Csprofiles { get; set; }

    public virtual DbSet<DailyBizDone> DailyBizDones { get; set; }

    public virtual DbSet<DayEndCalcAvgPrice> DayEndCalcAvgPrices { get; set; }

    public virtual DbSet<DbgenFileCount> DbgenFileCounts { get; set; }

    public virtual DbSet<DbreplicationEmailLastSendDateTime> DbreplicationEmailLastSendDateTimes { get; set; }

    public virtual DbSet<DbreplicationLastUpdateDateTime> DbreplicationLastUpdateDateTimes { get; set; }

    public virtual DbSet<Dbtdeclaration> Dbtdeclarations { get; set; }

    public virtual DbSet<DbtdeclarationHistory> DbtdeclarationHistories { get; set; }

    public virtual DbSet<Dbtqueue> Dbtqueues { get; set; }

    public virtual DbSet<Dbtstatus> Dbtstatuses { get; set; }

    public virtual DbSet<DbtstatusHistory> DbtstatusHistories { get; set; }

    public virtual DbSet<DebugCr11127> DebugCr11127s { get; set; }

    public virtual DbSet<Delisted> Delisteds { get; set; }

    public virtual DbSet<Delisted2> Delisted2s { get; set; }

    public virtual DbSet<DelistedStock> DelistedStocks { get; set; }

    public virtual DbSet<DmaorderAssignment> DmaorderAssignments { get; set; }

    public virtual DbSet<DocType> DocTypes { get; set; }

    public virtual DbSet<DummyEmail> DummyEmails { get; set; }

    public virtual DbSet<DummyTable0> DummyTable0s { get; set; }

    public virtual DbSet<EDocument> EDocuments { get; set; }

    public virtual DbSet<EcmEfForceSelling> EcmEfForceSellings { get; set; }

    public virtual DbSet<EcmEfMrgnCall> EcmEfMrgnCalls { get; set; }

    public virtual DbSet<EcmTemp> EcmTemps { get; set; }

    public virtual DbSet<EcmmoneyProcessedRefNo> EcmmoneyProcessedRefNos { get; set; }

    public virtual DbSet<Ecmuser> Ecmusers { get; set; }

    public virtual DbSet<EcosUsrIdexist> EcosUsrIdexists { get; set; }

    public virtual DbSet<EcosUsrType> EcosUsrTypes { get; set; }

    public virtual DbSet<Edsvariable> Edsvariables { get; set; }

    public virtual DbSet<Efcptemp> Efcptemps { get; set; }

    public virtual DbSet<Eftestclientlist> Eftestclientlists { get; set; }

    public virtual DbSet<EmlBetask> EmlBetasks { get; set; }

    public virtual DbSet<EmlInfo> EmlInfos { get; set; }

    public virtual DbSet<EmlInfo202405131529> EmlInfo202405131529s { get; set; }

    public virtual DbSet<EmlLegend> EmlLegends { get; set; }

    public virtual DbSet<EmlNoti> EmlNotis { get; set; }

    public virtual DbSet<EmlNoti202201281900> EmlNoti202201281900s { get; set; }

    public virtual DbSet<EmlNoti202405131421> EmlNoti202405131421s { get; set; }

    public virtual DbSet<EmptyStkName> EmptyStkNames { get; set; }

    public virtual DbSet<EmptyStkName2> EmptyStkName2s { get; set; }

    public virtual DbSet<EnqConcerrentUser> EnqConcerrentUsers { get; set; }

    public virtual DbSet<EnqMatchedTrade> EnqMatchedTrades { get; set; }

    public virtual DbSet<EnqOrderInQueue> EnqOrderInQueues { get; set; }

    public virtual DbSet<EnqSubmittedOrder> EnqSubmittedOrders { get; set; }

    public virtual DbSet<EnqUsrActvn> EnqUsrActvns { get; set; }

    public virtual DbSet<EnqUsrActvnHist> EnqUsrActvnHists { get; set; }

    public virtual DbSet<EodclntOnInd> EodclntOnInds { get; set; }

    public virtual DbSet<EodonlineTradeDtl> EodonlineTradeDtls { get; set; }

    public virtual DbSet<EodtradeDone> EodtradeDones { get; set; }

    public virtual DbSet<EpDuitNowInitPymtMsgDtl> EpDuitNowInitPymtMsgDtls { get; set; }

    public virtual DbSet<EpFpxdbCrAuthCode> EpFpxdbCrAuthCodes { get; set; }

    public virtual DbSet<EpFpxdepBk> EpFpxdepBks { get; set; }

    public virtual DbSet<EpFpxmsgDtl> EpFpxmsgDtls { get; set; }

    public virtual DbSet<EpPaymentContract> EpPaymentContracts { get; set; }

    public virtual DbSet<EpPaymentContract202403011751> EpPaymentContract202403011751s { get; set; }

    public virtual DbSet<EpPaymentContract202406141409> EpPaymentContract202406141409s { get; set; }

    public virtual DbSet<EpPaymentRefNo> EpPaymentRefNos { get; set; }

    public virtual DbSet<EpPaymentRefNo202303161221> EpPaymentRefNo202303161221s { get; set; }

    public virtual DbSet<EpPaymentRefNo202402090950> EpPaymentRefNo202402090950s { get; set; }

    public virtual DbSet<EpPaymentRefNo202403011751> EpPaymentRefNo202403011751s { get; set; }

    public virtual DbSet<EpPaymentStatusHistory> EpPaymentStatusHistories { get; set; }

    public virtual DbSet<EpPaymentStatusHistory202403011751> EpPaymentStatusHistory202403011751s { get; set; }

    public virtual DbSet<EpPaymentStatusHistory202406141415> EpPaymentStatusHistory202406141415s { get; set; }

    public virtual DbSet<EpPaymentStatusHistory202406141417> EpPaymentStatusHistory202406141417s { get; set; }

    public virtual DbSet<EpPaymentcontract20180906> EpPaymentcontract20180906s { get; set; }

    public virtual DbSet<EpPaymentrefno20180906> EpPaymentrefno20180906s { get; set; }

    public virtual DbSet<ErrAcctList> ErrAcctLists { get; set; }

    public virtual DbSet<ExcelForceEcmShareLog> ExcelForceEcmShareLogs { get; set; }

    public virtual DbSet<ExcelForceEcmShareLogTemp> ExcelForceEcmShareLogTemps { get; set; }

    public virtual DbSet<ExcelForceEcmShareTemp> ExcelForceEcmShareTemps { get; set; }

    public virtual DbSet<ExecutionReport> ExecutionReports { get; set; }

    public virtual DbSet<ExecutionType> ExecutionTypes { get; set; }

    public virtual DbSet<ExtrClientUsrInfo> ExtrClientUsrInfos { get; set; }

    public virtual DbSet<ExtrUsrAccessEx> ExtrUsrAccessexes { get; set; }

    public virtual DbSet<FixTraderId> FixTraderIds { get; set; }

    public virtual DbSet<ForceSellContract> ForceSellContracts { get; set; }

    public virtual DbSet<FormBizProcConsolidateCont> FormBizProcConsolidateConts { get; set; }

    public virtual DbSet<FormBizProcDirectWd> FormBizProcDirectWds { get; set; }

    public virtual DbSet<FormBizProcForeignCont> FormBizProcForeignConts { get; set; }

    public virtual DbSet<FormBizProcMailUplift> FormBizProcMailUplifts { get; set; }

    public virtual DbSet<FormBizProcManualBi> FormBizProcManualBis { get; set; }

    public virtual DbSet<FormBizProcNotCotr> FormBizProcNotCotrs { get; set; }

    public virtual DbSet<FormBizProcRemisierTrnx> FormBizProcRemisierTrnxes { get; set; }

    public virtual DbSet<FormCreditDailyCotrRpt> FormCreditDailyCotrRpts { get; set; }

    public virtual DbSet<FormCreditDbttrnx> FormCreditDbttrnxes { get; set; }

    public virtual DbSet<FormCreditDeclaration> FormCreditDeclarations { get; set; }

    public virtual DbSet<FormCreditEarmark> FormCreditEarmarks { get; set; }

    public virtual DbSet<FormCreditLeave> FormCreditLeaves { get; set; }

    public virtual DbSet<FormCreditNegoBrkgC> FormCreditNegoBrkgCs { get; set; }

    public virtual DbSet<FormCreditRelease> FormCreditReleases { get; set; }

    public virtual DbSet<FormCreditUpliftLmt> FormCreditUpliftLmts { get; set; }

    public virtual DbSet<FormCreditWithdrawal> FormCreditWithdrawals { get; set; }

    public virtual DbSet<FormFinanceRecovery> FormFinanceRecoveries { get; set; }

    public virtual DbSet<FormFinanceRequisition> FormFinanceRequisitions { get; set; }

    public virtual DbSet<FormFinanceReversal> FormFinanceReversals { get; set; }

    public virtual DbSet<FormFinanceTrustAcWd> FormFinanceTrustAcWds { get; set; }

    public virtual DbSet<FormOptGrp> FormOptGrps { get; set; }

    public virtual DbSet<FormOptLst> FormOptLsts { get; set; }

    public virtual DbSet<FormShrMrgnChqWdShrTrf> FormShrMrgnChqWdShrTrves { get; set; }

    public virtual DbSet<FormShrMrgnPayment> FormShrMrgnPayments { get; set; }

    public virtual DbSet<FormTrnxDtl> FormTrnxDtls { get; set; }

    public virtual DbSet<Fpxcharge> Fpxcharges { get; set; }

    public virtual DbSet<FpxresEmailSett> FpxresEmailSetts { get; set; }

    public virtual DbSet<Fpxresponse> Fpxresponses { get; set; }

    public virtual DbSet<FsttradeInfo> FsttradeInfos { get; set; }

    public virtual DbSet<FsttradeInfoHistory> FsttradeInfoHistories { get; set; }

    public virtual DbSet<GtdclOrdId> GtdclOrdIds { get; set; }

    public virtual DbSet<Hd14421log> Hd14421logs { get; set; }

    public virtual DbSet<InsageSetting> InsageSettings { get; set; }

    public virtual DbSet<InternalAcct> InternalAccts { get; set; }

    public virtual DbSet<IntraDayOrdCotr> IntraDayOrdCotrs { get; set; }

    public virtual DbSet<IntraDayOrdCotrDtl> IntraDayOrdCotrDtls { get; set; }

    public virtual DbSet<ItrBosshareInfo> ItrBosshareInfos { get; set; }

    public virtual DbSet<ItrFileTrnx> ItrFileTrnxes { get; set; }

    public virtual DbSet<Keyword> Keywords { get; set; }

    public virtual DbSet<KeywordsScreener> KeywordsScreeners { get; set; }

    public virtual DbSet<KldataEf> KldataEfs { get; set; }

    public virtual DbSet<LbMembership> LbMemberships { get; set; }

    public virtual DbSet<LbUser> LbUsers { get; set; }

    public virtual DbSet<LbUserpassword> LbUserpasswords { get; set; }

    public virtual DbSet<LimitInfo> LimitInfos { get; set; }

    public virtual DbSet<LimitInfo202406211438> LimitInfo202406211438s { get; set; }

    public virtual DbSet<LimitInfoClntXchg> LimitInfoClntXchgs { get; set; }

    public virtual DbSet<LimitInfoCo> LimitInfoCos { get; set; }

    public virtual DbSet<LimitInfoCoBrch> LimitInfoCoBrches { get; set; }

    public virtual DbSet<LimitInfoStkXchg> LimitInfoStkXchgs { get; set; }

    public virtual DbSet<LimitInfoUsr> LimitInfoUsrs { get; set; }

    public virtual DbSet<LimitInfoUsrXchg> LimitInfoUsrXchgs { get; set; }

    public virtual DbSet<LinkOrderQueue> LinkOrderQueues { get; set; }

    public virtual DbSet<LogInfo> LogInfos { get; set; }

    public virtual DbSet<LogInfo202201281859> LogInfo202201281859s { get; set; }

    public virtual DbSet<LogInfoGrp> LogInfoGrps { get; set; }

    public virtual DbSet<ManualOrderFilled> ManualOrderFilleds { get; set; }

    public virtual DbSet<MassQuote> MassQuotes { get; set; }

    public virtual DbSet<MassQuoteClOrdId> MassQuoteClOrdIds { get; set; }

    public virtual DbSet<MassQuoteList> MassQuoteLists { get; set; }

    public virtual DbSet<MassQuoteQueue> MassQuoteQueues { get; set; }

    public virtual DbSet<MimosSvcInfo> MimosSvcInfos { get; set; }

    public virtual DbSet<MimosSvcInfoHist> MimosSvcInfoHists { get; set; }

    public virtual DbSet<MinBidSize> MinBidSizes { get; set; }

    public virtual DbSet<MinBidSizes20181010> MinBidSizes20181010s { get; set; }

    public virtual DbSet<MiscSetOff> MiscSetOffs { get; set; }

    public virtual DbSet<MstActiveBrch> MstActiveBrches { get; set; }

    public virtual DbSet<MstBank> MstBanks { get; set; }

    public virtual DbSet<MstBidLmt> MstBidLmts { get; set; }

    public virtual DbSet<MstBidLmtDtl> MstBidLmtDtls { get; set; }

    public virtual DbSet<MstBrchGrp> MstBrchGrps { get; set; }

    public virtual DbSet<MstBrk> MstBrks { get; set; }

    public virtual DbSet<MstClntExp> MstClntExps { get; set; }

    public virtual DbSet<MstClntExps202406211438> MstClntExps202406211438s { get; set; }

    public virtual DbSet<MstClntExps202407151738> MstClntExps202407151738s { get; set; }

    public virtual DbSet<MstClntExpsBak20221209> MstClntExpsBak20221209s { get; set; }

    public virtual DbSet<MstClntExpsNew> MstClntExpsNews { get; set; }

    public virtual DbSet<MstClntNettLmtExp> MstClntNettLmtExps { get; set; }

    public virtual DbSet<MstClntType> MstClntTypes { get; set; }

    public virtual DbSet<MstClntType202301161607> MstClntType202301161607s { get; set; }

    public virtual DbSet<MstClntXchgExp> MstClntXchgExps { get; set; }

    public virtual DbSet<MstClntXchgExps202406211438> MstClntXchgExps202406211438s { get; set; }

    public virtual DbSet<MstClntXchgExps202407151739> MstClntXchgExps202407151739s { get; set; }

    public virtual DbSet<MstClntXchgExpsBak20221116> MstClntXchgExpsBak20221116s { get; set; }

    public virtual DbSet<MstClntXchgExpsNew> MstClntXchgExpsNews { get; set; }

    public virtual DbSet<MstClntXchgExpsNew1> MstClntXchgExpsNew1s { get; set; }

    public virtual DbSet<MstClntXexp> MstClntXexps { get; set; }

    public virtual DbSet<MstCo> MstCos { get; set; }

    public virtual DbSet<MstCoBrch> MstCoBrches { get; set; }

    public virtual DbSet<MstCoBrchEcm> MstCoBrchEcms { get; set; }

    public virtual DbSet<MstCoBrchExp> MstCoBrchExps { get; set; }

    public virtual DbSet<MstCoBrchExpsBak20221209> MstCoBrchExpsBak20221209s { get; set; }

    public virtual DbSet<MstCoBrchExpsNew> MstCoBrchExpsNews { get; set; }

    public virtual DbSet<MstCoBrchXchgPrcFeed> MstCoBrchXchgPrcFeeds { get; set; }

    public virtual DbSet<MstCoExp> MstCoExps { get; set; }

    public virtual DbSet<MstCoExpsBak20221209> MstCoExpsBak20221209s { get; set; }

    public virtual DbSet<MstCoExpsNew> MstCoExpsNews { get; set; }

    public virtual DbSet<MstCountry> MstCountries { get; set; }

    public virtual DbSet<MstCountryExp> MstCountryExps { get; set; }

    public virtual DbSet<MstCurcy> MstCurcies { get; set; }

    public virtual DbSet<MstDept> MstDepts { get; set; }

    public virtual DbSet<MstDeptContact> MstDeptContacts { get; set; }

    public virtual DbSet<MstDocument> MstDocuments { get; set; }

    public virtual DbSet<MstDuitNowBank> MstDuitNowBanks { get; set; }

    public virtual DbSet<MstDuitNowBankProd> MstDuitNowBankProds { get; set; }

    public virtual DbSet<MstDuitNowReasonCode> MstDuitNowReasonCodes { get; set; }

    public virtual DbSet<MstDuitNowStatusCode> MstDuitNowStatusCodes { get; set; }

    public virtual DbSet<MstEduLvl> MstEduLvls { get; set; }

    public virtual DbSet<MstEprod> MstEprods { get; set; }

    public virtual DbSet<MstFbmstk> MstFbmstks { get; set; }

    public virtual DbSet<MstForm> MstForms { get; set; }

    public virtual DbSet<MstFpxbank> MstFpxbanks { get; set; }

    public virtual DbSet<MstGlobalClntEcosLimitExp> MstGlobalClntEcosLimitExps { get; set; }

    public virtual DbSet<MstGlobalLimitExp> MstGlobalLimitExps { get; set; }

    public virtual DbSet<MstHld> MstHlds { get; set; }

    public virtual DbSet<MstIncGrp> MstIncGrps { get; set; }

    public virtual DbSet<MstInstrStpDty> MstInstrStpDties { get; set; }

    public virtual DbSet<MstInternalAcType> MstInternalAcTypes { get; set; }

    public virtual DbSet<MstLegalStat> MstLegalStats { get; set; }

    public virtual DbSet<MstMsgList> MstMsgLists { get; set; }

    public virtual DbSet<MstMsgList20191113> MstMsgList20191113s { get; set; }

    public virtual DbSet<MstMsgList202201281900> MstMsgList202201281900s { get; set; }

    public virtual DbSet<MstMultiXchgOptList> MstMultiXchgOptLists { get; set; }

    public virtual DbSet<MstOccup> MstOccups { get; set; }

    public virtual DbSet<MstOff9Bank> MstOff9Banks { get; set; }

    public virtual DbSet<MstOptList> MstOptLists { get; set; }

    public virtual DbSet<MstOptList20160819> MstOptList20160819s { get; set; }

    public virtual DbSet<MstOptList20191112> MstOptList20191112s { get; set; }

    public virtual DbSet<MstOptList202201281859> MstOptList202201281859s { get; set; }

    public virtual DbSet<MstOptList202406061351> MstOptList202406061351s { get; set; }

    public virtual DbSet<MstOptListBk20160217> MstOptListBk20160217s { get; set; }

    public virtual DbSet<MstOrderGroup> MstOrderGroups { get; set; }

    public virtual DbSet<MstPayeeInfo> MstPayeeInfos { get; set; }

    public virtual DbSet<MstRldClnt> MstRldClnts { get; set; }

    public virtual DbSet<MstStk> MstStks { get; set; }

    public virtual DbSet<MstStk20161006> MstStk20161006s { get; set; }

    public virtual DbSet<MstStk20190802> MstStk20190802s { get; set; }

    public virtual DbSet<MstStk20200309> MstStk20200309s { get; set; }

    public virtual DbSet<MstStk20211206> MstStk20211206s { get; set; }

    public virtual DbSet<MstStkBackup181210> MstStkBackup181210s { get; set; }

    public virtual DbSet<MstStkBk190621Err> MstStkBk190621Errs { get; set; }

    public virtual DbSet<MstStkBk220801> MstStkBk220801s { get; set; }

    public virtual DbSet<MstStkBrd> MstStkBrds { get; set; }

    public virtual DbSet<MstStkBrdExp> MstStkBrdExps { get; set; }

    public virtual DbSet<MstStkExp> MstStkExps { get; set; }

    public virtual DbSet<MstStkExpsBackup> MstStkExpsBackups { get; set; }

    public virtual DbSet<MstStkExpsBak20221209> MstStkExpsBak20221209s { get; set; }

    public virtual DbSet<MstStkExpsTest> MstStkExpsTests { get; set; }

    public virtual DbSet<MstStkHlbsmf181210> MstStkHlbsmf181210s { get; set; }

    public virtual DbSet<MstStkInstrTypeCdSecCatCd> MstStkInstrTypeCdSecCatCds { get; set; }

    public virtual DbSet<MstStkIpo> MstStkIpos { get; set; }

    public virtual DbSet<MstStkIpotest> MstStkIpotests { get; set; }

    public virtual DbSet<MstStkProd> MstStkProds { get; set; }

    public virtual DbSet<MstStkSect> MstStkSects { get; set; }

    public virtual DbSet<MstStkSect20181218> MstStkSect20181218s { get; set; }

    public virtual DbSet<MstStkTemp> MstStkTemps { get; set; }

    public virtual DbSet<MstStkTest> MstStkTests { get; set; }

    public virtual DbSet<MstStkXchg> MstStkXchgs { get; set; }

    public virtual DbSet<MstStkXchgExp> MstStkXchgExps { get; set; }

    public virtual DbSet<MstStkXchgExpsBak20221209> MstStkXchgExpsBak20221209s { get; set; }

    public virtual DbSet<MstStkXchgExpsNew> MstStkXchgExpsNews { get; set; }

    public virtual DbSet<MstSubAccountCrOrder> MstSubAccountCrOrders { get; set; }

    public virtual DbSet<MstTrxnCost> MstTrxnCosts { get; set; }

    public virtual DbSet<MstTrxnCost20190124> MstTrxnCost20190124s { get; set; }

    public virtual DbSet<MstTrxnCostAcc> MstTrxnCostAccs { get; set; }

    public virtual DbSet<MstTrxnCostBrkgRate> MstTrxnCostBrkgRates { get; set; }

    public virtual DbSet<MstUsrExp> MstUsrExps { get; set; }

    public virtual DbSet<MstUsrExpsBak20221209> MstUsrExpsBak20221209s { get; set; }

    public virtual DbSet<MstUsrExpsNew> MstUsrExpsNews { get; set; }

    public virtual DbSet<MstUsrXchgExp> MstUsrXchgExps { get; set; }

    public virtual DbSet<MstUsrXchgExpsNew> MstUsrXchgExpsNews { get; set; }

    public virtual DbSet<MstXchg> MstXchgs { get; set; }

    public virtual DbSet<Mstcobrch20130816> Mstcobrch20130816s { get; set; }

    public virtual DbSet<Mststk20190821> Mststk20190821s { get; set; }

    public virtual DbSet<MststkBk200203> MststkBk200203s { get; set; }

    public virtual DbSet<MststktestBk200204> MststktestBk200204s { get; set; }

    public virtual DbSet<MyAccProcDate> MyAccProcDates { get; set; }

    public virtual DbSet<MyAccProcess> MyAccProcesses { get; set; }

    public virtual DbSet<N2nclientTradeInfo> N2nclientTradeInfos { get; set; }

    public virtual DbSet<NewOrderSubmission2023718> NewOrderSubmission2023718s { get; set; }

    public virtual DbSet<NewTable> NewTables { get; set; }

    public virtual DbSet<NotificationSetting> NotificationSettings { get; set; }

    public virtual DbSet<Off9PaymentPnl> Off9PaymentPnls { get; set; }

    public virtual DbSet<OmsusrSession> OmsusrSessions { get; set; }

    public virtual DbSet<On9EnqPolicy> On9EnqPolicies { get; set; }

    public virtual DbSet<On9EnqSetting> On9EnqSettings { get; set; }

    public virtual DbSet<OrdRejReason> OrdRejReasons { get; set; }

    public virtual DbSet<OrdStatus> OrdStatuses { get; set; }

    public virtual DbSet<OrdType> OrdTypes { get; set; }

    public virtual DbSet<OrderClOrdId> OrderClOrdIds { get; set; }

    public virtual DbSet<OrderClOrdId20141003> OrderClOrdId20141003s { get; set; }

    public virtual DbSet<OrderClOrdId20220325> OrderClOrdId20220325s { get; set; }

    public virtual DbSet<OrderClOrdIdEx> OrderClOrdIdices { get; set; }

    public virtual DbSet<OrderConfirmEx> OrderConfirmExes { get; set; }

    public virtual DbSet<OrderConfirmExhistory> OrderConfirmExhistories { get; set; }

    public virtual DbSet<OrderConfirmExstatus> OrderConfirmExstatuses { get; set; }

    public virtual DbSet<OrderConfirmExstatusHistory> OrderConfirmExstatusHistories { get; set; }

    public virtual DbSet<OrderConfirmExstatusHistorySumm> OrderConfirmExstatusHistorySumms { get; set; }

    public virtual DbSet<OrderConfirmExstatusHistorySummArchive> OrderConfirmExstatusHistorySummArchives { get; set; }

    public virtual DbSet<OrderException> OrderExceptions { get; set; }

    public virtual DbSet<OrderExceptionHistory> OrderExceptionHistories { get; set; }

    public virtual DbSet<OrderGroupDtl> OrderGroupDtls { get; set; }

    public virtual DbSet<OrderMetadatum> OrderMetadata { get; set; }

    public virtual DbSet<OrderPlaced> OrderPlaceds { get; set; }

    public virtual DbSet<OrderPlacedGtd> OrderPlacedGtds { get; set; }

    public virtual DbSet<OrderPlacedHistory> OrderPlacedHistories { get; set; }

    public virtual DbSet<OrderPlacedHistoryArchive> OrderPlacedHistoryArchives { get; set; }

    public virtual DbSet<OrderPlacedHistoryTest> OrderPlacedHistoryTests { get; set; }

    public virtual DbSet<OrderPlacedTest> OrderPlacedTests { get; set; }

    public virtual DbSet<OrderQueue> OrderQueues { get; set; }

    public virtual DbSet<OrderQueueDelIdss> OrderQueueDelIdsses { get; set; }

    public virtual DbSet<OrderQueueDelLog> OrderQueueDelLogs { get; set; }

    public virtual DbSet<OrderQueueDelLogChgBrch> OrderQueueDelLogChgBrches { get; set; }

    public virtual DbSet<OrderQueueHistory> OrderQueueHistories { get; set; }

    public virtual DbSet<OrderRejected> OrderRejecteds { get; set; }

    public virtual DbSet<OrderRejectedHistory> OrderRejectedHistories { get; set; }

    public virtual DbSet<OrderStatus> OrderStatuses { get; set; }

    public virtual DbSet<OrderStatusFlag> OrderStatusFlags { get; set; }

    public virtual DbSet<OrderStatusHistory> OrderStatusHistories { get; set; }

    public virtual DbSet<OrderStatusHistorySumm> OrderStatusHistorySumms { get; set; }

    public virtual DbSet<OrderStatusHistorySumm1> OrderStatusHistorySumm1s { get; set; }

    public virtual DbSet<OrderStatusHistorySummArchive> OrderStatusHistorySummArchives { get; set; }

    public virtual DbSet<Osbill> Osbills { get; set; }

    public virtual DbSet<OsbillHistory> OsbillHistories { get; set; }

    public virtual DbSet<OsbillHistoryArchive> OsbillHistoryArchives { get; set; }

    public virtual DbSet<OsclntInfoBatch2> OsclntInfoBatch2s { get; set; }

    public virtual DbSet<OsdueSettlement> OsdueSettlements { get; set; }

    public virtual DbSet<OsdueSettlement2012> OsdueSettlement2012s { get; set; }

    public virtual DbSet<OsdueSettlementHistory> OsdueSettlementHistories { get; set; }

    public virtual DbSet<OsdueSettlementHistoryArchive> OsdueSettlementHistoryArchives { get; set; }

    public virtual DbSet<OsforcedSelling> OsforcedSellings { get; set; }

    public virtual DbSet<OsforcedSelling2012> OsforcedSelling2012s { get; set; }

    public virtual DbSet<OsforcedSellingBak20241105> OsforcedSellingBak20241105s { get; set; }

    public virtual DbSet<OsforcedSellingHistory> OsforcedSellingHistories { get; set; }

    public virtual DbSet<Osother> Osothers { get; set; }

    public virtual DbSet<OsothersHistory> OsothersHistories { get; set; }

    public virtual DbSet<OsrpurchaseContract> OsrpurchaseContracts { get; set; }

    public virtual DbSet<OsrpurchaseContractsHistory> OsrpurchaseContractsHistories { get; set; }

    public virtual DbSet<OsrpurchaseContractsHistoryArchive> OsrpurchaseContractsHistoryArchives { get; set; }

    public virtual DbSet<OsrsalesContract> OsrsalesContracts { get; set; }

    public virtual DbSet<OsrsalesContractsHistory> OsrsalesContractsHistories { get; set; }

    public virtual DbSet<OssalesProceedsDue> OssalesProceedsDues { get; set; }

    public virtual DbSet<OssalesProceedsDueHistory> OssalesProceedsDueHistories { get; set; }

    public virtual DbSet<PatchDataTable20140115> PatchDataTable20140115s { get; set; }

    public virtual DbSet<PatchUserInfo> PatchUserInfos { get; set; }

    public virtual DbSet<PaymentContract> PaymentContracts { get; set; }

    public virtual DbSet<PaymentContractArchive> PaymentContractArchives { get; set; }

    public virtual DbSet<PaymentRecon> PaymentRecons { get; set; }

    public virtual DbSet<PaymentReconArchive> PaymentReconArchives { get; set; }

    public virtual DbSet<PaymentRefNo> PaymentRefNos { get; set; }

    public virtual DbSet<PaymentRefNoArchive> PaymentRefNoArchives { get; set; }

    public virtual DbSet<PaymentRefNoException> PaymentRefNoExceptions { get; set; }

    public virtual DbSet<PaymentRefNoExceptionArchive> PaymentRefNoExceptionArchives { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<PfclntActSum> PfclntActSums { get; set; }

    public virtual DbSet<PfclntActSumHistory> PfclntActSumHistories { get; set; }

    public virtual DbSet<PfclntInfo> PfclntInfos { get; set; }

    public virtual DbSet<PortfolioClientTradeInfo> PortfolioClientTradeInfos { get; set; }

    public virtual DbSet<PortfolioRealSummary> PortfolioRealSummaries { get; set; }

    public virtual DbSet<PortfolioRealSummary20240220> PortfolioRealSummary20240220s { get; set; }

    public virtual DbSet<PortfolioRealSummary202406211438> PortfolioRealSummary202406211438s { get; set; }

    public virtual DbSet<PortfolioSetting> PortfolioSettings { get; set; }

    public virtual DbSet<PortfolioSettingBrch> PortfolioSettingBrches { get; set; }

    public virtual DbSet<Portfoliorealtransaction> Portfoliorealtransactions { get; set; }

    public virtual DbSet<PriceAlert> PriceAlerts { get; set; }

    public virtual DbSet<ProcessDate> ProcessDates { get; set; }

    public virtual DbSet<ProcessPymtReconExcp> ProcessPymtReconExcps { get; set; }

    public virtual DbSet<ProdCodeList> ProdCodeLists { get; set; }

    public virtual DbSet<PwdGen> PwdGens { get; set; }

    public virtual DbSet<PwdGenHenry0> PwdGenHenry0s { get; set; }

    public virtual DbSet<PwdGenLog> PwdGenLogs { get; set; }

    public virtual DbSet<PwdGenLogHenry0> PwdGenLogHenry0s { get; set; }

    public virtual DbSet<PwdQuestionList> PwdQuestionLists { get; set; }

    public virtual DbSet<PwdQuestionListEcm> PwdQuestionListEcms { get; set; }

    public virtual DbSet<PymtRefNo> PymtRefNos { get; set; }

    public virtual DbSet<PymtRefUnknownEmailLog> PymtRefUnknownEmailLogs { get; set; }

    public virtual DbSet<ResIdstkCode> ResIdstkCodes { get; set; }

    public virtual DbSet<Research> Researches { get; set; }

    public virtual DbSet<ResearchAnalyst> ResearchAnalysts { get; set; }

    public virtual DbSet<ResearchCategory> ResearchCategories { get; set; }

    public virtual DbSet<RptOptGrp> RptOptGrps { get; set; }

    public virtual DbSet<RptOptLst> RptOptLsts { get; set; }

    public virtual DbSet<RsaDeviceToken> RsaDeviceTokens { get; set; }

    public virtual DbSet<RsaSetting> RsaSettings { get; set; }

    public virtual DbSet<RsaUsrType> RsaUsrTypes { get; set; }

    public virtual DbSet<ScnFundDatum> ScnFundData { get; set; }

    public virtual DbSet<Scotr> Scotrs { get; set; }

    public virtual DbSet<Scotrshistory> Scotrshistories { get; set; }

    public virtual DbSet<Scotrssumm> Scotrssumms { get; set; }

    public virtual DbSet<ScotrssummHistory> ScotrssummHistories { get; set; }

    public virtual DbSet<ScreenerCriteriaGrp> ScreenerCriteriaGrps { get; set; }

    public virtual DbSet<ScreenerCriterion> ScreenerCriteria { get; set; }

    public virtual DbSet<ScreenerGrp> ScreenerGrps { get; set; }

    public virtual DbSet<ScreenerList> ScreenerLists { get; set; }

    public virtual DbSet<Set5> Set5s { get; set; }

    public virtual DbSet<ShareConsolidate> ShareConsolidates { get; set; }

    public virtual DbSet<ShareConsolidationRecon> ShareConsolidationRecons { get; set; }

    public virtual DbSet<ShareInfo> ShareInfos { get; set; }

    public virtual DbSet<ShareInfo20240220> ShareInfo20240220s { get; set; }

    public virtual DbSet<ShareInfo202406211438> ShareInfo202406211438s { get; set; }

    public virtual DbSet<ShareInfoRemoved> ShareInfoRemoveds { get; set; }

    public virtual DbSet<ShareInfoStk> ShareInfoStks { get; set; }

    public virtual DbSet<ShareInfoStkBrch> ShareInfoStkBrches { get; set; }

    public virtual DbSet<SiteMenu> SiteMenus { get; set; }

    public virtual DbSet<SiteMenu202201281859> SiteMenu202201281859s { get; set; }

    public virtual DbSet<SiteMenu20241023> SiteMenu20241023s { get; set; }

    public virtual DbSet<SiteMenuBak20240408> SiteMenuBak20240408s { get; set; }

    public virtual DbSet<SiteMenuBak20240920> SiteMenuBak20240920s { get; set; }

    public virtual DbSet<SiteMenuBck> SiteMenuBcks { get; set; }

    public virtual DbSet<SiteMenuGrp> SiteMenuGrps { get; set; }

    public virtual DbSet<Sitemenu20130704> Sitemenu20130704s { get; set; }

    public virtual DbSet<SmfupdateOrder> SmfupdateOrders { get; set; }

    public virtual DbSet<SsokeyGen> SsokeyGens { get; set; }

    public virtual DbSet<StateList> StateLists { get; set; }

    public virtual DbSet<StkCtrl> StkCtrls { get; set; }

    public virtual DbSet<StkCtrl20220303> StkCtrl20220303s { get; set; }

    public virtual DbSet<StkEnt> StkEnts { get; set; }

    public virtual DbSet<StkIdea> StkIdeas { get; set; }

    public virtual DbSet<StockFinancialInfo> StockFinancialInfos { get; set; }

    public virtual DbSet<StockMktFinancialInfo> StockMktFinancialInfos { get; set; }

    public virtual DbSet<SysLmtType> SysLmtTypes { get; set; }

    public virtual DbSet<TaskDependency> TaskDependencies { get; set; }

    public virtual DbSet<TaskDependency20150727> TaskDependency20150727s { get; set; }

    public virtual DbSet<TaskDependency20210621> TaskDependency20210621s { get; set; }

    public virtual DbSet<TaskDependency202404291349> TaskDependency202404291349s { get; set; }

    public virtual DbSet<TaskDependency202406250958> TaskDependency202406250958s { get; set; }

    public virtual DbSet<TaskDependencyKibbNewTask> TaskDependencyKibbNewTasks { get; set; }

    public virtual DbSet<TaskDependencyKibbNewTasks20210625> TaskDependencyKibbNewTasks20210625s { get; set; }

    public virtual DbSet<TaskFrequency> TaskFrequencies { get; set; }

    public virtual DbSet<TaskFrequency20150727> TaskFrequency20150727s { get; set; }

    public virtual DbSet<TaskFrequency20210621> TaskFrequency20210621s { get; set; }

    public virtual DbSet<TaskFrequency202205171150> TaskFrequency202205171150s { get; set; }

    public virtual DbSet<TaskFrequency202403261047> TaskFrequency202403261047s { get; set; }

    public virtual DbSet<TaskFrequency202404031550> TaskFrequency202404031550s { get; set; }

    public virtual DbSet<TaskFrequency202404291346> TaskFrequency202404291346s { get; set; }

    public virtual DbSet<TaskFrequency202406250957> TaskFrequency202406250957s { get; set; }

    public virtual DbSet<TaskFrequency202406281353> TaskFrequency202406281353s { get; set; }

    public virtual DbSet<TaskFrequencyKibbNewTask> TaskFrequencyKibbNewTasks { get; set; }

    public virtual DbSet<TaskFrequencyKibbNewTasks20210625> TaskFrequencyKibbNewTasks20210625s { get; set; }

    public virtual DbSet<TaskLog> TaskLogs { get; set; }

    public virtual DbSet<TaskStatusEntity> TaskStatuses { get; set; }

    public virtual DbSet<TaskStatusLog> TaskStatusLogs { get; set; }

    public virtual DbSet<TempPayTran> TempPayTrans { get; set; }

    public virtual DbSet<TempShareInfo> TempShareInfos { get; set; }

    public virtual DbSet<TempStkIndicator> TempStkIndicators { get; set; }

    public virtual DbSet<TempStockInfo> TempStockInfos { get; set; }

    public virtual DbSet<TempTbl> TempTbls { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TimeInForce> TimeInForces { get; set; }

    public virtual DbSet<TmpOetrd> TmpOetrds { get; set; }

    public virtual DbSet<TmpPortfolioBal> TmpPortfolioBals { get; set; }

    public virtual DbSet<Tncaccept> Tncaccepts { get; set; }

    public virtual DbSet<Tncmaint> Tncmaints { get; set; }

    public virtual DbSet<TraceMstStkUpdate> TraceMstStkUpdates { get; set; }

    public virtual DbSet<TradeSplit> TradeSplits { get; set; }

    public virtual DbSet<TransMovement> TransMovements { get; set; }

    public virtual DbSet<TransMovementHistory> TransMovementHistories { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<Transactions123> Transactions123s { get; set; }

    public virtual DbSet<TransactionsArchive> TransactionsArchives { get; set; }

    public virtual DbSet<TransactionsHistory> TransactionsHistories { get; set; }

    public virtual DbSet<TransactionsHistory2011> TransactionsHistory2011s { get; set; }

    public virtual DbSet<TransactionsHistory2012> TransactionsHistory2012s { get; set; }

    public virtual DbSet<TransactionsHistory2012202406211438> TransactionsHistory2012202406211438s { get; set; }

    public virtual DbSet<TransactionsHistory2013> TransactionsHistory2013s { get; set; }

    public virtual DbSet<TransactionsHistory2014> TransactionsHistory2014s { get; set; }

    public virtual DbSet<TransactionsHistory2015> TransactionsHistory2015s { get; set; }

    public virtual DbSet<TransactionsHistory2016> TransactionsHistory2016s { get; set; }

    public virtual DbSet<TransactionsHistory2017> TransactionsHistory2017s { get; set; }

    public virtual DbSet<TransactionsHistory202406211438> TransactionsHistory202406211438s { get; set; }

    public virtual DbSet<TransactionsHistoryBak20240910> TransactionsHistoryBak20240910s { get; set; }

    public virtual DbSet<TransactionsHistoryTemp> TransactionsHistoryTemps { get; set; }

    public virtual DbSet<TransactionsRealized> TransactionsRealizeds { get; set; }

    public virtual DbSet<TransactionsRealized20130828> TransactionsRealized20130828s { get; set; }

    public virtual DbSet<TransactionsRealizedEx> TransactionsRealizedices { get; set; }

    public virtual DbSet<TransactionsRealizedHistory> TransactionsRealizedHistories { get; set; }

    public virtual DbSet<TransactionsRealizedHistory20210524> TransactionsRealizedHistory20210524s { get; set; }

    public virtual DbSet<TransactionsTemp> TransactionsTemps { get; set; }

    public virtual DbSet<TrdgPinGen> TrdgPinGens { get; set; }

    public virtual DbSet<TrdgPinGenLog> TrdgPinGenLogs { get; set; }

    public virtual DbSet<TxnProdVer> TxnProdVers { get; set; }

    public virtual DbSet<UserFavourite> UserFavourites { get; set; }

    public virtual DbSet<UserFavourites20130815> UserFavourites20130815s { get; set; }

    public virtual DbSet<UserFavourites20190920> UserFavourites20190920s { get; set; }

    public virtual DbSet<UserFavourites20240131> UserFavourites20240131s { get; set; }

    public virtual DbSet<UserFavouritesHistory> UserFavouritesHistories { get; set; }

    public virtual DbSet<UserRegistration> UserRegistrations { get; set; }

    public virtual DbSet<UserRegistration202207211504> UserRegistration202207211504s { get; set; }

    public virtual DbSet<UserRegistrationEcm> UserRegistrationEcms { get; set; }

    public virtual DbSet<UserRegistrationTest> UserRegistrationTests { get; set; }

    public virtual DbSet<UsloginActvTime> UsloginActvTimes { get; set; }

    public virtual DbSet<UsrAccess> UsrAccesses { get; set; }

    public virtual DbSet<UsrAccess202205171150> UsrAccess202205171150s { get; set; }

    public virtual DbSet<UsrAccess202404031545> UsrAccess202404031545s { get; set; }

    public virtual DbSet<UsrAccess202406281348> UsrAccess202406281348s { get; set; }

    public virtual DbSet<UsrAccessArchive> UsrAccessArchives { get; set; }

    public virtual DbSet<UsrAccessArchive202205171150> UsrAccessArchive202205171150s { get; set; }

    public virtual DbSet<UsrAccessArchive202404031545> UsrAccessArchive202404031545s { get; set; }

    public virtual DbSet<UsrAccessArchive202406281348> UsrAccessArchive202406281348s { get; set; }

    public virtual DbSet<UsrAccessEx> UsrAccessexes { get; set; }

    public virtual DbSet<UsrAccessExExtract> UsrAccessExExtracts { get; set; }

    public virtual DbSet<UsrAccessExSumm> UsrAccessExSumms { get; set; }

    public virtual DbSet<UsrAccessFa> UsrAccessFas { get; set; }

    public virtual DbSet<UsrAccessLimit> UsrAccessLimits { get; set; }

    public virtual DbSet<UsrAnalytic> UsrAnalytics { get; set; }

    public virtual DbSet<UsrAuthLimit> UsrAuthLimits { get; set; }

    public virtual DbSet<UsrBookmark> UsrBookmarks { get; set; }

    public virtual DbSet<UsrClntList> UsrClntLists { get; set; }

    public virtual DbSet<UsrClntList20140115> UsrClntList20140115s { get; set; }

    public virtual DbSet<UsrClntListTest> UsrClntListTests { get; set; }

    public virtual DbSet<UsrCoBrchAssign> UsrCoBrchAssigns { get; set; }

    public virtual DbSet<UsrDormantCtrl> UsrDormantCtrls { get; set; }

    public virtual DbSet<UsrEcm2kibb> UsrEcm2kibbs { get; set; }

    public virtual DbSet<UsrEcmoney2Kibb> UsrEcmoney2Kibbs { get; set; }

    public virtual DbSet<UsrEmailList> UsrEmailLists { get; set; }

    public virtual DbSet<UsrInfo> UsrInfos { get; set; }

    public virtual DbSet<UsrInfo20140115> UsrInfo20140115s { get; set; }

    public virtual DbSet<UsrInfo20140826> UsrInfo20140826s { get; set; }

    public virtual DbSet<UsrInfoBak> UsrInfoBaks { get; set; }

    public virtual DbSet<UsrInfoTest> UsrInfoTests { get; set; }

    public virtual DbSet<UsrInfoTest2> UsrInfoTest2s { get; set; }

    public virtual DbSet<UsrJwttoken> UsrJwttokens { get; set; }

    public virtual DbSet<UsrKentradePlusInfo> UsrKentradePlusInfos { get; set; }

    public virtual DbSet<UsrKentradePlusMonthlyReportBak20240628> UsrKentradePlusMonthlyReportBak20240628s { get; set; }

    public virtual DbSet<UsrKentradePlusMonthlyRpt> UsrKentradePlusMonthlyRpts { get; set; }

    public virtual DbSet<UsrLogin> UsrLogins { get; set; }

    public virtual DbSet<UsrLogin202204270830> UsrLogin202204270830s { get; set; }

    public virtual DbSet<UsrLogin202205171149> UsrLogin202205171149s { get; set; }

    public virtual DbSet<UsrLogin202404031533> UsrLogin202404031533s { get; set; }

    public virtual DbSet<UsrLogin202406281340> UsrLogin202406281340s { get; set; }

    public virtual DbSet<UsrLoginActvTime> UsrLoginActvTimes { get; set; }

    public virtual DbSet<UsrLoginActvTimeTemp> UsrLoginActvTimeTemps { get; set; }

    public virtual DbSet<UsrMobileDeviceId> UsrMobileDeviceIds { get; set; }

    public virtual DbSet<UsrMobileDeviceId20240716> UsrMobileDeviceId20240716s { get; set; }

    public virtual DbSet<UsrMobileDeviceIdsendDtl> UsrMobileDeviceIdsendDtls { get; set; }

    public virtual DbSet<UsrSession> UsrSessions { get; set; }

    public virtual DbSet<UsrSetting> UsrSettings { get; set; }

    public virtual DbSet<UsrSetting202204270831> UsrSetting202204270831s { get; set; }

    public virtual DbSet<UsrSetting202205171150> UsrSetting202205171150s { get; set; }

    public virtual DbSet<UsrSetting202311161504> UsrSetting202311161504s { get; set; }

    public virtual DbSet<UsrSetting202404031542> UsrSetting202404031542s { get; set; }

    public virtual DbSet<UsrSetting202406281346> UsrSetting202406281346s { get; set; }

    public virtual DbSet<UsrTypeAuthLimit> UsrTypeAuthLimits { get; set; }

    public virtual DbSet<UsrTypeList> UsrTypeLists { get; set; }

    public virtual DbSet<UsrTypeProd> UsrTypeProds { get; set; }

    public virtual DbSet<UsrTypeProd20130713> UsrTypeProd20130713s { get; set; }

    public virtual DbSet<UsrTypeProd20240405> UsrTypeProd20240405s { get; set; }

    public virtual DbSet<UsrTypeProd202410090945> UsrTypeProd202410090945s { get; set; }

    public virtual DbSet<UsrTypeXchg> UsrTypeXchgs { get; set; }

    public virtual DbSet<UsrXchg> UsrXchgs { get; set; }

    public virtual DbSet<UsrXchg202408231131> UsrXchg202408231131s { get; set; }

    public virtual DbSet<UsrXchgLog> UsrXchgLogs { get; set; }

    public virtual DbSet<UsrXchgModeChg> UsrXchgModeChgs { get; set; }

    public virtual DbSet<Usrtypeprod38> Usrtypeprod38s { get; set; }

    public virtual DbSet<ValRcvdByAutoPaymentResend> ValRcvdByAutoPaymentResends { get; set; }

    public virtual DbSet<ValRcvdBySpupdPymtCont> ValRcvdBySpupdPymtConts { get; set; }

    public virtual DbSet<ValRcvdBySpupdPymtRefNo> ValRcvdBySpupdPymtRefNos { get; set; }

    public virtual DbSet<ViewTest> ViewTests { get; set; }

    public virtual DbSet<VwAccContDtl> VwAccContDtls { get; set; }

    public virtual DbSet<VwClientInfo> VwClientInfos { get; set; }

    public virtual DbSet<VwClientList> VwClientLists { get; set; }

    public virtual DbSet<VwClientMtdturnover> VwClientMtdturnovers { get; set; }

    public virtual DbSet<VwClientMtdturnoverChart> VwClientMtdturnoverCharts { get; set; }

    public virtual DbSet<VwClientOsdueContraGain> VwClientOsdueContraGains { get; set; }

    public virtual DbSet<VwClientOsdueContraLoss> VwClientOsdueContraLosses { get; set; }

    public virtual DbSet<VwClientOsdueCreditInterest> VwClientOsdueCreditInterests { get; set; }

    public virtual DbSet<VwClientOsdueDebitInterest> VwClientOsdueDebitInterests { get; set; }

    public virtual DbSet<VwClientOsduePurchase> VwClientOsduePurchases { get; set; }

    public virtual DbSet<VwClientOsdueSale> VwClientOsdueSales { get; set; }

    public virtual DbSet<VwClientOsdueSetoffGain> VwClientOsdueSetoffGains { get; set; }

    public virtual DbSet<VwClientOsdueSetoffLoss> VwClientOsdueSetoffLosses { get; set; }

    public virtual DbSet<VwClientOsoverDueContraGain> VwClientOsoverDueContraGains { get; set; }

    public virtual DbSet<VwClientOsoverDueContraLoss> VwClientOsoverDueContraLosses { get; set; }

    public virtual DbSet<VwClientOsoverDuePurchase> VwClientOsoverDuePurchases { get; set; }

    public virtual DbSet<VwClientOsoverDueSale> VwClientOsoverDueSales { get; set; }

    public virtual DbSet<VwClientOsoverdueCreditInterest> VwClientOsoverdueCreditInterests { get; set; }

    public virtual DbSet<VwClientOsoverdueDebitInterest> VwClientOsoverdueDebitInterests { get; set; }

    public virtual DbSet<VwClientOsoverdueSetoffGain> VwClientOsoverdueSetoffGains { get; set; }

    public virtual DbSet<VwClientOsoverdueSetoffLoss> VwClientOsoverdueSetoffLosses { get; set; }

    public virtual DbSet<VwClientOsundueContraGain> VwClientOsundueContraGains { get; set; }

    public virtual DbSet<VwClientOsundueContraLoss> VwClientOsundueContraLosses { get; set; }

    public virtual DbSet<VwClientOsundueCreditInterest> VwClientOsundueCreditInterests { get; set; }

    public virtual DbSet<VwClientOsundueDebitInterest> VwClientOsundueDebitInterests { get; set; }

    public virtual DbSet<VwClientOsunduePurchase> VwClientOsunduePurchases { get; set; }

    public virtual DbSet<VwClientOsundueSale> VwClientOsundueSales { get; set; }

    public virtual DbSet<VwClientOsundueSetoffGain> VwClientOsundueSetoffGains { get; set; }

    public virtual DbSet<VwClientOsundueSetoffLoss> VwClientOsundueSetoffLosses { get; set; }

    public virtual DbSet<VwClientYtdturnover> VwClientYtdturnovers { get; set; }

    public virtual DbSet<VwClientshareinfo> VwClientshareinfos { get; set; }

    public virtual DbSet<VwClntChgBrchMigrateTableList> VwClntChgBrchMigrateTableLists { get; set; }

    public virtual DbSet<VwClntList> VwClntLists { get; set; }

    public virtual DbSet<VwEpContRemainingO> VwEpContRemainingOs { get; set; }

    public virtual DbSet<VwMstStk> VwMstStks { get; set; }

    public virtual DbSet<VwNotifierList> VwNotifierLists { get; set; }

    public virtual DbSet<VwOrderException> VwOrderExceptions { get; set; }

    public virtual DbSet<VwOrderPlaced> VwOrderPlaceds { get; set; }

    public virtual DbSet<VwOrderPlacedEco> VwOrderPlacedEcos { get; set; }

    public virtual DbSet<VwOrderStatus> VwOrderStatuses { get; set; }

    public virtual DbSet<VwOrderStatusEco> VwOrderStatusEcos { get; set; }

    public virtual DbSet<VwSiteMenu> VwSiteMenus { get; set; }

    public virtual DbSet<VwSiteMenuGrp> VwSiteMenuGrps { get; set; }

    public virtual DbSet<VwSuperiorList> VwSuperiorLists { get; set; }

    public virtual DbSet<VwTaskBemgr> VwTaskBemgrs { get; set; }

    public virtual DbSet<VwTran> VwTrans { get; set; }

    public virtual DbSet<VwTransHistory> VwTransHistories { get; set; }

    public virtual DbSet<VwTransactionsRealized> VwTransactionsRealizeds { get; set; }

    public virtual DbSet<VwUserMtdturnover> VwUserMtdturnovers { get; set; }

    public virtual DbSet<VwUserMtdturnoverChart> VwUserMtdturnoverCharts { get; set; }

    public virtual DbSet<VwUserOsdueContraGain> VwUserOsdueContraGains { get; set; }

    public virtual DbSet<VwUserOsdueContraLoss> VwUserOsdueContraLosses { get; set; }

    public virtual DbSet<VwUserOsdueCreditInterest> VwUserOsdueCreditInterests { get; set; }

    public virtual DbSet<VwUserOsdueDebitInterest> VwUserOsdueDebitInterests { get; set; }

    public virtual DbSet<VwUserOsduePurchase> VwUserOsduePurchases { get; set; }

    public virtual DbSet<VwUserOsdueSale> VwUserOsdueSales { get; set; }

    public virtual DbSet<VwUserOsdueSetOffGain> VwUserOsdueSetOffGains { get; set; }

    public virtual DbSet<VwUserOsdueSetOffLoss> VwUserOsdueSetOffLosses { get; set; }

    public virtual DbSet<VwUserOsoverDueContraGain> VwUserOsoverDueContraGains { get; set; }

    public virtual DbSet<VwUserOsoverDueContraLoss> VwUserOsoverDueContraLosses { get; set; }

    public virtual DbSet<VwUserOsoverDueCreditInterest> VwUserOsoverDueCreditInterests { get; set; }

    public virtual DbSet<VwUserOsoverDueDebitInterest> VwUserOsoverDueDebitInterests { get; set; }

    public virtual DbSet<VwUserOsoverDuePurchase> VwUserOsoverDuePurchases { get; set; }

    public virtual DbSet<VwUserOsoverDueSetOffGain> VwUserOsoverDueSetOffGains { get; set; }

    public virtual DbSet<VwUserOsoverDueSetOffLoss> VwUserOsoverDueSetOffLosses { get; set; }

    public virtual DbSet<VwUserOsoverdueSale> VwUserOsoverdueSales { get; set; }

    public virtual DbSet<VwUserOsunDueCreditInterest> VwUserOsunDueCreditInterests { get; set; }

    public virtual DbSet<VwUserOsunDueDebitInterest> VwUserOsunDueDebitInterests { get; set; }

    public virtual DbSet<VwUserOsunDueSetOffGain> VwUserOsunDueSetOffGains { get; set; }

    public virtual DbSet<VwUserOsunDueSetOffLoss> VwUserOsunDueSetOffLosses { get; set; }

    public virtual DbSet<VwUserOsundueContraGain> VwUserOsundueContraGains { get; set; }

    public virtual DbSet<VwUserOsundueContraLoss> VwUserOsundueContraLosses { get; set; }

    public virtual DbSet<VwUserOsunduePurchase> VwUserOsunduePurchases { get; set; }

    public virtual DbSet<VwUserOsundueSale> VwUserOsundueSales { get; set; }

    public virtual DbSet<VwUserYtdturnover> VwUserYtdturnovers { get; set; }

    public virtual DbSet<VwUsrAccess> VwUsrAccesses { get; set; }

    public virtual DbSet<VwUsrInfo> VwUsrInfos { get; set; }

    public virtual DbSet<VwUsrTypeProd> VwUsrTypeProds { get; set; }

    public virtual DbSet<WinscoreSetting> WinscoreSettings { get; set; }

    public virtual DbSet<XchgEarmark> XchgEarmarks { get; set; }

    public virtual DbSet<XchgTradingHour> XchgTradingHours { get; set; }

    public virtual DbSet<XlogAccTrustSummAutoReleaseEarmark> XlogAccTrustSummAutoReleaseEarmarks { get; set; }

    public virtual DbSet<XlogAllowCounterControl> XlogAllowCounterControls { get; set; }

    public virtual DbSet<XlogAnnouncement> XlogAnnouncements { get; set; }

    public virtual DbSet<XlogAnnouncementsControl> XlogAnnouncementsControls { get; set; }

    public virtual DbSet<XlogAnnouncementsControlUsr> XlogAnnouncementsControlUsrs { get; set; }

    public virtual DbSet<XlogBlockCounterControl> XlogBlockCounterControls { get; set; }

    public virtual DbSet<XlogBrchExpsLimit6Sr> XlogBrchExpsLimit6Srs { get; set; }

    public virtual DbSet<XlogBrchExpsLimit6SrsHistory> XlogBrchExpsLimit6SrsHistories { get; set; }

    public virtual DbSet<XlogBrchExpsLimitExcp> XlogBrchExpsLimitExcps { get; set; }

    public virtual DbSet<XlogBrchPrevDayOrd6Sr> XlogBrchPrevDayOrd6Srs { get; set; }

    public virtual DbSet<XlogBrchPrevDayOrd6SrsHistory> XlogBrchPrevDayOrd6SrsHistories { get; set; }

    public virtual DbSet<XlogBrchPrevDayOrdExcp> XlogBrchPrevDayOrdExcps { get; set; }

    public virtual DbSet<XlogBrkExpsLimit6Sr> XlogBrkExpsLimit6Srs { get; set; }

    public virtual DbSet<XlogBrkExpsLimit6SrsHistory> XlogBrkExpsLimit6SrsHistories { get; set; }

    public virtual DbSet<XlogBrkExpsLimitExcp> XlogBrkExpsLimitExcps { get; set; }

    public virtual DbSet<XlogBrkPrevDayOrd6Sr> XlogBrkPrevDayOrd6Srs { get; set; }

    public virtual DbSet<XlogBrkPrevDayOrd6SrsHistory> XlogBrkPrevDayOrd6SrsHistories { get; set; }

    public virtual DbSet<XlogBrkPrevDayOrdExcp> XlogBrkPrevDayOrdExcps { get; set; }

    public virtual DbSet<XlogBrkPrevDayOrderExcp> XlogBrkPrevDayOrderExcps { get; set; }

    public virtual DbSet<XlogBroadcastMsgMaint> XlogBroadcastMsgMaints { get; set; }

    public virtual DbSet<XlogBuyingInDefaulter> XlogBuyingInDefaulters { get; set; }

    public virtual DbSet<XlogClientTurnOver> XlogClientTurnOvers { get; set; }

    public virtual DbSet<XlogClntAcct> XlogClntAccts { get; set; }

    public virtual DbSet<XlogClntAcctArchive> XlogClntAcctArchives { get; set; }

    public virtual DbSet<XlogClntBankAccInfo> XlogClntBankAccInfos { get; set; }

    public virtual DbSet<XlogClntDefList> XlogClntDefLists { get; set; }

    public virtual DbSet<XlogClntDeletion6Sr> XlogClntDeletion6Srs { get; set; }

    public virtual DbSet<XlogClntDeletion6SrsHistory> XlogClntDeletion6SrsHistories { get; set; }

    public virtual DbSet<XlogClntDeletionExcp> XlogClntDeletionExcps { get; set; }

    public virtual DbSet<XlogClntFslist> XlogClntFslists { get; set; }

    public virtual DbSet<XlogClntInfo> XlogClntInfos { get; set; }

    public virtual DbSet<XlogClntInfo6Sr> XlogClntInfo6Srs { get; set; }

    public virtual DbSet<XlogClntInfo6SrsHistory> XlogClntInfo6SrsHistories { get; set; }

    public virtual DbSet<XlogClntInfoExcp> XlogClntInfoExcps { get; set; }

    public virtual DbSet<XlogClntInfoExcpArchive> XlogClntInfoExcpArchives { get; set; }

    public virtual DbSet<XlogClntLimit6Sr> XlogClntLimit6Srs { get; set; }

    public virtual DbSet<XlogClntLimit6SrsHistory> XlogClntLimit6SrsHistories { get; set; }

    public virtual DbSet<XlogClntLimitExcp> XlogClntLimitExcps { get; set; }

    public virtual DbSet<XlogClntLimitExcpArchive> XlogClntLimitExcpArchives { get; set; }

    public virtual DbSet<XlogClntPrevDayOrd6Sr> XlogClntPrevDayOrd6Srs { get; set; }

    public virtual DbSet<XlogClntPrevDayOrd6SrsHistory> XlogClntPrevDayOrd6SrsHistories { get; set; }

    public virtual DbSet<XlogClntPrevDayOrdExcp> XlogClntPrevDayOrdExcps { get; set; }

    public virtual DbSet<XlogClntSusp6Sr> XlogClntSusp6Srs { get; set; }

    public virtual DbSet<XlogClntSusp6SrsHistory> XlogClntSusp6SrsHistories { get; set; }

    public virtual DbSet<XlogClntSuspExcp> XlogClntSuspExcps { get; set; }

    public virtual DbSet<XlogClntXchg> XlogClntXchgs { get; set; }

    public virtual DbSet<XlogContraDetail> XlogContraDetails { get; set; }

    public virtual DbSet<XlogContraSetOff> XlogContraSetOffs { get; set; }

    public virtual DbSet<XlogContraSummary> XlogContraSummaries { get; set; }

    public virtual DbSet<XlogContractSummary> XlogContractSummaries { get; set; }

    public virtual DbSet<XlogDlrExpsLimit6Sr> XlogDlrExpsLimit6Srs { get; set; }

    public virtual DbSet<XlogDlrExpsLimit6SrsHistory> XlogDlrExpsLimit6SrsHistories { get; set; }

    public virtual DbSet<XlogDlrExpsLimitExcp> XlogDlrExpsLimitExcps { get; set; }

    public virtual DbSet<XlogDlrExpsLimitExcpArchive> XlogDlrExpsLimitExcpArchives { get; set; }

    public virtual DbSet<XlogDlrPrevDayOrd6Sr> XlogDlrPrevDayOrd6Srs { get; set; }

    public virtual DbSet<XlogDlrPrevDayOrd6SrsHistory> XlogDlrPrevDayOrd6SrsHistories { get; set; }

    public virtual DbSet<XlogDlrPrevDayOrdExcp> XlogDlrPrevDayOrdExcps { get; set; }

    public virtual DbSet<XlogDlrReassign6Sr> XlogDlrReassign6Srs { get; set; }

    public virtual DbSet<XlogDlrReassign6SrsHistory> XlogDlrReassign6SrsHistories { get; set; }

    public virtual DbSet<XlogDlrReassignExcp> XlogDlrReassignExcps { get; set; }

    public virtual DbSet<XlogDlrSusp6Sr> XlogDlrSusp6Srs { get; set; }

    public virtual DbSet<XlogDlrSusp6SrsHistory> XlogDlrSusp6SrsHistories { get; set; }

    public virtual DbSet<XlogDlrSuspExcp> XlogDlrSuspExcps { get; set; }

    public virtual DbSet<XlogEcosmarketDepthMaint> XlogEcosmarketDepthMaints { get; set; }

    public virtual DbSet<XlogEndDayStartTask> XlogEndDayStartTasks { get; set; }

    public virtual DbSet<XlogEndDayTask> XlogEndDayTasks { get; set; }

    public virtual DbSet<XlogEpAccountSummaryTrust> XlogEpAccountSummaryTrusts { get; set; }

    public virtual DbSet<XlogEpAccountSummaryTrust202403011751> XlogEpAccountSummaryTrust202403011751s { get; set; }

    public virtual DbSet<XlogEpPaymentContract> XlogEpPaymentContracts { get; set; }

    public virtual DbSet<XlogEpayment> XlogEpayments { get; set; }

    public virtual DbSet<XlogFpxresponse> XlogFpxresponses { get; set; }

    public virtual DbSet<XlogGtcexpiryPeriod> XlogGtcexpiryPeriods { get; set; }

    public virtual DbSet<XlogItrFileTrnx> XlogItrFileTrnxes { get; set; }

    public virtual DbSet<XlogLimitInfo> XlogLimitInfos { get; set; }

    public virtual DbSet<XlogMarketDepthMaint> XlogMarketDepthMaints { get; set; }

    public virtual DbSet<XlogMiscSetOff> XlogMiscSetOffs { get; set; }

    public virtual DbSet<XlogMstBrk> XlogMstBrks { get; set; }

    public virtual DbSet<XlogMstClntExp> XlogMstClntExps { get; set; }

    public virtual DbSet<XlogMstClntExpsArchive> XlogMstClntExpsArchives { get; set; }

    public virtual DbSet<XlogMstClntTradeSett> XlogMstClntTradeSetts { get; set; }

    public virtual DbSet<XlogMstClntTradeSettArchive> XlogMstClntTradeSettArchives { get; set; }

    public virtual DbSet<XlogMstClntXchgExp> XlogMstClntXchgExps { get; set; }

    public virtual DbSet<XlogMstClntXchgTrade> XlogMstClntXchgTrades { get; set; }

    public virtual DbSet<XlogMstCo> XlogMstCos { get; set; }

    public virtual DbSet<XlogMstCoBrch> XlogMstCoBrches { get; set; }

    public virtual DbSet<XlogMstCoBrchExp> XlogMstCoBrchExps { get; set; }

    public virtual DbSet<XlogMstCoBrchTradeSett> XlogMstCoBrchTradeSetts { get; set; }

    public virtual DbSet<XlogMstCoExp> XlogMstCoExps { get; set; }

    public virtual DbSet<XlogMstCoTradeSett> XlogMstCoTradeSetts { get; set; }

    public virtual DbSet<XlogMstCountry> XlogMstCountries { get; set; }

    public virtual DbSet<XlogMstCountryExp> XlogMstCountryExps { get; set; }

    public virtual DbSet<XlogMstCrOrder> XlogMstCrOrders { get; set; }

    public virtual DbSet<XlogMstCurcy> XlogMstCurcies { get; set; }

    public virtual DbSet<XlogMstDmaorder> XlogMstDmaorders { get; set; }

    public virtual DbSet<XlogMstForm> XlogMstForms { get; set; }

    public virtual DbSet<XlogMstGlobalClntEcosLimitExp> XlogMstGlobalClntEcosLimitExps { get; set; }

    public virtual DbSet<XlogMstGlobalLimitExp> XlogMstGlobalLimitExps { get; set; }

    public virtual DbSet<XlogMstHld> XlogMstHlds { get; set; }

    public virtual DbSet<XlogMstInstrStpDty> XlogMstInstrStpDties { get; set; }

    public virtual DbSet<XlogMstInternalAcType> XlogMstInternalAcTypes { get; set; }

    public virtual DbSet<XlogMstLegalStat> XlogMstLegalStats { get; set; }

    public virtual DbSet<XlogMstOrderGroup> XlogMstOrderGroups { get; set; }

    public virtual DbSet<XlogMstStk> XlogMstStks { get; set; }

    public virtual DbSet<XlogMstStkBrdExp> XlogMstStkBrdExps { get; set; }

    public virtual DbSet<XlogMstStkExp> XlogMstStkExps { get; set; }

    public virtual DbSet<XlogMstStkExpsBrch> XlogMstStkExpsBrches { get; set; }

    public virtual DbSet<XlogMstStkTradeSett> XlogMstStkTradeSetts { get; set; }

    public virtual DbSet<XlogMstStkTradeSettBrch> XlogMstStkTradeSettBrches { get; set; }

    public virtual DbSet<XlogMstStkTradeSettBrchCtrl> XlogMstStkTradeSettBrchCtrls { get; set; }

    public virtual DbSet<XlogMstStkXchg> XlogMstStkXchgs { get; set; }

    public virtual DbSet<XlogMstStkXchgExp> XlogMstStkXchgExps { get; set; }

    public virtual DbSet<XlogMstStkXchgTradeSett> XlogMstStkXchgTradeSetts { get; set; }

    public virtual DbSet<XlogMstTrxnCost> XlogMstTrxnCosts { get; set; }

    public virtual DbSet<XlogMstUsrExp> XlogMstUsrExps { get; set; }

    public virtual DbSet<XlogMstUsrExpsArchive> XlogMstUsrExpsArchives { get; set; }

    public virtual DbSet<XlogMstUsrTradeSett> XlogMstUsrTradeSetts { get; set; }

    public virtual DbSet<XlogMstUsrXchgExp> XlogMstUsrXchgExps { get; set; }

    public virtual DbSet<XlogMstUsrXchgTrade> XlogMstUsrXchgTrades { get; set; }

    public virtual DbSet<XlogNotificationSetting> XlogNotificationSettings { get; set; }

    public virtual DbSet<XlogOn9Tagging> XlogOn9Taggings { get; set; }

    public virtual DbSet<XlogOrderGroupDtl> XlogOrderGroupDtls { get; set; }

    public virtual DbSet<XlogOrderQueue> XlogOrderQueues { get; set; }

    public virtual DbSet<XlogOrderTypeAdj> XlogOrderTypeAdjs { get; set; }

    public virtual DbSet<XlogPaymentRefNo> XlogPaymentRefNos { get; set; }

    public virtual DbSet<XlogPfclntInfo> XlogPfclntInfos { get; set; }

    public virtual DbSet<XlogPriceAlert> XlogPriceAlerts { get; set; }

    public virtual DbSet<XlogResearch> XlogResearches { get; set; }

    public virtual DbSet<XlogResearchAnalyst> XlogResearchAnalysts { get; set; }

    public virtual DbSet<XlogResearchCategory> XlogResearchCategories { get; set; }

    public virtual DbSet<XlogRldClntList> XlogRldClntLists { get; set; }

    public virtual DbSet<XlogShareInfo> XlogShareInfos { get; set; }

    public virtual DbSet<XlogShareInfoExcp> XlogShareInfoExcps { get; set; }

    public virtual DbSet<XlogShareInfoExcp20240220> XlogShareInfoExcp20240220s { get; set; }

    public virtual DbSet<XlogStkCtrl> XlogStkCtrls { get; set; }

    public virtual DbSet<XlogStkIdea> XlogStkIdeas { get; set; }

    public virtual DbSet<XlogStockControlClientList> XlogStockControlClientLists { get; set; }

    public virtual DbSet<XlogT8forceSellingList6Sr> XlogT8forceSellingList6Srs { get; set; }

    public virtual DbSet<XlogT8forceSellingList6SrsHistory> XlogT8forceSellingList6SrsHistories { get; set; }

    public virtual DbSet<XlogT8forceSellingListExcp> XlogT8forceSellingListExcps { get; set; }

    public virtual DbSet<XlogThresholdLimitExcp> XlogThresholdLimitExcps { get; set; }

    public virtual DbSet<XlogTncmaint> XlogTncmaints { get; set; }

    public virtual DbSet<XlogTransaction> XlogTransactions { get; set; }

    public virtual DbSet<XlogUserDeletion6Sr> XlogUserDeletion6Srs { get; set; }

    public virtual DbSet<XlogUserDeletion6SrsHistory> XlogUserDeletion6SrsHistories { get; set; }

    public virtual DbSet<XlogUserDeletionExcp> XlogUserDeletionExcps { get; set; }

    public virtual DbSet<XlogUserFavouritesRemoveDelistedStk> XlogUserFavouritesRemoveDelistedStks { get; set; }

    public virtual DbSet<XlogUsrAuthLimit> XlogUsrAuthLimits { get; set; }

    public virtual DbSet<XlogUsrCtrlInfoExcp> XlogUsrCtrlInfoExcps { get; set; }

    public virtual DbSet<XlogUsrDeviceInfo> XlogUsrDeviceInfos { get; set; }

    public virtual DbSet<XlogUsrInfo> XlogUsrInfos { get; set; }

    public virtual DbSet<XlogUsrInfo20140115> XlogUsrInfo20140115s { get; set; }

    public virtual DbSet<XlogUsrInfo6Sr> XlogUsrInfo6Srs { get; set; }

    public virtual DbSet<XlogUsrInfo6SrsHistory> XlogUsrInfo6SrsHistories { get; set; }

    public virtual DbSet<XlogUsrInfoArchive> XlogUsrInfoArchives { get; set; }

    public virtual DbSet<XlogUsrInfoExcp> XlogUsrInfoExcps { get; set; }

    public virtual DbSet<XlogUsrInfoExcpArchive> XlogUsrInfoExcpArchives { get; set; }

    public virtual DbSet<XlogUsrInfoRegMember> XlogUsrInfoRegMembers { get; set; }

    public virtual DbSet<XlogUsrKentradePlusInfo> XlogUsrKentradePlusInfos { get; set; }

    public virtual DbSet<XlogUsrLogin> XlogUsrLogins { get; set; }

    public virtual DbSet<XlogUsrMobileDeviceId> XlogUsrMobileDeviceIds { get; set; }

    public virtual DbSet<XlogUsrRegInfo6Sr> XlogUsrRegInfo6Srs { get; set; }

    public virtual DbSet<XlogUsrRegInfo6SrsHistory> XlogUsrRegInfo6SrsHistories { get; set; }

    public virtual DbSet<XlogUsrRegInfoExcp> XlogUsrRegInfoExcps { get; set; }

    public virtual DbSet<XlogUsrSetting> XlogUsrSettings { get; set; }

    public virtual DbSet<XlogUsrTypeAuthLimit> XlogUsrTypeAuthLimits { get; set; }

    public virtual DbSet<XlogUsrTypeList> XlogUsrTypeLists { get; set; }

    public virtual DbSet<XlogUsrTypeListProd> XlogUsrTypeListProds { get; set; }

    public virtual DbSet<XlogUsrXchg> XlogUsrXchgs { get; set; }

    public virtual DbSet<XlogUsrXchg202408231343> XlogUsrXchg202408231343s { get; set; }

    public virtual DbSet<XlogZmbmsresend> XlogZmbmsresends { get; set; }

    public virtual DbSet<Zmbmsinfo> Zmbmsinfos { get; set; }

    public virtual DbSet<ZmbmsinfoFst> ZmbmsinfoFsts { get; set; }

    public virtual DbSet<ZmbmsinfoHistory> ZmbmsinfoHistories { get; set; }

    public virtual DbSet<ZmbmsinfoHistoryFst> ZmbmsinfoHistoryFsts { get; set; }

    public virtual DbSet<Zmbmsresend> Zmbmsresends { get; set; }

    public virtual DbSet<ZmbmsresendHistory> ZmbmsresendHistories { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=192.168.100.48;Database=DB_EFBTX_LBSL;User Id=sa;Password=Excel@123force;TrustServerCertificate=true;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccContDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccContDtl");

            entity.Property(e => e.DContAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dContAmt");
            entity.Property(e => e.DContQty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("dContQty");
            entity.Property(e => e.DDffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dDFFee");
            entity.Property(e => e.DInterestAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dInterestAmt");
            entity.Property(e => e.DOsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dOSAmt");
            entity.Property(e => e.DOsqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("dOSQty");
            entity.Property(e => e.DUnitPrice)
                .HasColumnType("decimal(14, 8)")
                .HasColumnName("dUnitPrice");
            entity.Property(e => e.DtContDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContDate");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DtLastUpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdatedDate");
            entity.Property(e => e.DtRollOverDate)
                .HasColumnType("datetime")
                .HasColumnName("dtRollOverDate");
            entity.Property(e => e.DtSettleDate)
                .HasColumnType("datetime")
                .HasColumnName("dtSettleDate");
            entity.Property(e => e.IProcInd).HasColumnName("iProcInd");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SContType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sContType");
            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SStkCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sStkCode");
            entity.Property(e => e.STag)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sTag");
        });

        modelBuilder.Entity<AccContDtlHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccContDtlHistory");

            entity.Property(e => e.DContAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dContAmt");
            entity.Property(e => e.DContQty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("dContQty");
            entity.Property(e => e.DDffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dDFFee");
            entity.Property(e => e.DInterestAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dInterestAmt");
            entity.Property(e => e.DOsamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dOSAmt");
            entity.Property(e => e.DOsqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("dOSQty");
            entity.Property(e => e.DUnitPrice)
                .HasColumnType("decimal(14, 8)")
                .HasColumnName("dUnitPrice");
            entity.Property(e => e.DtContDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContDate");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DtLastUpdatedDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdatedDate");
            entity.Property(e => e.DtRollOverDate)
                .HasColumnType("datetime")
                .HasColumnName("dtRollOverDate");
            entity.Property(e => e.DtSettleDate)
                .HasColumnType("datetime")
                .HasColumnName("dtSettleDate");
            entity.Property(e => e.IProcInd).HasColumnName("iProcInd");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SContType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sContType");
            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SStkCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sStkCode");
            entity.Property(e => e.STag)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sTag");
        });

        modelBuilder.Entity<AccContType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccContType");

            entity.Property(e => e.IContTypeSeq).HasColumnName("iContTypeSeq");
            entity.Property(e => e.IPayable).HasColumnName("iPayable");
            entity.Property(e => e.IViewable).HasColumnName("iViewable");
            entity.Property(e => e.SContCat)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sContCat");
            entity.Property(e => e.SContDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContDesc");
            entity.Property(e => e.SContTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContTitle");
            entity.Property(e => e.SContType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sContType");
        });

        modelBuilder.Entity<AccPymtCont>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtCont");

            entity.Property(e => e.DPymtAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dPymtAmt");
            entity.Property(e => e.DPymtAmtByTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dPymtAmtByTrust");
            entity.Property(e => e.DtContDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContDate");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SContType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sContType");
            entity.Property(e => e.SPymtBosstatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sPymtBOSStatus");
            entity.Property(e => e.SPymtProcInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sPymtProcInd");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
        });

        modelBuilder.Entity<AccPymtContHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtContHistory");

            entity.Property(e => e.DPymtAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dPymtAmt");
            entity.Property(e => e.DPymtAmtByTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dPymtAmtByTrust");
            entity.Property(e => e.DtContDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContDate");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SPymtBosstatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sPymtBOSStatus");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
        });

        modelBuilder.Entity<AccPymtExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtExcp");

            entity.Property(e => e.DContBankPymtTtl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dContBankPymtTtl");
            entity.Property(e => e.DContTrustPymtTtl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dContTrustPymtTtl");
            entity.Property(e => e.DGrandBankPymtTtl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dGrandBankPymtTtl");
            entity.Property(e => e.DGrandTrustPymtTtl)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dGrandTrustPymtTtl");
            entity.Property(e => e.DtContDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContDate");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.IPymtReconInd).HasColumnName("iPymtReconInd");
            entity.Property(e => e.SBillReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sBillReferenceNo");
            entity.Property(e => e.SClntCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClntCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("sRemarks");
            entity.Property(e => e.SUsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sUsrID");
        });

        modelBuilder.Entity<AccPymtRefNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtRefNo");

            entity.Property(e => e.DPymtAmt)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dPymtAmt");
            entity.Property(e => e.DPymtAmtByTrust)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dPymtAmtByTrust");
            entity.Property(e => e.DRetAmt)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dRetAmt");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.DtPymtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtPymtDate");
            entity.Property(e => e.DtRetDate)
                .HasColumnType("datetime")
                .HasColumnName("dtRetDate");
            entity.Property(e => e.IPymtReconInd).HasColumnName("iPymtReconInd");
            entity.Property(e => e.SChannelId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sChannelID");
            entity.Property(e => e.SClntCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClntCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SMerchantId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sMerchantID");
            entity.Property(e => e.SPymtAccNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sPymtAccNo");
            entity.Property(e => e.SPymtBank)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sPymtBank");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SRetBankRef)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sRetBankRef");
            entity.Property(e => e.SRetUsrName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sRetUsrName");
            entity.Property(e => e.SReturnCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sReturnCode");
            entity.Property(e => e.SReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sReturnMsg");
            entity.Property(e => e.SUsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sUsrID");
        });

        modelBuilder.Entity<AccPymtRefNoHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtRefNoHistory");

            entity.Property(e => e.DPymtAmt)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dPymtAmt");
            entity.Property(e => e.DPymtAmtByTrust)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dPymtAmtByTrust");
            entity.Property(e => e.DRetAmt)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dRetAmt");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DtPymtDate)
                .HasColumnType("datetime")
                .HasColumnName("dtPymtDate");
            entity.Property(e => e.DtRetDate)
                .HasColumnType("datetime")
                .HasColumnName("dtRetDate");
            entity.Property(e => e.SChannelId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sChannelID");
            entity.Property(e => e.SClntCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClntCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SMerchantId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sMerchantID");
            entity.Property(e => e.SPymtAccNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sPymtAccNo");
            entity.Property(e => e.SPymtBank)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sPymtBank");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SRetBankRef)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sRetBankRef");
            entity.Property(e => e.SRetUsrName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sRetUsrName");
            entity.Property(e => e.SReturnCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sReturnCode");
            entity.Property(e => e.SReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sReturnMsg");
            entity.Property(e => e.SUsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sUsrID");
        });

        modelBuilder.Entity<AccPymtStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccPymtStatus");

            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SPymtStatusCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sPymtStatusCode");
            entity.Property(e => e.SPymtStatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtStatusDesc");
        });

        modelBuilder.Entity<AccTrustDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccTrustDtl");

            entity.Property(e => e.DTransEarmarkAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTransEarmarkAmt");
            entity.Property(e => e.DTransTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTransTrustAmt");
            entity.Property(e => e.DTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmt");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
            entity.Property(e => e.SRecType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sRecType");
        });

        modelBuilder.Entity<AccTrustSumm>(entity =>
        {
            entity.HasKey(e => new { e.SClientCode, e.SCoBrchCode }).HasName("PK__AccTrust__CC9A263F5E1D0604");

            entity.ToTable("AccTrustSumm");

            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.DTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmt");
            entity.Property(e => e.DTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmtEarmark");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
        });

        modelBuilder.Entity<AccTrustSummOthCcy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccTrustSumm_OthCcy");

            entity.Property(e => e.DTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmt");
            entity.Property(e => e.DTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmtEarmark");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCurrency");
        });

        modelBuilder.Entity<AccountSummary>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.CoBrchCode, e.Currency });

            entity.ToTable("AccountSummary");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AvailableTrustAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bills).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContraGains).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContraLosses).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueSettlement).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FloatAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForcedSelling).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForeignLimit)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Foreign_Limit");
            entity.Property(e => e.ForeignPct)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Foreign_Pct");
            entity.Property(e => e.LocalLimit)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Local_Limit");
            entity.Property(e => e.LocalPct)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Local_Pct");
            entity.Property(e => e.Miscellaneous).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OthersOsbal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OthersOSBal");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RpurchaseContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RPurchaseContract");
            entity.Property(e => e.RsalesContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RSalesContract");
            entity.Property(e => e.SalesProcceedsDue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrustAccout).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrustAmtEarmark).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AccountSummary202403011751>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccountSummary_20240301_1751");

            entity.Property(e => e.AvailableTrustAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bills).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraGains).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContraLosses).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DueSettlement).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FloatAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForcedSelling).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForeignLimit)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Foreign_Limit");
            entity.Property(e => e.ForeignPct)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Foreign_Pct");
            entity.Property(e => e.LocalLimit)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Local_Limit");
            entity.Property(e => e.LocalPct)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Local_Pct");
            entity.Property(e => e.Miscellaneous).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OthersOsbal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OthersOSBal");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RpurchaseContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RPurchaseContract");
            entity.Property(e => e.RsalesContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RSalesContract");
            entity.Property(e => e.SalesProcceedsDue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrustAccout).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrustAmtEarmark).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AccountSummaryHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccountSummaryHistory");

            entity.Property(e => e.AvailableTrustAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Bills).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraGains).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContraLosses).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DueSettlement).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FloatAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForcedSelling).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ForeignLimit)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("Foreign_Limit");
            entity.Property(e => e.ForeignPct)
                .HasColumnType("numeric(9, 2)")
                .HasColumnName("Foreign_Pct");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.LocalLimit)
                .HasColumnType("numeric(14, 2)")
                .HasColumnName("Local_Limit");
            entity.Property(e => e.LocalPct)
                .HasColumnType("numeric(9, 2)")
                .HasColumnName("Local_Pct");
            entity.Property(e => e.Miscellaneous).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OthersOsbal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OthersOSBal");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RpurchaseContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RPurchaseContract");
            entity.Property(e => e.RsalesContract)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RSalesContract");
            entity.Property(e => e.SalesProcceedsDue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrustAccout).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.TrustAmtEarmark).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<AlgoOrder>(entity =>
        {
            entity.HasKey(e => e.OrderSeqNo);

            entity.ToTable("AlgoOrder");

            entity.Property(e => e.OrderSeqNo).ValueGeneratedNever();
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TrailingAmt).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlgoOrderHistory>(entity =>
        {
            entity.HasKey(e => new { e.OrderSeqNo, e.PlaceOrderTime });

            entity.ToTable("AlgoOrderHistory");

            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.TrailingAmt).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AllClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AllClient");

            entity.Property(e => e.ClntBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntNicno)
                .HasMaxLength(30)
                .HasColumnName("ClntNICNo");
            entity.Property(e => e.ClntOicno)
                .HasMaxLength(30)
                .HasColumnName("ClntOICNo");
        });

        modelBuilder.Entity<AllUserClient>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AllUserClient");

            entity.Property(e => e.ClntBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntNicno)
                .HasMaxLength(30)
                .HasColumnName("ClntNICNo");
            entity.Property(e => e.ClntOicno)
                .HasMaxLength(30)
                .HasColumnName("ClntOICNo");
            entity.Property(e => e.UsrBrchCode).HasMaxLength(6);
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrPassNo).HasMaxLength(30);
        });

        modelBuilder.Entity<Announcement>(entity =>
        {
            entity.HasKey(e => e.NewsId);

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.AnnouncementControls)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.NewsDate).HasColumnType("datetime");
            entity.Property(e => e.NewsFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsLink)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsSummary)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.NewsTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsType).HasComment("1-General; 2-Special");
            entity.Property(e => e.NewsUser)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PublishStatus)
                .HasDefaultValue(0)
                .HasComment("0-No; 1-Yes");
            entity.Property(e => e.SysType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
            entity.Property(e => e.ViewMode).HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<AnnouncementsControl>(entity =>
        {
            entity.HasKey(e => new { e.NewsId, e.UsrType });

            entity.ToTable("AnnouncementsControl");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
        });

        modelBuilder.Entity<AnnouncementsControlUsr>(entity =>
        {
            entity.HasKey(e => new { e.NewsId, e.UsrId, e.CoBrchCode });

            entity.ToTable("AnnouncementsControlUsr");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ArchiveTablesLog>(entity =>
        {
            entity.HasKey(e => new { e.ArchiveDate, e.ArchiveDateTime, e.DatabaseName, e.TableName });

            entity.ToTable("ArchiveTablesLog");

            entity.Property(e => e.ArchiveDateTime).HasColumnType("datetime");
            entity.Property(e => e.DatabaseName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ArchiveDatabaseName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ArchiveEndTime).HasColumnType("datetime");
            entity.Property(e => e.ArchiveStartTime).HasColumnType("datetime");
            entity.Property(e => e.ArchiveStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ArchiveTableName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ErrMsg)
                .HasMaxLength(8000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BannerInfo>(entity =>
        {
            entity.HasKey(e => new { e.BannerId, e.LastUpdated });

            entity.ToTable("BannerInfo");

            entity.Property(e => e.BannerId).HasColumnName("BannerID");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.AttachmentFileName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AttachmentUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("AttachmentURL");
            entity.Property(e => e.Banner)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BannerHide)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LinkActionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LinkEnable)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BeTask202403261024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BeTask_20240326_1024");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BeTask202404291342>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BeTask_20240429_1342");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BeTask202406250955>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BeTask_20240625_0955");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BebrkInfoStartTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BEBrkInfoStartTask");

            entity.Property(e => e.CanStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.StartTask)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskCat)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BemidDayStartTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BEMidDayStartTask");

            entity.Property(e => e.CanStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.StartTask)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskCat)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BerptStartTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BERptStartTask");

            entity.Property(e => e.CanStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.StartTask)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskCat)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BestartTask>(entity =>
        {
            entity.HasKey(e => e.TaskCat);

            entity.ToTable("BEStartTask");

            entity.Property(e => e.TaskCat)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CanStart)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
            entity.Property(e => e.StartTask)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Betask>(entity =>
        {
            entity.HasKey(e => new { e.TaskCat, e.TaskId });

            entity.ToTable("BETask");

            entity.Property(e => e.TaskCat).HasDefaultValue(1);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .HasDefaultValue("");
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<Betask20150727>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_20150727");

            entity.Property(e => e.Availability)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BrkCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CheckTime)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NextDay)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NonTrading)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<Betask20210621>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_20210621");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<Betask202205171150>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_20220517_1150");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<Betask202404031550>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_20240403_1550");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<Betask202406281351>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_20240628_1351");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BetaskKibbNewTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_KIBB_NewTasks");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BetaskKibbNewTasks20210625>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BETask_KIBB_NewTasks_20210625");

            entity.Property(e => e.Availability).HasMaxLength(1);
            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.Notes).HasMaxLength(250);
            entity.Property(e => e.OldDependency)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<BetaskLog>(entity =>
        {
            entity.HasKey(e => new { e.TaskId, e.TimeStamp, e.SeqNo });

            entity.ToTable("BETaskLog");

            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.Status).HasMaxLength(256);
        });

        modelBuilder.Entity<BidSetting>(entity =>
        {
            entity.HasKey(e => new { e.Price, e.XchgCode });

            entity.ToTable("BidSetting");

            entity.Property(e => e.Price).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Size).HasColumnType("decimal(7, 3)");
        });

        modelBuilder.Entity<BroadcastMsgMaint>(entity =>
        {
            entity.HasKey(e => e.NewsId);

            entity.ToTable("BroadcastMsgMaint");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.Channel)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.MobileMsg)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.NewsDate).HasColumnType("datetime");
            entity.Property(e => e.NewsFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsSummary)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.NewsTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsUser)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PublishStatus)
                .HasDefaultValue(0)
                .HasComment("0-No; 1-Yes");
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<BroadcastMsgMaintArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BroadcastMsgMaint_Archive");

            entity.Property(e => e.Channel)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.MobileMsg)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.NewsDate).HasColumnType("datetime");
            entity.Property(e => e.NewsFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.NewsSummary)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.NewsTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewsUser)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ValidFrom).HasColumnType("datetime");
            entity.Property(e => e.ValidTo).HasColumnType("datetime");
        });

        modelBuilder.Entity<BroadcastMsgMaintUserRead>(entity =>
        {
            entity.HasKey(e => new { e.NewsId, e.Channel, e.UserId });

            entity.ToTable("BroadcastMsgMaint_UserRead");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.Channel)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ReadDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<BuyingInDefaulter>(entity =>
        {
            entity.HasKey(e => e.TransId).HasName("PK_BuyingInDefaulterTmp");

            entity.ToTable("BuyingInDefaulter");

            entity.Property(e => e.TransId).HasColumnName("TransID");
            entity.Property(e => e.BuyingInMarketFee).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.InstruLongCode)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy).HasMaxLength(20);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderBic)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("OrderBIC");
            entity.Property(e => e.OrderBookPositionAccId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("OrderBookPositionAccID");
            entity.Property(e => e.OrderTraderId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("OrderTraderID");
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TradedPrice).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.TradedQty).HasColumnType("decimal(12, 0)");
            entity.Property(e => e.TransactDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<CareOrderAssignment>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.ClntCode, e.CoBrchCode });

            entity.ToTable("CareOrderAssignment");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CareOrderGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId);

            entity.ToTable("CareOrderGroup");

            entity.Property(e => e.GroupId).ValueGeneratedNever();
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.GroupDesc)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CareOrderGroupStock>(entity =>
        {
            entity.HasKey(e => new { e.GroupId, e.StockCode, e.XchgCode });

            entity.ToTable("CareOrderGroupStock");

            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CareOrderPlaced>(entity =>
        {
            entity.HasKey(e => e.SequenceNo).IsClustered(false);

            entity.ToTable("CareOrderPlaced");

            entity.Property(e => e.SequenceNo).ValueGeneratedNever();
            entity.Property(e => e.AvgPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.OrderId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RouteBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RouteNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RouteStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TokenNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CareOrderRouteDtl>(entity =>
        {
            entity.HasKey(e => new { e.RouteDtlNo, e.SequenceNo, e.RouteSeqNo }).IsClustered(false);

            entity.ToTable("CareOrderRouteDtl");

            entity.Property(e => e.AvgPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.OrderId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RouteBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RouteNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RouteStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TokenNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClientList>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ClientCode, e.OriginateUserId });

            entity.ToTable("ClientList");

            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginateUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("OriginateUserID");
            entity.Property(e => e.IsAssociated).HasDefaultValue(0);
        });

        modelBuilder.Entity<ClientOrderInfo>(entity =>
        {
            entity.HasKey(e => new { e.TransSeqNo, e.OrderDateTime });

            entity.ToTable("ClientOrderInfo");

            entity.Property(e => e.OrderDateTime).HasColumnType("datetime");
            entity.Property(e => e.ActionCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.OrderPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.OrgOrderDateTime).HasColumnType("datetime");
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
        });

        modelBuilder.Entity<ClientOrderInfoArchive>(entity =>
        {
            entity.HasKey(e => new { e.TransSeqNo, e.OrderDateTime });

            entity.ToTable("ClientOrderInfo_Archive");

            entity.Property(e => e.OrderDateTime).HasColumnType("datetime");
            entity.Property(e => e.ActionCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.OrderPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.OrgOrderDateTime).HasColumnType("datetime");
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
        });

        modelBuilder.Entity<ClientSetOff>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.TransDate });

            entity.ToTable("ClientSetOff");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.InterestAmount).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.InterestType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SetOffAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SetOffType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.TransDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<ClientTradeInfo>(entity =>
        {
            entity.HasKey(e => new { e.TransSeqNo, e.MatchedTime });

            entity.ToTable("ClientTradeInfo");

            entity.Property(e => e.MatchedTime).HasColumnType("datetime");
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno).HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.Processed).HasDefaultValue((byte)0);
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
        });

        modelBuilder.Entity<ClientTradeInfoArchive>(entity =>
        {
            entity.HasKey(e => new { e.TransSeqNo, e.MatchedTime });

            entity.ToTable("ClientTradeInfo_Archive");

            entity.Property(e => e.MatchedTime).HasColumnType("datetime");
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno).HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.Processed).HasDefaultValue((byte)0);
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
        });

        modelBuilder.Entity<ClientTradeInfoBatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClientTradeInfoBatch");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno).HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.MatchedTime).HasColumnType("datetime");
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
        });

        modelBuilder.Entity<ClientTradeInfoBatchArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClientTradeInfoBatch_Archive");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno).HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.MatchedTime).HasColumnType("datetime");
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
        });

        modelBuilder.Entity<ClientTurnOver>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClntCode, e.Year, e.Month, e.Source }).HasName("PK_ClientTurnOver_1");

            entity.ToTable("ClientTurnOver");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("P")
                .IsFixedLength();
            entity.Property(e => e.Brokerage).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TurnOver).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<ClntAcct>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.CoBrchCode }).HasName("PK_ClntAcct_1");

            entity.ToTable("ClntAcct");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AllowTrustWithdrawal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ApprvTrdgLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.AvailableLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntAcctType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntBank)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClntBankAcct).HasMaxLength(50);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCloseBy).HasMaxLength(16);
            entity.Property(e => e.ClntCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ClntDelinquentStat).HasDefaultValueSql("('')");
            entity.Property(e => e.ClntDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntDormantDate).HasColumnType("datetime");
            entity.Property(e => e.ClntDormantStat).HasDefaultValueSql("('')");
            entity.Property(e => e.ClntInternalAcType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClntLastTrxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLastUpdatedBy).HasMaxLength(16);
            entity.Property(e => e.ClntLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLegalStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntMainType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClntMrgnAcNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntOpenBy).HasMaxLength(16);
            entity.Property(e => e.ClntOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReassignDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntRemId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ClntRemID");
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntStat)
                .HasMaxLength(1)
                .HasComment("A - Active; S - Suspend; C - Close;");
            entity.Property(e => e.ClntSuspendDate).HasColumnType("datetime");
            entity.Property(e => e.ClntSuspendRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ClntTrdgStat)
                .HasMaxLength(1)
                .HasComment("Y - Allow Buy & Sell; Active; N - Suspend Buy & Sell; B - Suspend Buy; S - Suspend Sell; ");
            entity.Property(e => e.ClntType)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClredTabal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ClredTABal");
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(17, 2)");
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.MultiCcyInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.On9ClntInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Otpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("OTPExpiration");
            entity.Property(e => e.OutboundInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.RegOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RegOTPCode");
            entity.Property(e => e.RegOtpresendAtt).HasColumnName("RegOTPResendAtt");
            entity.Property(e => e.RegOtpvldtAtt).HasColumnName("RegOTPVldtAtt");
            entity.Property(e => e.ShrCheckRegDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.TrustAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Up2Ecosdate)
                .HasColumnType("datetime")
                .HasColumnName("Up2ECOSDate");
            entity.Property(e => e.W8benExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("W8BenExpiryDate");
            entity.Property(e => e.W8benInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasColumnName("W8BenInd");
        });

        modelBuilder.Entity<ClntAcct202201281900>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntAcct_20220128_1900");

            entity.Property(e => e.AllowTrustWithdrawal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ApprvTrdgLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.AvailableLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntAcctType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntBankAcct).HasMaxLength(50);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCloseBy).HasMaxLength(16);
            entity.Property(e => e.ClntCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntDormantDate).HasColumnType("datetime");
            entity.Property(e => e.ClntInternalAcType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClntLastTrxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLastUpdatedBy).HasMaxLength(16);
            entity.Property(e => e.ClntLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLegalStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntMainType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntMrgnAcNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntOpenBy).HasMaxLength(16);
            entity.Property(e => e.ClntOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReassignDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntRemId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ClntRemID");
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntStat).HasMaxLength(1);
            entity.Property(e => e.ClntSuspendDate).HasColumnType("datetime");
            entity.Property(e => e.ClntSuspendRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ClntTrdgStat).HasMaxLength(1);
            entity.Property(e => e.ClntType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClredTabal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ClredTABal");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(17, 2)");
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.MultiCcyInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.On9ClntInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OutboundInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShrCheckRegDate).HasColumnType("datetime");
            entity.Property(e => e.TrustAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Up2Ecosdate)
                .HasColumnType("datetime")
                .HasColumnName("Up2ECOSDate");
            entity.Property(e => e.W8benExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("W8BenExpiryDate");
            entity.Property(e => e.W8benInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("W8BenInd");
        });

        modelBuilder.Entity<ClntAcct20240220>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntAcct_20240220");

            entity.Property(e => e.AllowTrustWithdrawal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ApprvTrdgLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.AvailableLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntAcctType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntBankAcct).HasMaxLength(50);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCloseBy).HasMaxLength(16);
            entity.Property(e => e.ClntCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntDormantDate).HasColumnType("datetime");
            entity.Property(e => e.ClntInternalAcType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClntLastTrxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLastUpdatedBy).HasMaxLength(16);
            entity.Property(e => e.ClntLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLegalStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntMainType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntMrgnAcNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntOpenBy).HasMaxLength(16);
            entity.Property(e => e.ClntOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReassignDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntRemId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ClntRemID");
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntStat).HasMaxLength(1);
            entity.Property(e => e.ClntSuspendDate).HasColumnType("datetime");
            entity.Property(e => e.ClntSuspendRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ClntTrdgStat).HasMaxLength(1);
            entity.Property(e => e.ClntType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClredTabal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ClredTABal");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(17, 2)");
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.MultiCcyInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.On9ClntInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Otpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("OTPExpiration");
            entity.Property(e => e.OutboundInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RegOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RegOTPCode");
            entity.Property(e => e.RegOtpresendAtt).HasColumnName("RegOTPResendAtt");
            entity.Property(e => e.RegOtpvldtAtt).HasColumnName("RegOTPVldtAtt");
            entity.Property(e => e.ShrCheckRegDate).HasColumnType("datetime");
            entity.Property(e => e.TrustAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Up2Ecosdate)
                .HasColumnType("datetime")
                .HasColumnName("Up2ECOSDate");
            entity.Property(e => e.W8benExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("W8BenExpiryDate");
            entity.Property(e => e.W8benInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("W8BenInd");
        });

        modelBuilder.Entity<ClntAcct202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntAcct_20240621_1438");

            entity.Property(e => e.AllowTrustWithdrawal)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ApprvTrdgLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.AvailableLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntAcctType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ClntActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntBankAcct).HasMaxLength(50);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCloseBy).HasMaxLength(16);
            entity.Property(e => e.ClntCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntDormantDate).HasColumnType("datetime");
            entity.Property(e => e.ClntInternalAcType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClntLastTrxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLastUpdatedBy).HasMaxLength(16);
            entity.Property(e => e.ClntLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ClntLegalStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntMainType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntMrgnAcNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntOpenBy).HasMaxLength(16);
            entity.Property(e => e.ClntOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ClntReassignDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntRemId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("ClntRemID");
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntStat).HasMaxLength(1);
            entity.Property(e => e.ClntSuspendDate).HasColumnType("datetime");
            entity.Property(e => e.ClntSuspendRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ClntTrdgStat).HasMaxLength(1);
            entity.Property(e => e.ClntType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClredTabal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ClredTABal");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(17, 2)");
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.MultiCcyInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.On9ClntInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Otpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("OTPExpiration");
            entity.Property(e => e.OutboundInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RegOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RegOTPCode");
            entity.Property(e => e.RegOtpresendAtt).HasColumnName("RegOTPResendAtt");
            entity.Property(e => e.RegOtpvldtAtt).HasColumnName("RegOTPVldtAtt");
            entity.Property(e => e.ShrCheckRegDate).HasColumnType("datetime");
            entity.Property(e => e.TrustAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Up2Ecosdate)
                .HasColumnType("datetime")
                .HasColumnName("Up2ECOSDate");
            entity.Property(e => e.W8benExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("W8BenExpiryDate");
            entity.Property(e => e.W8benInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("W8BenInd");
        });

        modelBuilder.Entity<ClntAcctDeleted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntAcctDeleted");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClntAcctTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntAcct_Test");

            entity.Property(e => e.ClntCode).HasMaxLength(255);
            entity.Property(e => e.CoBrchCode).HasMaxLength(255);
            entity.Property(e => e.Gcif)
                .HasMaxLength(255)
                .HasColumnName("GCIF");
        });

        modelBuilder.Entity<ClntBankAccInfo>(entity =>
        {
            entity.HasKey(e => new { e.SCoBrchCode, e.SClntCode }).HasName("PK_ClntBankAccInfo_1");

            entity.ToTable("ClntBankAccInfo");

            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SClntCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("sClntCode");
            entity.Property(e => e.SClntBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sClntBankAccNo");
            entity.Property(e => e.SClntBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sClntBankBrch");
            entity.Property(e => e.SClntBankName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sClntBankName");
            entity.Property(e => e.SDefaultBankAcc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sDefaultBankAcc");
            entity.Property(e => e.SMca)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sMCA");
        });

        modelBuilder.Entity<ClntChgBrch>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.NewBrchCode });

            entity.ToTable("ClntChgBrch");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NewBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OldBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<ClntChgBrchLog>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.LogTime }).HasName("PK_ClntChgBrch_Log_LogTime_SequenceNo");

            entity.ToTable("ClntChgBrch_Log");

            entity.Property(e => e.SequenceNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClntChgBrchLogArchive>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.LogTime }).HasName("PK_ClntChgBrch_Log_Archive_LogTime_SequenceNo");

            entity.ToTable("ClntChgBrch_Log_Archive");

            entity.Property(e => e.LogTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClntCshWithdrawLimitHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntCshWithdrawLimitHistory");

            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Status).HasMaxLength(1);
            entity.Property(e => e.WithdrawalLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<ClntDefList>(entity =>
        {
            entity.HasKey(e => e.RefNo);

            entity.ToTable("ClntDefList");

            entity.Property(e => e.RefNo).ValueGeneratedNever();
            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNewIcno)
                .HasMaxLength(30)
                .HasColumnName("ClntNewICNo");
            entity.Property(e => e.ClntOldIcno)
                .HasMaxLength(30)
                .HasColumnName("ClntOldICNo");
            entity.Property(e => e.ClntPassportNo).HasMaxLength(30);
            entity.Property(e => e.DateDefaulted).HasColumnType("datetime");
            entity.Property(e => e.DateLifted).HasColumnType("datetime");
            entity.Property(e => e.MemCirNoDefaulted).HasMaxLength(10);
            entity.Property(e => e.MemCirNoLifted).HasMaxLength(10);
        });

        modelBuilder.Entity<ClntFslist>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.ToTable("ClntFSList");

            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.BrkCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DatePurchased).HasColumnType("datetime");
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OrderPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntInfoA>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntInfoA");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
        });

        modelBuilder.Entity<ClntInfoB>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntInfoB");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 2");
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
        });

        modelBuilder.Entity<ClntLimitDtl>(entity =>
        {
            entity.HasKey(e => new { e.RefNo, e.OrderDate, e.CoBrchCode, e.ClntCode, e.SequenceNo }).HasName("PK_ClntLimitDtl_1");

            entity.ToTable("ClntLimitDtl");

            entity.Property(e => e.RefNo).ValueGeneratedOnAdd();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AvailableBuyLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.AvailableSellLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ReinstatedBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ReinstatedSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntLimitDtlHistory>(entity =>
        {
            entity.HasKey(e => new { e.RefNo, e.OrderDate, e.CoBrchCode, e.ClntCode, e.SequenceNo }).HasName("PK_ClntLimitDtlHistory_1");

            entity.ToTable("ClntLimitDtlHistory");

            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AvailableBuyLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.AvailableSellLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ReinstatedBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ReinstatedSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntMaster>(entity =>
        {
            entity.HasKey(e => e.Gcif);

            entity.ToTable("ClntMaster");

            entity.Property(e => e.Gcif)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.Bumiputera).HasDefaultValue(false);
            entity.Property(e => e.ClntAddr)
                .HasMaxLength(250)
                .HasDefaultValue("");
            entity.Property(e => e.ClntDob)
                .HasColumnType("datetime")
                .HasColumnName("ClntDOB");
            entity.Property(e => e.ClntEmail).HasMaxLength(255);
            entity.Property(e => e.ClntFax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClntMobile)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ClntName)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.ClntNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClntNICNo");
            entity.Property(e => e.ClntOffice)
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.ClntOicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ClntOICNo");
            entity.Property(e => e.ClntPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .HasDefaultValue("");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Nationality).HasDefaultValue(0);
            entity.Property(e => e.Race)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ClntMaster202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntMaster_20240621_1438");

            entity.Property(e => e.ClntAddr).HasMaxLength(250);
            entity.Property(e => e.ClntDob)
                .HasColumnType("datetime")
                .HasColumnName("ClntDOB");
            entity.Property(e => e.ClntEmail).HasMaxLength(255);
            entity.Property(e => e.ClntFax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntMobile)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ClntNICNo");
            entity.Property(e => e.ClntOffice).HasMaxLength(50);
            entity.Property(e => e.ClntOicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ClntOICNo");
            entity.Property(e => e.ClntPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode).HasMaxLength(5);
            entity.Property(e => e.Gcif)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntMasterTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntMaster_Test");

            entity.Property(e => e.ClntNicno)
                .HasMaxLength(255)
                .HasColumnName("ClntNICNo");
            entity.Property(e => e.Gcif)
                .HasMaxLength(255)
                .HasColumnName("GCIF");
        });

        modelBuilder.Entity<ClntNotUpdatedDf10740>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntNotUpdated_DF10740");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(18)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<ClntOdrDate>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.ToTable("ClntOdrDate");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastTradingDateOff).HasColumnType("datetime");
            entity.Property(e => e.LastTradingDateOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClntSettFile>(entity =>
        {
            entity.HasKey(e => new { e.TrnxDate, e.TrnxNo, e.CoBrchCode, e.ClntCode, e.TrnxRefNo });

            entity.ToTable("ClntSettFile");

            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.TrnxNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BrkBrchCode).HasMaxLength(4);
            entity.Property(e => e.SettVal).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefDueDate).HasColumnType("datetime");
            entity.Property(e => e.TrnxRefPrc).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.TrnxRefType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefVal).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TrnxRmk)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntStatementFile>(entity =>
        {
            entity.HasKey(e => new { e.FileId, e.FileDate, e.FileType, e.CoBrchCode, e.ClntCode });

            entity.ToTable("ClntStatementFile");

            entity.Property(e => e.FileId)
                .HasMaxLength(20)
                .HasColumnName("FileID");
            entity.Property(e => e.FileDate).HasColumnType("datetime");
            entity.Property(e => e.FileType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("M - Monthly Statement; C - Contract Statement; R - Contra Statement;");
            entity.Property(e => e.CoBrchCode).HasMaxLength(50);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FileDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClntStkCtrl>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.CoBrchCode, e.XchgCode, e.StkCode, e.CtrlStatus });

            entity.ToTable("ClntStkCtrl");

            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.XchgCode).HasMaxLength(10);
            entity.Property(e => e.StkCode).HasMaxLength(20);
            entity.Property(e => e.CtrlStatus).HasMaxLength(1);
        });

        modelBuilder.Entity<ClntStkDtl>(entity =>
        {
            entity.HasKey(e => new { e.CstrxnDocType, e.ClntCode, e.StkCode, e.CstrxnDocNo }).HasFillFactor(90);

            entity.ToTable("ClntStkDtl");

            entity.Property(e => e.CstrxnDocType)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CSTrxnDocType");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CstrxnDocNo).HasColumnName("CSTrxnDocNo");
            entity.Property(e => e.CsrecDate)
                .HasColumnType("datetime")
                .HasColumnName("CSRecDate");
            entity.Property(e => e.CstrxnCretDate)
                .HasColumnType("datetime")
                .HasColumnName("CSTrxnCretDate");
            entity.Property(e => e.CstrxnDate)
                .HasColumnType("datetime")
                .HasColumnName("CSTrxnDate");
            entity.Property(e => e.CstrxnQty).HasColumnName("CSTrxnQty");
            entity.Property(e => e.CstrxnRecType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CSTrxnRecType");
            entity.Property(e => e.CstrxnRmk)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CSTrxnRmk");
            entity.Property(e => e.CstrxnStat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CSTrxnStat");
            entity.Property(e => e.CstrxnUsr)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("CSTrxnUsr");
            entity.Property(e => e.CsverifyBy)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("CSVerifyBy");
            entity.Property(e => e.CsverifyDate)
                .HasColumnType("datetime")
                .HasColumnName("CSVerifyDate");
        });

        modelBuilder.Entity<ClntStkSumm>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.StkCode });

            entity.ToTable("ClntStkSumm");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Cupqty)
                .HasDefaultValue(0L)
                .HasColumnName("CUPQty");
            entity.Property(e => e.Cusqty)
                .HasDefaultValue(0L)
                .HasColumnName("CUSQty");
            entity.Property(e => e.Dsqty)
                .HasDefaultValue(0L)
                .HasColumnName("DSQty");
            entity.Property(e => e.Dupqty)
                .HasDefaultValue(0L)
                .HasColumnName("DUPQty");
            entity.Property(e => e.FreePurchasedQty).HasDefaultValue(0L);
            entity.Property(e => e.StkAbp)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("StkABP");
            entity.Property(e => e.StkAbpti)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("StkABPTI");
            entity.Property(e => e.StkCapLv)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkCapPrc).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.StkPldgPendQty).HasDefaultValue(0L);
            entity.Property(e => e.StkPldgQty).HasDefaultValue(0L);
            entity.Property(e => e.StkThirdQty).HasDefaultValue(0L);
        });

        modelBuilder.Entity<ClntTrustAcTrnx>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.TransactionDate });

            entity.ToTable("ClntTrustAcTrnx");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.Particulars)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransactionAmount).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<ClntXchg>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.XchgCode, e.Type }).HasName("PK_ClntXchg");

            entity.ToTable("ClntXChg");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepth)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ClntXchg202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClntXchg_20240621_1438");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepth)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClrAcct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ClrAcct");

            entity.Property(e => e.BookCdsClient)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BOOK CDS CLIENT");
            entity.Property(e => e.BookInOut)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BOOK IN OUT");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRANCH CODE");
            entity.Property(e => e.CdsNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDS NO");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENT CODE");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENT NAME");
            entity.Property(e => e.CreditLimit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CREDIT LIMIT");
            entity.Property(e => e.TraderCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TRADER CODE");
        });

        modelBuilder.Entity<ColumnName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ColumnName");

            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ComMngtMoveWltest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ComMngtMoveWLTest");

            entity.Property(e => e.ProjCd).HasMaxLength(20);
        });

        modelBuilder.Entity<ComMngtTokenTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ComMngtTokenTEST");

            entity.Property(e => e.AcctCd)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDt).HasColumnType("datetime");
            entity.Property(e => e.Nric)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRIC");
            entity.Property(e => e.ProjCd)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompanyCodeMaintenance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CompanyCodeMaintenance");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DatabaseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dbdescription)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DBDescription");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ConditionInfo>(entity =>
        {
            entity.HasKey(e => new { e.OrderSeqNo, e.ConditionId }).IsClustered(false);

            entity.ToTable("ConditionInfo");

            entity.Property(e => e.ConditionValue)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConfirmClOrdId>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.ClOrdId, e.OrderType, e.XchgCode });

            entity.ToTable("ConfirmClOrdId");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ConfirmClOrdId20220325>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ConfirmClOrdId_20220325");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConfirmExTrsno>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.Trsno, e.OrderType }).HasFillFactor(90);

            entity.ToTable("ConfirmExTRSNo");

            entity.Property(e => e.Trsno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraDetail>(entity =>
        {
            entity.HasKey(e => new { e.ContraNo, e.BranchCode, e.ClientCode, e.ContractDate, e.ContractNo });

            entity.ToTable("ContraDetail");

            entity.Property(e => e.ContraNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ContractDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ContractType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.NetContraAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.NetContractAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraGain>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContraNo, e.CoBrchCode }).HasName("PK_ContraGains_1");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContraNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContraQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.SettleAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraGainsHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContraNo, e.CoBrchCode, e.LastUpdateDate }).HasName("PK_ContraGains_History");

            entity.ToTable("ContraGainsHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContraNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ContraDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContraQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.SettleAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraLoss>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ContraDate).HasColumnType("datetime");
            entity.Property(e => e.ContraNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ContraQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.InterestAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraLossesHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ContraLossesHistory");

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ContraDate).HasColumnType("datetime");
            entity.Property(e => e.ContraNo)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.ContraQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.InterestAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraLossesHistoryArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ContraLossesHistory_Archive");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContraAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ContraDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContraNo)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.ContraQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.InterestAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContraSetOff>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.BranchCode, e.TransNo, e.TransDate }).HasName("PK_ContraSetOff_1");

            entity.ToTable("ContraSetOff");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.TransNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[TransDate],getdate()))", false);
            entity.Property(e => e.TransAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TransDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ContraSummary>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.ContraNo, e.ContraDate })
                .HasName("PK_CotrSumm")
                .HasFillFactor(90);

            entity.ToTable("ContraSummary");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ContraNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContraDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[contradate],getdate()))", false);
            entity.Property(e => e.ContraAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ContraDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.ContraSettlePending).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ContraSettleValue).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ContraType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("RM");
            entity.Property(e => e.InterestAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ServiceCharge).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.TotalPurchase).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TotalSold).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ContractSummary>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.ContractDate, e.ContractNo })
                .HasName("PK_ContSumm")
                .HasFillFactor(90);

            entity.ToTable("ContractSummary");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[contractdate],getdate()))", false);
            entity.Property(e => e.Brokerage)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.ClearingFee)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.ContractDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractSettleAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.ContractType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("RM");
            entity.Property(e => e.GrossAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(30, 2)");
            entity.Property(e => e.OriContractNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Price)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 8)");
            entity.Property(e => e.Rate)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 8)");
            entity.Property(e => e.ServiceCharge)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.StampDuty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.StockSname)
                .HasMaxLength(20)
                .HasDefaultValue("")
                .HasColumnName("StockSName");
            entity.Property(e => e.Value)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ContractSummaryDel>(entity =>
        {
            entity.HasKey(e => new { e.TrxnDate, e.BranchCode, e.ClientCode, e.ContractNo, e.ContractDate });

            entity.ToTable("ContractSummaryDel");

            entity.Property(e => e.TrxnDate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[contractdate],getdate()))", false);
            entity.Property(e => e.Brokerage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ContractDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractSettleAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ContractType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("RM");
            entity.Property(e => e.GrossAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.Rate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ServiceCharge).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Value).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<CountryList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CountryList");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CountryName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CpreconFlag>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CPReconFlag");

            entity.Property(e => e.CpFlag).HasColumnName("CP_Flag");
            entity.Property(e => e.CpOffTime)
                .HasColumnType("datetime")
                .HasColumnName("CP_off_time");
            entity.Property(e => e.CpOnTime)
                .HasColumnType("datetime")
                .HasColumnName("CP_on_time");
            entity.Property(e => e.ReconDoneFlag).HasColumnName("ReconDone_Flag");
            entity.Property(e => e.ReconDoneOffTime)
                .HasColumnType("datetime")
                .HasColumnName("ReconDone_off_time");
            entity.Property(e => e.ReconDoneOnTime)
                .HasColumnType("datetime")
                .HasColumnName("ReconDone_on_time");
        });

        modelBuilder.Entity<Csprofile>(entity =>
        {
            entity.HasKey(e => e.ClntCode).HasName("PK_CSProfile_1");

            entity.ToTable("CSProfile");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.AnnualIncome)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfflineBrkRateCode)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.OnlineBrkRateCode)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TotalCdsshareHldg).HasColumnName("TotalCDSShareHldg");
            entity.Property(e => e.TotalGrossTrds).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalOfflineBrk).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalOnlineBrk).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalTrustAcc).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<DailyBizDone>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.CoBrchCode, e.ContDocNo, e.ContTrxDate, e.CancelRepInd });

            entity.ToTable("DailyBizDone");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContDocNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContTrxDate).HasColumnType("datetime");
            entity.Property(e => e.CancelRepInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AmtBeforeGst)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AmtBeforeGST");
            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DocType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ExchRate).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Exchange)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.FconVal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FConVal");
            entity.Property(e => e.Fprice)
                .HasColumnType("decimal(13, 6)")
                .HasColumnName("FPrice");
            entity.Property(e => e.FstkName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FStkName");
            entity.Property(e => e.GrossAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Gstsupplies)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GSTSupplies");
            entity.Property(e => e.NetAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OthersAmt).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(13, 6)");
            entity.Property(e => e.PurchaseSell)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DayEndCalcAvgPrice>(entity =>
        {
            entity.HasKey(e => e.Oid);

            entity.ToTable("DayEndCalcAvgPrice");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.CalcDateFrom).HasColumnType("datetime");
            entity.Property(e => e.CalcDateTo).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DbgenFileCount>(entity =>
        {
            entity.HasKey(e => e.Item);

            entity.ToTable("DBGenFileCount");

            entity.Property(e => e.Item)
                .HasMaxLength(125)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.ProcessDate)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DbreplicationEmailLastSendDateTime>(entity =>
        {
            entity.HasKey(e => e.LastSendDateTime);

            entity.ToTable("DBReplicationEmailLastSendDateTime");

            entity.Property(e => e.LastSendDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DbreplicationLastUpdateDateTime>(entity =>
        {
            entity.HasKey(e => e.LastUpdateDateTime);

            entity.ToTable("DBReplicationLastUpdateDateTime");

            entity.Property(e => e.LastUpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Dbtdeclaration>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.Tcsref }).HasName("PK_DBTDeclaration_1");

            entity.ToTable("DBTDeclaration");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.Tcsref)
                .HasMaxLength(16)
                .HasColumnName("TCSRef");
            entity.Property(e => e.CounterMembCode).HasMaxLength(8);
            entity.Property(e => e.CounterPrincCode).HasMaxLength(8);
            entity.Property(e => e.CounterTraderId)
                .HasMaxLength(8)
                .HasColumnName("CounterTraderID");
            entity.Property(e => e.DeclareTime).HasColumnType("datetime");
            entity.Property(e => e.EndVwap).HasColumnName("EndVWAP");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembCode).HasMaxLength(8);
            entity.Property(e => e.MemberRef).HasMaxLength(16);
            entity.Property(e => e.OperationInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrevInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrincipalCode).HasMaxLength(8);
            entity.Property(e => e.StartVwap).HasColumnName("StartVWAP");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TraderId)
                .HasMaxLength(8)
                .HasColumnName("TraderID");
        });

        modelBuilder.Entity<DbtdeclarationHistory>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.Tcsref });

            entity.ToTable("DBTDeclarationHistory");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.Tcsref)
                .HasMaxLength(16)
                .HasColumnName("TCSRef");
            entity.Property(e => e.CounterMembCode).HasMaxLength(8);
            entity.Property(e => e.CounterPrincCode).HasMaxLength(8);
            entity.Property(e => e.CounterTraderId)
                .HasMaxLength(8)
                .HasColumnName("CounterTraderID");
            entity.Property(e => e.DeclareTime).HasColumnType("datetime");
            entity.Property(e => e.EndVwap).HasColumnName("EndVWAP");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembCode).HasMaxLength(8);
            entity.Property(e => e.MemberRef).HasMaxLength(16);
            entity.Property(e => e.OperationInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PrevInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrincipalCode).HasMaxLength(8);
            entity.Property(e => e.StartVwap).HasColumnName("StartVWAP");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TraderId)
                .HasMaxLength(8)
                .HasColumnName("TraderID");
        });

        modelBuilder.Entity<Dbtqueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DBTQueue");

            entity.Property(e => e.Dbtflag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DBTFlag");
            entity.Property(e => e.DbtseqNo).HasColumnName("DBTSeqNo");
            entity.Property(e => e.MemberRef).HasMaxLength(16);
            entity.Property(e => e.PlaceDbttime)
                .HasColumnType("datetime")
                .HasColumnName("PlaceDBTTime");
            entity.Property(e => e.Tcsref)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TCSRef");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dbtstatus>(entity =>
        {
            entity.HasKey(e => new { e.MemberRef, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("DBTStatus");

            entity.Property(e => e.MemberRef).HasMaxLength(16);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DbtstatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.MemberRef, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("DBTStatusHistory");

            entity.Property(e => e.MemberRef).HasMaxLength(16);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DebugCr11127>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DebugCR11127");

            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Delisted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("delisted");

            entity.Property(e => e.DelistedDate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DELISTED DATE");
            entity.Property(e => e.KlseNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KLSE NO");
            entity.Property(e => e.Sec)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SEC");
            entity.Property(e => e.SecurityName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SECURITY NAME");
        });

        modelBuilder.Entity<Delisted2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("delisted2");

            entity.Property(e => e.Stkcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stkcode");
            entity.Property(e => e.Stklname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stklname");
            entity.Property(e => e.Stksname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stksname");
        });

        modelBuilder.Entity<DelistedStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DelistedStock");

            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Column 3");
            entity.Property(e => e.SecurityName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Security Name");
            entity.Property(e => e.ShortName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ShortName ");
            entity.Property(e => e.Stkcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("stkcode");
        });

        modelBuilder.Entity<DmaorderAssignment>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.ClntCode, e.CoBrchCode });

            entity.ToTable("DMAOrderAssignment");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DisabledDma).HasColumnName("DisabledDMA");
        });

        modelBuilder.Entity<DocType>(entity =>
        {
            entity.HasKey(e => e.DocType1).HasName("PK_MstDocType_1");

            entity.ToTable("DocType");

            entity.Property(e => e.DocType1)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("DocType");
            entity.Property(e => e.DocDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DummyEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DUMMY_EMAIL");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(255)
                .HasColumnName("Client_code");
            entity.Property(e => e.Email).HasMaxLength(255);
        });

        modelBuilder.Entity<DummyTable0>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DUMMY_TABLE_0");

            entity.Property(e => e.ClntCode).HasMaxLength(255);
            entity.Property(e => e.CoBrchCode).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
        });

        modelBuilder.Entity<EDocument>(entity =>
        {
            entity.HasKey(e => new { e.DocId, e.ProcDate }).HasFillFactor(90);

            entity.ToTable("eDocument");

            entity.Property(e => e.DocId).HasColumnName("DocID");
            entity.Property(e => e.ProcDate).HasColumnType("datetime");
            entity.Property(e => e.BrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DocTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DocType)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EcmEfForceSelling>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EcmEfForceSelling");

            entity.Property(e => e.AutoCtr)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("auto_ctr");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.DfFlag)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("df_flag");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.NetCtr)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("net_ctr");
            entity.Property(e => e.OsTrust)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("os_trust");
            entity.Property(e => e.OstAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstDay)
                .HasColumnType("decimal(5, 0)")
                .HasColumnName("ost_day");
            entity.Property(e => e.OstQty)
                .HasColumnType("decimal(9, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(11, 6)")
                .HasColumnName("price");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SoldItem)
                .HasColumnType("decimal(9, 0)")
                .HasColumnName("sold_item");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SuspendDate)
                .HasColumnType("datetime")
                .HasColumnName("suspend_date");
            entity.Property(e => e.Suspended)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("suspended");
            entity.Property(e => e.TranDate)
                .HasColumnType("datetime")
                .HasColumnName("tran_date");
        });

        modelBuilder.Entity<EcmEfMrgnCall>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EcmEfMrgnCall");

            entity.Property(e => e.AdjBal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("adj_bal");
            entity.Property(e => e.Amount1)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("amount_1");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConcentratedAvailableLimit)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("concentrated_available_limit");
            entity.Property(e => e.ConcentratedCurMargin)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("concentrated_cur_margin");
            entity.Property(e => e.ConcentratedShares)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("concentrated_shares");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.EquityAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("equity_amt");
            entity.Property(e => e.MarginCallPercent)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("margin_call_percent");
            entity.Property(e => e.MarginLimit)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("margin_limit");
            entity.Property(e => e.RectifyDate)
                .HasColumnType("datetime")
                .HasColumnName("rectify_date");
            entity.Property(e => e.ReportingDate)
                .HasColumnType("datetime")
                .HasColumnName("reporting_date");
            entity.Property(e => e.ReqValue)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("req_value");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.Shortfall)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("shortfall");
            entity.Property(e => e.TdrCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("tdr_code");
        });

        modelBuilder.Entity<EcmTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ecmTemp");

            entity.Property(e => e.AccrInt)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("accr_int");
            entity.Property(e => e.ApplyTo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("apply_to");
            entity.Property(e => e.BankCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bank_code");
            entity.Property(e => e.BankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bank_ref_no");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConDate)
                .HasColumnType("datetime")
                .HasColumnName("con_date");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.ConRef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("con_ref");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.EfRefNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ef_ref_no");
            entity.Property(e => e.NoOfRec)
                .HasColumnType("numeric(12, 0)")
                .HasColumnName("no_of_rec");
            entity.Property(e => e.OstAmt)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstQty)
                .HasColumnType("numeric(12, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.PayBank)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("pay_bank");
            entity.Property(e => e.PayTrust)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("pay_trust");
            entity.Property(e => e.Price)
                .HasColumnType("numeric(13, 6)")
                .HasColumnName("price");
            entity.Property(e => e.RecMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rec_mode");
            entity.Property(e => e.RecStatus)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("rec_status");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SysTime)
                .HasColumnType("datetime")
                .HasColumnName("sys_time");
            entity.Property(e => e.TotalBank)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("total_bank");
            entity.Property(e => e.TotalTrust)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("total_trust");
            entity.Property(e => e.TranAmt)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("tran_amt");
            entity.Property(e => e.TranQty)
                .HasColumnType("numeric(12, 0)")
                .HasColumnName("tran_qty");
            entity.Property(e => e.TranType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tran_type");
            entity.Property(e => e.TrustBal)
                .HasColumnType("numeric(12, 2)")
                .HasColumnName("trust_bal");
        });

        modelBuilder.Entity<EcmmoneyProcessedRefNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ECMMoneyProcessedRefNo");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
        });

        modelBuilder.Entity<Ecmuser>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("ECMUser");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EcosUsrIdexist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EcosUsrIDExist");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EcosUsrType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EcosUsrType");
        });

        modelBuilder.Entity<Edsvariable>(entity =>
        {
            entity.HasKey(e => e.VariableName).IsClustered(false);

            entity.ToTable("EDSVariables");

            entity.Property(e => e.VariableName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Content)
                .HasMaxLength(40)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Efcptemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EFCPTemp");

            entity.Property(e => e.AccrInt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("accr_int");
            entity.Property(e => e.ApplyTo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("apply_to");
            entity.Property(e => e.BankCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bank_code");
            entity.Property(e => e.BankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bank_ref_no");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConDate)
                .HasColumnType("datetime")
                .HasColumnName("con_date");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.ConRef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("con_ref");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.EfRefNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ef_ref_no");
            entity.Property(e => e.NoOfRec)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("no_of_rec");
            entity.Property(e => e.OstAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.PayBank)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_bank");
            entity.Property(e => e.PayTrust)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_trust");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("price");
            entity.Property(e => e.RecMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rec_mode");
            entity.Property(e => e.RecStatus)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("rec_status");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SysTime)
                .HasColumnType("datetime")
                .HasColumnName("sys_time");
            entity.Property(e => e.TotalBank)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_bank");
            entity.Property(e => e.TotalTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_trust");
            entity.Property(e => e.TranAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("tran_amt");
            entity.Property(e => e.TranQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("tran_qty");
            entity.Property(e => e.TranType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tran_type");
            entity.Property(e => e.TrustBal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("trust_bal");
        });

        modelBuilder.Entity<Eftestclientlist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("eftestclientlist");

            entity.Property(e => e.BranchId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsAssociated)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifyOrder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OriginateUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OriginateUserID");
            entity.Property(e => e.PlaceOrder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ViewClient)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ViewOrder)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ViewableBranch)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmlBetask>(entity =>
        {
            entity.HasKey(e => new { e.TaskDate, e.TaskCat, e.TaskId, e.EmlId });

            entity.ToTable("EmlBETask");

            entity.Property(e => e.TaskDate).HasColumnType("datetime");
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.EmlId).HasColumnName("EmlID");
            entity.Property(e => e.LastSent).HasColumnType("datetime");
            entity.Property(e => e.ReceiverAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiverCcaddr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ReceiverCCAddr");
        });

        modelBuilder.Entity<EmlInfo>(entity =>
        {
            entity.HasKey(e => e.EmlId);

            entity.ToTable("EmlInfo");

            entity.Property(e => e.EmlId)
                .ValueGeneratedNever()
                .HasColumnName("EmlID");
            entity.Property(e => e.EmlBody).HasMaxLength(4000);
            entity.Property(e => e.EmlDesc).HasMaxLength(50);
            entity.Property(e => e.EmlSubject).HasMaxLength(50);
        });

        modelBuilder.Entity<EmlInfo202405131529>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmlInfo_20240513_1529");

            entity.Property(e => e.EmlBody).HasMaxLength(4000);
            entity.Property(e => e.EmlDesc).HasMaxLength(50);
            entity.Property(e => e.EmlId).HasColumnName("EmlID");
            entity.Property(e => e.EmlSubject).HasMaxLength(50);
        });

        modelBuilder.Entity<EmlLegend>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmlLegend");

            entity.Property(e => e.EmlId).HasColumnName("EmlID");
            entity.Property(e => e.EmlLegendAbbrv).HasMaxLength(30);
            entity.Property(e => e.EmlLegendDesc).HasMaxLength(30);
            entity.Property(e => e.EmlLegendId).HasColumnName("EmlLegendID");
        });

        modelBuilder.Entity<EmlNoti>(entity =>
        {
            entity.HasKey(e => e.EmlId);

            entity.ToTable("EmlNoti");

            entity.Property(e => e.EmlId)
                .ValueGeneratedNever()
                .HasColumnName("EmlID");
            entity.Property(e => e.BccemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BCCEmailAddr");
            entity.Property(e => e.CcemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CCEmailAddr");
            entity.Property(e => e.EmlDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmlSubject)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FromEmlAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ToEmlAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmlNoti202201281900>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmlNoti_20220128_1900");

            entity.Property(e => e.BccemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BCCEmailAddr");
            entity.Property(e => e.CcemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CCEmailAddr");
            entity.Property(e => e.EmlDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmlId).HasColumnName("EmlID");
            entity.Property(e => e.EmlSubject)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FromEmlAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmlNoti202405131421>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmlNoti_20240513_1421");

            entity.Property(e => e.BccemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BCCEmailAddr");
            entity.Property(e => e.CcemailAddr)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CCEmailAddr");
            entity.Property(e => e.EmlDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmlId).HasColumnName("EmlID");
            entity.Property(e => e.EmlSubject)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FromEmlAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmptyStkName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmptyStkName");

            entity.Property(e => e.Stkcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("stkcode");
            entity.Property(e => e.Stklname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("stklname");
            entity.Property(e => e.Stksname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("stksname");
        });

        modelBuilder.Entity<EmptyStkName2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmptyStkName2");

            entity.Property(e => e.Stkcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("stkcode");
            entity.Property(e => e.Stklname)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StksName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StksName ");
        });

        modelBuilder.Entity<EnqConcerrentUser>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.BranchCode });

            entity.ToTable("EnqConcerrentUser");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Btx).HasColumnName("BTX");
            entity.Property(e => e.Btxmobility).HasColumnName("BTXMobility");
            entity.Property(e => e.Ecosclient).HasColumnName("ECOSClient");
            entity.Property(e => e.Ecosguest).HasColumnName("ECOSGuest");
        });

        modelBuilder.Entity<EnqMatchedTrade>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.BranchCode });

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Btx).HasColumnName("BTX");
            entity.Property(e => e.Btxmobility).HasColumnName("BTXMobility");
        });

        modelBuilder.Entity<EnqOrderInQueue>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Date, e.BranchCode, e.RemisierId });

            entity.ToTable("EnqOrderInQueue");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.NormalOrderGtd).HasColumnName("NormalOrderGTD");
            entity.Property(e => e.OddLotOrderGtd).HasColumnName("OddLotOrderGTD");
        });

        modelBuilder.Entity<EnqSubmittedOrder>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.BranchCode });

            entity.ToTable("EnqSubmittedOrder");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Btx).HasColumnName("BTX");
            entity.Property(e => e.Btxmobility).HasColumnName("BTXMobility");
        });

        modelBuilder.Entity<EnqUsrActvn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EnqUsrActvn");

            entity.Property(e => e.ActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ActvnEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EnqUsrActvnHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EnqUsrActvn_Hist");

            entity.Property(e => e.ActvnDate).HasColumnType("datetime");
            entity.Property(e => e.ActvnEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EodclntOnInd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EODClntOnInd");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OnlineInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProcessDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EodonlineTradeDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EODOnlineTradeDtl");

            entity.Property(e => e.AcctCode).HasMaxLength(4000);
            entity.Property(e => e.Amount).HasMaxLength(50);
            entity.Property(e => e.ClntCode).HasMaxLength(50);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency).HasMaxLength(50);
            entity.Property(e => e.OrdSrc).HasMaxLength(50);
            entity.Property(e => e.Price).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasMaxLength(50);
            entity.Property(e => e.SequenceNo).HasMaxLength(50);
            entity.Property(e => e.StkCode).HasMaxLength(50);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .HasColumnName("StkSName");
            entity.Property(e => e.Time).HasMaxLength(50);
            entity.Property(e => e.TransType).HasMaxLength(50);
            entity.Property(e => e.XchgName).HasMaxLength(50);
        });

        modelBuilder.Entity<EodtradeDone>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EODTradeDone");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpDuitNowInitPymtMsgDtl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.InitPymtDt, e.PymtRefNo, e.MsgId, e.TrxId, e.EndToEndId });

            entity.ToTable("EP_DuitNowInitPymtMsgDtl");

            entity.Property(e => e.InitPymtDt).HasColumnType("datetime");
            entity.Property(e => e.PymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MsgId)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.TrxId)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.EndToEndId)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.BankId)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClientId)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(140)
                .IsUnicode(false);
            entity.Property(e => e.MerchantName)
                .HasMaxLength(140)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDescription)
                .HasMaxLength(140)
                .IsUnicode(false);
            entity.Property(e => e.ProductId)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.RecipientReference)
                .HasMaxLength(140)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfFunds)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpFpxdbCrAuthCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_FPXDbCrAuthCode");

            entity.Property(e => e.SAuthCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sAuthCode");
            entity.Property(e => e.SAuthDesc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sAuthDesc");
        });

        modelBuilder.Entity<EpFpxdepBk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_FPXDepBk");

            entity.Property(e => e.BkCd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BkDesc)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TestInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EpFpxmsgDtl>(entity =>
        {
            entity.HasKey(e => e.ISeqNo);

            entity.ToTable("EP_FPXMsgDtl");

            entity.Property(e => e.ISeqNo)
                .ValueGeneratedNever()
                .HasColumnName("iSeqNo");
            entity.Property(e => e.DFpxTxnAmount)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("dFPX_TxnAmount");
            entity.Property(e => e.DtFpxFpxtxnTime)
                .HasColumnType("datetime")
                .HasColumnName("dtFPX_FPXTxnTime");
            entity.Property(e => e.DtFpxSellerTxnTime)
                .HasColumnType("datetime")
                .HasColumnName("dtFPX_SellerTxnTime");
            entity.Property(e => e.DtRecDate)
                .HasColumnType("datetime")
                .HasColumnName("dtRecDate");
            entity.Property(e => e.SFpxAcmsgType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Direct - Direct AC Message  \r\nIndirect - Indirect AC Message\r\n")
                .HasColumnName("sFPX_ACMsgType");
            entity.Property(e => e.SFpxBuyerAccNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerAccNo");
            entity.Property(e => e.SFpxBuyerBankBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerBankBranch");
            entity.Property(e => e.SFpxBuyerBankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerBankId");
            entity.Property(e => e.SFpxBuyerEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerEmail");
            entity.Property(e => e.SFpxBuyerIban)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerIban");
            entity.Property(e => e.SFpxBuyerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerId");
            entity.Property(e => e.SFpxBuyerName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sFPX_BuyerName");
            entity.Property(e => e.SFpxCheckSum)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("sFPX_CheckSum");
            entity.Property(e => e.SFpxCreditAuthCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sFPX_CreditAuthCode");
            entity.Property(e => e.SFpxCreditAuthNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_CreditAuthNo");
            entity.Property(e => e.SFpxDebitAuthCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sFPX_DebitAuthCode");
            entity.Property(e => e.SFpxDebitAuthNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_DebitAuthNo");
            entity.Property(e => e.SFpxFpxtxnId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sFPX_FPXTxnId");
            entity.Property(e => e.SFpxMakerName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sFPX_MakerName");
            entity.Property(e => e.SFpxMsgToken)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sFPX_MsgToken");
            entity.Property(e => e.SFpxMsgType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sFPX_MsgType");
            entity.Property(e => e.SFpxProductDesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sFPX_ProductDesc");
            entity.Property(e => e.SFpxSellerBankCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sFPX_SellerBankCode");
            entity.Property(e => e.SFpxSellerExId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_SellerExId");
            entity.Property(e => e.SFpxSellerExOrderNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sFPX_SellerExOrderNo");
            entity.Property(e => e.SFpxSellerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sFPX_SellerId");
            entity.Property(e => e.SFpxSellerOrderNo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sFPX_SellerOrderNo");
            entity.Property(e => e.SFpxTxnCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sFPX_TxnCurrency");
            entity.Property(e => e.SFpxVersion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sFPX_Version");
        });

        modelBuilder.Entity<EpPaymentContract>(entity =>
        {
            entity.HasKey(e => new { e.PaymentRefNo, e.ContractNo });

            entity.ToTable("EP_PaymentContract");

            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bosremark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BOSRemark");
            entity.Property(e => e.BossystemDateTime)
                .HasColumnType("datetime")
                .HasColumnName("BOSSystemDateTime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConvertToMyr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ConvertToMYR");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DepositType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PayAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("F -  Full Payment   \r\nP - Partial Payment  \r\n");
            entity.Property(e => e.PayInterest)
                .HasComment("This column is for Payable Contract Module to calculate remaining OSInterest to be paid. Applicable to Purchase Contract & Contra.")
                .HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PayOsamt)
                .HasComment("This column is for Payable Contract Module to calculate remaining OSAmount to be paid. Applicable to Purchase Contract & Contra.")
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PayOSAmt");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Withdraw: TT  \r\nDeposit: ATM, BC - Bank Counter\r\n");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProofOfPymt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettlementStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("E - Earmark   R - Release Earmark");
            entity.Property(e => e.TransType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrustAmtEarmarkFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("E - Earmark     R - Release Earmark");
            entity.Property(e => e.UpdateBosflag)
                .IsRequired()
                .HasDefaultValueSql("('0')")
                .HasColumnName("UpdateBOSFlag");
            entity.Property(e => e.WdrwlK2flag)
                .HasDefaultValue(false)
                .HasColumnName("WdrwlK2Flag");
            entity.Property(e => e.WdrwlK2numOfRetry)
                .HasDefaultValue(0)
                .HasColumnName("WdrwlK2NumOfRetry");
        });

        modelBuilder.Entity<EpPaymentContract202403011751>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentContract_20240301_1751");

            entity.Property(e => e.Bosremark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BOSRemark");
            entity.Property(e => e.BossystemDateTime)
                .HasColumnType("datetime")
                .HasColumnName("BOSSystemDateTime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConvertToMyr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ConvertToMYR");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DepositType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PayAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PayInterest).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PayOsamt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PayOSAmt");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProofOfPymt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettlementStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrustAmtEarmarkFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UpdateBosflag).HasColumnName("UpdateBOSFlag");
            entity.Property(e => e.WdrwlK2flag).HasColumnName("WdrwlK2Flag");
            entity.Property(e => e.WdrwlK2numOfRetry).HasColumnName("WdrwlK2NumOfRetry");
        });

        modelBuilder.Entity<EpPaymentContract202406141409>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentContract_20240614_1409");

            entity.Property(e => e.Bosremark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BOSRemark");
            entity.Property(e => e.BossystemDateTime)
                .HasColumnType("datetime")
                .HasColumnName("BOSSystemDateTime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConvertToMyr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ConvertToMYR");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DepositType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PayAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PayInterest).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PayOsamt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PayOSAmt");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProofOfPymt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettlementStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrustAmtEarmarkFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UpdateBosflag).HasColumnName("UpdateBOSFlag");
            entity.Property(e => e.WdrwlK2flag).HasColumnName("WdrwlK2Flag");
            entity.Property(e => e.WdrwlK2numOfRetry).HasColumnName("WdrwlK2NumOfRetry");
        });

        modelBuilder.Entity<EpPaymentRefNo>(entity =>
        {
            entity.HasKey(e => e.PaymentRefNo).HasName("PK_EP_PaymentRefNo_1");

            entity.ToTable("EP_PaymentRefNo");

            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BankID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpPaymentRefNo202303161221>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentRefNo_20230316_1221");

            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpPaymentRefNo202402090950>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentRefNo_20240209_0950");

            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpPaymentRefNo202403011751>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentRefNo_20240301_1751");

            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<EpPaymentStatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.DtCreateDate, e.SPaymentRefNo, e.SContractNo, e.Id });

            entity.ToTable("EP_PaymentStatusHistory");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemarks");
            entity.Property(e => e.STrxnStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatus");
            entity.Property(e => e.STrxnStatusSrc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatusSrc");
        });

        modelBuilder.Entity<EpPaymentStatusHistory202403011751>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentStatusHistory_20240301_1751");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemarks");
            entity.Property(e => e.STrxnStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatus");
            entity.Property(e => e.STrxnStatusSrc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatusSrc");
        });

        modelBuilder.Entity<EpPaymentStatusHistory202406141415>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentStatusHistory_20240614_1415");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemarks");
            entity.Property(e => e.STrxnStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatus");
            entity.Property(e => e.STrxnStatusSrc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatusSrc");
        });

        modelBuilder.Entity<EpPaymentStatusHistory202406141417>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EP_PaymentStatusHistory_20240614_1417");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SRemarks)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemarks");
            entity.Property(e => e.STrxnStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatus");
            entity.Property(e => e.STrxnStatusSrc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sTrxnStatusSrc");
        });

        modelBuilder.Entity<EpPaymentcontract20180906>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ep_paymentcontract_20180906");

            entity.Property(e => e.Bosremark)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BOSRemark");
            entity.Property(e => e.BossystemDateTime)
                .HasColumnType("datetime")
                .HasColumnName("BOSSystemDateTime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConvertToMyr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ConvertToMYR");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DepositType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PayAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PayInterest).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PayOsamt)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PayOSAmt");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettlementStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrustAmtEarmarkFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UpdateBosflag).HasColumnName("UpdateBOSFlag");
        });

        modelBuilder.Entity<EpPaymentrefno20180906>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ep_paymentrefno_20180906");

            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankAccNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<ErrAcctList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ErrAcctList");

            entity.Property(e => e.BrchCode).HasMaxLength(10);
            entity.Property(e => e.ClntCode).HasMaxLength(20);
            entity.Property(e => e.PrntBrchCode).HasMaxLength(10);
        });

        modelBuilder.Entity<ExcelForceEcmShareLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExcelForceEcmShareLog");

            entity.Property(e => e.AccrInt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("accr_int");
            entity.Property(e => e.ActualContNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ApplyTo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("apply_to");
            entity.Property(e => e.BankCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bank_code");
            entity.Property(e => e.BankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bank_ref_no");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConDate)
                .HasColumnType("datetime")
                .HasColumnName("con_date");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.ConRef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("con_ref");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.EfRefNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ef_ref_no");
            entity.Property(e => e.NoOfRec)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("no_of_rec");
            entity.Property(e => e.OstAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.PayBank)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_bank");
            entity.Property(e => e.PayTrust)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_trust");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("price");
            entity.Property(e => e.RecMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rec_mode");
            entity.Property(e => e.RecStatus)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("rec_status");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.SEfstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sEFStatus");
            entity.Property(e => e.SRecDirection)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sRecDirection");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SysTime)
                .HasColumnType("datetime")
                .HasColumnName("sys_time");
            entity.Property(e => e.TotalBank)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_bank");
            entity.Property(e => e.TotalTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_trust");
            entity.Property(e => e.TranAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("tran_amt");
            entity.Property(e => e.TranQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("tran_qty");
            entity.Property(e => e.TranType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tran_type");
            entity.Property(e => e.TrustBal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("trust_bal");
        });

        modelBuilder.Entity<ExcelForceEcmShareLogTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExcelForceEcmShareLogTemp");

            entity.Property(e => e.AccrInt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("accr_int");
            entity.Property(e => e.ActualContNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ApplyTo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("apply_to");
            entity.Property(e => e.BankCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bank_code");
            entity.Property(e => e.BankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bank_ref_no");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConDate)
                .HasColumnType("datetime")
                .HasColumnName("con_date");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.ConRef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("con_ref");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.EfRefNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ef_ref_no");
            entity.Property(e => e.FailCount).HasDefaultValue((byte)0);
            entity.Property(e => e.NoOfRec)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("no_of_rec");
            entity.Property(e => e.OstAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.PayBank)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_bank");
            entity.Property(e => e.PayTrust)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_trust");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("price");
            entity.Property(e => e.RecMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rec_mode");
            entity.Property(e => e.RecStatus)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("rec_status");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.SEfstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sEFStatus");
            entity.Property(e => e.SRecDirection)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sRecDirection");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SysTime)
                .HasColumnType("datetime")
                .HasColumnName("sys_time");
            entity.Property(e => e.TotalBank)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_bank");
            entity.Property(e => e.TotalTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_trust");
            entity.Property(e => e.TranAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("tran_amt");
            entity.Property(e => e.TranQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("tran_qty");
            entity.Property(e => e.TranType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tran_type");
            entity.Property(e => e.TrustBal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("trust_bal");
        });

        modelBuilder.Entity<ExcelForceEcmShareTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExcelForceEcmShareTemp");

            entity.Property(e => e.AccrInt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("accr_int");
            entity.Property(e => e.ApplyTo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("apply_to");
            entity.Property(e => e.BankCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("bank_code");
            entity.Property(e => e.BankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("bank_ref_no");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("client_no");
            entity.Property(e => e.ConDate)
                .HasColumnType("datetime")
                .HasColumnName("con_date");
            entity.Property(e => e.ConNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("con_no");
            entity.Property(e => e.ConRef)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("con_ref");
            entity.Property(e => e.DueDate)
                .HasColumnType("datetime")
                .HasColumnName("due_date");
            entity.Property(e => e.EfRefNo)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("ef_ref_no");
            entity.Property(e => e.NoOfRec)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("no_of_rec");
            entity.Property(e => e.OstAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("ost_amt");
            entity.Property(e => e.OstQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("ost_qty");
            entity.Property(e => e.PayBank)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_bank");
            entity.Property(e => e.PayTrust)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("pay_trust");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("price");
            entity.Property(e => e.RecMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("rec_mode");
            entity.Property(e => e.RecStatus)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("rec_status");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.StockNo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("stock_no");
            entity.Property(e => e.SysTime)
                .HasColumnType("datetime")
                .HasColumnName("sys_time");
            entity.Property(e => e.TotalBank)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_bank");
            entity.Property(e => e.TotalTrust)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("total_trust");
            entity.Property(e => e.TranAmt)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("tran_amt");
            entity.Property(e => e.TranQty)
                .HasColumnType("decimal(12, 0)")
                .HasColumnName("tran_qty");
            entity.Property(e => e.TranType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("tran_type");
            entity.Property(e => e.TrustBal)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("trust_bal");
        });

        modelBuilder.Entity<ExecutionReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExecutionReport");

            entity.Property(e => e.Account)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AvgPx).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExecId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExecType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExpireDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HandInstr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idsource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDSource");
            entity.Property(e => e.LastPx).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.OrdRejReason)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrdStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrdType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrigClOrdId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(15, 3)");
            entity.Property(e => e.SecurityId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SecurityID");
            entity.Property(e => e.Side)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Symbol)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Text)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TimeInForce)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TradeDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransactTime)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExecutionType>(entity =>
        {
            entity.HasKey(e => e.ExecType);

            entity.ToTable("ExecutionType");

            entity.Property(e => e.ExecType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExecTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExtrClientUsrInfo>(entity =>
        {
            entity.HasKey(e => e.Usrid);

            entity.ToTable("Extr_ClientUsrInfo");

            entity.Property(e => e.Usrid)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.SiteId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("SiteID");
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrialExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrLastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNationality)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrPassNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrPostCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrStatus)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.UsrType)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ExtrUsrAccessEx>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("Extr_UsrAccessEx");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<FixTraderId>(entity =>
        {
            entity.HasKey(e => e.FixTraderId1);

            entity.ToTable("FixTraderID");

            entity.Property(e => e.FixTraderId1)
                .ValueGeneratedNever()
                .HasColumnName("FixTraderID");
            entity.Property(e => e.ShariahFixTraderId).HasColumnName("ShariahFixTraderID");
        });

        modelBuilder.Entity<ForceSellContract>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.ContractNo, e.ContractDate })
                .HasName("PK_ContractForceSell")
                .HasFillFactor(90);

            entity.ToTable("ForceSellContract");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ContractDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[contractdate],getdate()))", false);
            entity.Property(e => e.Brokerage).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ContractDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractSettleAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ContractType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("RM");
            entity.Property(e => e.GrossAmount).HasColumnType("decimal(12, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.Rate).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ServiceCharge).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Value).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<FormBizProcConsolidateCont>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate }).HasName("PK_BizProcConsolidateCont");

            entity.ToTable("FormBizProcConsolidateCont");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcDirectWd>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormBizProcDirectWd");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrfQtyWords)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrfeeCdsno)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TrfeeCDSNo");
            entity.Property(e => e.TrfeeIcno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TrfeeICNo");
            entity.Property(e => e.TrfeeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrfeeNationality)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcForeignCont>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormBizProcForeignCont");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.EstimatedAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.PurBasedOn)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcMailUplift>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormBizProcMailUplift");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReasonType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcManualBi>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormBizProcManualBI");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContDate).HasColumnType("datetime");
            entity.Property(e => e.ContNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcNotCotr>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormBizProcNotCotr");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.BuyOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BuyPrice).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.BuyTerminalId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BuyTerminalID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContDate).HasColumnType("datetime");
            entity.Property(e => e.ContNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SellOrderNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SellPrice).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.SellTerminalId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SellTerminalID");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrxnType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormBizProcRemisierTrnx>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormBizProcRemisierTrnx");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormCreditDailyCotrRpt>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormCreditDailyCotrRpt");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.CasetOffAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("CASetOffAmt");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CotrNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SdsetOffAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SDSetOffAmt");
            entity.Property(e => e.TasetOffAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("TASetOffAmt");
        });

        modelBuilder.Entity<FormCreditDbttrnx>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditDBTTrnx");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ApprvTrdgLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.AvailableLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.BrkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CtrPtyDealer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TelNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TrnxType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormCreditDeclaration>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditDeclaration");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Dbttype)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DBTType");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrnxType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(15, 4)");
        });

        modelBuilder.Entity<FormCreditEarmark>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormCreditEarmark");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClredTabal)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("ClredTABal");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormCreditLeave>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditLeave");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.AssignClntIntrAcc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DateFrom).HasColumnType("datetime");
            entity.Property(e => e.DateTo).HasColumnType("datetime");
            entity.Property(e => e.PatchRelocateTelReq)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Phone1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Phone2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TrxnType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrIdrelief)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrIDRelief");
        });

        modelBuilder.Entity<FormCreditNegoBrkgC>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditNegoBrkgC");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.BrkgType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.MinBrkg).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TrdLessThan).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.TrdMoreThan).HasColumnType("decimal(15, 4)");
        });

        modelBuilder.Entity<FormCreditRelease>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditRelease");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.BalanceAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EarmarkAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ReleaseAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormCreditUpliftLmt>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormCreditUpliftLmt");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.AddLmtAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurrExps).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormCreditWithdrawal>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormCreditWithdrawal");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.WdFrom)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.WdSumAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormFinanceRecovery>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormFinanceRecovery");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ChqAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ChqNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CotrLossPrinAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DraweeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Intr).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Place)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurDsadamt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("PurDSADAmt");
        });

        modelBuilder.Entity<FormFinanceRequisition>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormFinanceRequisition");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormFinanceReversal>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormFinanceReversal");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CotrIntr).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.RevDate).HasColumnType("datetime");
            entity.Property(e => e.RevTotalAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormFinanceTrustAcWd>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormFinanceTrustAcWd");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.WdPurpose)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.WdSumAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<FormOptGrp>(entity =>
        {
            entity.HasKey(e => e.FormGrpId);

            entity.ToTable("FormOptGrp");

            entity.Property(e => e.FormGrpId)
                .HasMaxLength(15)
                .HasComment("D - Daily; W - Weekly; M - Monthly; Q - Quaterly; H - Half-Yearly; Y - Yearly;")
                .HasColumnName("FormGrpID");
            entity.Property(e => e.ActiveIconUrl).HasMaxLength(300);
            entity.Property(e => e.DefaultFormId)
                .HasMaxLength(15)
                .HasColumnName("DefaultFormID");
            entity.Property(e => e.FormGrpDesc).HasMaxLength(255);
            entity.Property(e => e.InActiveIconUrl).HasMaxLength(300);
        });

        modelBuilder.Entity<FormOptLst>(entity =>
        {
            entity.HasKey(e => new { e.FormGrpId, e.FormId });

            entity.ToTable("FormOptLst");

            entity.Property(e => e.FormGrpId)
                .HasMaxLength(15)
                .HasColumnName("FormGrpID");
            entity.Property(e => e.FormId)
                .HasMaxLength(15)
                .HasColumnName("FormID");
            entity.Property(e => e.CutOffTimeFr).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CutOffTimeTo).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.DeptDesc).HasMaxLength(500);
            entity.Property(e => e.DeptId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DeptID");
            entity.Property(e => e.FormDesc).HasMaxLength(255);
            entity.Property(e => e.FormRedirectUrl).HasMaxLength(255);
            entity.Property(e => e.FormTableName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormTitle).HasMaxLength(500);
        });

        modelBuilder.Entity<FormShrMrgnChqWdShrTrf>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate, e.SeqNo });

            entity.ToTable("FormShrMrgnChqWdShrTrf");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ChqWdAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FormShrMrgnPayment>(entity =>
        {
            entity.HasKey(e => new { e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormShrMrgnPayment");

            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CotrLossRefCdno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CotrLossRefCDNo");
            entity.Property(e => e.IntrAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.IntrRefCdno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IntrRefCDNo");
            entity.Property(e => e.Ntaamt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("NTAAmt");
            entity.Property(e => e.NtarefPno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NTARefPNo");
        });

        modelBuilder.Entity<FormTrnxDtl>(entity =>
        {
            entity.HasKey(e => new { e.FormGrpId, e.FormId, e.FormRefNo, e.TrnxDate });

            entity.ToTable("FormTrnxDtl");

            entity.Property(e => e.FormGrpId)
                .HasMaxLength(15)
                .HasColumnName("FormGrpID");
            entity.Property(e => e.FormId)
                .HasMaxLength(15)
                .HasColumnName("FormID");
            entity.Property(e => e.FormRefNo).HasMaxLength(20);
            entity.Property(e => e.TrnxDate).HasColumnType("datetime");
            entity.Property(e => e.ApplyBy).HasMaxLength(16);
            entity.Property(e => e.PrintDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Fpxcharge>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FPXCharge");

            entity.Property(e => e.Fpxcharge1)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("FPXCharge");
        });

        modelBuilder.Entity<FpxresEmailSett>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("FPXResEmailSett");

            entity.Property(e => e.Cc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.From)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Subject)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.To)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fpxresponse>(entity =>
        {
            entity.HasKey(e => e.RespCode);

            entity.ToTable("FPXResponse");

            entity.Property(e => e.RespCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.RespDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FsttradeInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FSTTradeInfo");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasColumnType("decimal(9, 0)")
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FsttradeInfoHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FSTTradeInfoHistory");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasColumnType("decimal(9, 0)")
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GtdclOrdId>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.ClOrdId, e.XchgCode }).HasName("PK_GTDClOrdId_1");

            entity.ToTable("GTDClOrdId");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Hd14421log>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HD14421Log");

            entity.Property(e => e.LogTime).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InsageSetting>(entity =>
        {
            entity.HasKey(e => e.Code);

            entity.ToTable("InsageSetting");

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ActiveIconUrl)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CodeDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DefaultCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InActiveIconUrl)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ParentCode)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InternalAcct>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntSname, e.ClntCdsno });

            entity.ToTable("InternalAcct");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntSname)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrdgCode)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<IntraDayOrdCotr>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.StkCode }).HasName("PK_IntraDayOrdCotrSum");

            entity.ToTable("IntraDayOrdCotr");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BuyReinstateAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CotrGainAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SellReinstateAmt).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<IntraDayOrdCotrDtl>(entity =>
        {
            entity.HasKey(e => new { e.TrxnDate, e.TrxnSequenceNo, e.CoBrchCode, e.ClntCode, e.StkCode, e.ContOrderType, e.ContOrderDate, e.ContractNo, e.SequenceNo });

            entity.ToTable("IntraDayOrdCotrDtl");

            entity.Property(e => e.TrxnDate).HasColumnType("datetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContOrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ContOrderDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CotrAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CotrPrc).HasColumnType("decimal(10, 4)");
        });

        modelBuilder.Entity<ItrBosshareInfo>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.XchgCode, e.StkCode });

            entity.ToTable("itrBOSShareInfo");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("XChgCode");
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OpenPqty).HasColumnName("OpenPQty");
            entity.Property(e => e.OpenSqty).HasColumnName("OpenSQty");
        });

        modelBuilder.Entity<ItrFileTrnx>(entity =>
        {
            entity.HasKey(e => e.FileId);

            entity.ToTable("ItrFileTrnx");

            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.FileType).HasMaxLength(2);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Operation).HasMaxLength(2);
            entity.Property(e => e.OriFileName).HasMaxLength(255);
        });

        modelBuilder.Entity<Keyword>(entity =>
        {
            entity.Property(e => e.KeywordId).HasColumnName("KeywordID");
            entity.Property(e => e.KeyMapPath).HasMaxLength(255);
            entity.Property(e => e.KeyUrl)
                .HasMaxLength(255)
                .HasColumnName("KeyURL");
            entity.Property(e => e.Keyword1)
                .HasMaxLength(255)
                .HasColumnName("Keyword");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
        });

        modelBuilder.Entity<KeywordsScreener>(entity =>
        {
            entity.HasKey(e => e.KeywordId).HasName("PK_KeywordsScr");

            entity.ToTable("KeywordsScreener");

            entity.Property(e => e.KeywordId).HasColumnName("KeywordID");
            entity.Property(e => e.KeyMapPath).HasMaxLength(255);
            entity.Property(e => e.KeyUrl)
                .HasMaxLength(255)
                .HasColumnName("KeyURL");
            entity.Property(e => e.Keyword).HasMaxLength(255);
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.Param).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<KldataEf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("KLDATA_EF");

            entity.Property(e => e.Cdsno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cdsno");
            entity.Property(e => e.Clntcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("clntcode");
            entity.Property(e => e.Clntsname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("clntsname");
            entity.Property(e => e.Rcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rcode");
        });

        modelBuilder.Entity<LbMembership>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LB_MEMBERSHIP");

            entity.Property(e => e.Actiondate).HasColumnName("ACTIONDATE");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Authdate).HasColumnName("AUTHDATE");
            entity.Property(e => e.Authid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("AUTHID");
            entity.Property(e => e.Authlevel)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("AUTHLEVEL");
            entity.Property(e => e.Authtransdate).HasColumnName("AUTHTRANSDATE");
            entity.Property(e => e.Email)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Failedpassansatmptcount)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("FAILEDPASSANSATMPTCOUNT");
            entity.Property(e => e.Failedpassatmptcount)
                .HasColumnType("numeric(3, 0)")
                .HasColumnName("FAILEDPASSATMPTCOUNT");
            entity.Property(e => e.Isauth)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISAUTH");
            entity.Property(e => e.Isdel)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISDEL");
            entity.Property(e => e.Isfirstlogin)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISFIRSTLOGIN");
            entity.Property(e => e.Islockedout)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISLOCKEDOUT");
            entity.Property(e => e.Isloggedin)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISLOGGEDIN");
            entity.Property(e => e.Lastlockoutdate).HasColumnName("LASTLOCKOUTDATE");
            entity.Property(e => e.Lastlogindate).HasColumnName("LASTLOGINDATE");
            entity.Property(e => e.Lastpasswordchangedate).HasColumnName("LASTPASSWORDCHANGEDATE");
            entity.Property(e => e.Makerid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("MAKERID");
            entity.Property(e => e.Passwordanswer)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("PASSWORDANSWER");
            entity.Property(e => e.Passwordquestion)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("PASSWORDQUESTION");
            entity.Property(e => e.Passwordsalt)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("PASSWORDSALT");
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.Transdate).HasColumnName("TRANSDATE");
            entity.Property(e => e.Userid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<LbUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LB_USER");

            entity.Property(e => e.Actiondate).HasColumnName("ACTIONDATE");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Authdate).HasColumnName("AUTHDATE");
            entity.Property(e => e.Authid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("AUTHID");
            entity.Property(e => e.Authlevel)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("AUTHLEVEL");
            entity.Property(e => e.Authtransdate).HasColumnName("AUTHTRANSDATE");
            entity.Property(e => e.Isauth)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISAUTH");
            entity.Property(e => e.Isdel)
                .HasColumnType("numeric(1, 0)")
                .HasColumnName("ISDEL");
            entity.Property(e => e.Makerid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("MAKERID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.Transdate).HasColumnName("TRANSDATE");
            entity.Property(e => e.Userid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("USERID");
            entity.Property(e => e.Username)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("USERNAME");
        });

        modelBuilder.Entity<LbUserpassword>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LB_USERPASSWORD");

            entity.Property(e => e.Actiondate)
                .HasColumnType("datetime")
                .HasColumnName("ACTIONDATE");
            entity.Property(e => e.Actiontype)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ACTIONTYPE");
            entity.Property(e => e.Makerid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("MAKERID");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PASSWORD");
            entity.Property(e => e.Userid)
                .HasColumnType("numeric(5, 0)")
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<LimitInfo>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode });

            entity.ToTable("LimitInfo");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ApproveTradingLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CashBalance).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrEarmarkedAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrSoldAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.FsttodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedAmt");
            entity.Property(e => e.FsttodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedSellAmt");
            entity.Property(e => e.FsttodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayPurchasedAmt");
            entity.Property(e => e.FsttodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodaySoldAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfo202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LimitInfo_20240621_1438");

            entity.Property(e => e.ApproveTradingLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CashBalance).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrSoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.FsttodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedAmt");
            entity.Property(e => e.FsttodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedSellAmt");
            entity.Property(e => e.FsttodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayPurchasedAmt");
            entity.Property(e => e.FsttodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodaySoldAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoClntXchg>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.XchgCode });

            entity.ToTable("LimitInfoClntXchg");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClntNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrSoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoCo>(entity =>
        {
            entity.HasKey(e => e.CoCode);

            entity.ToTable("LimitInfoCo");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoCoBrch>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.ToTable("LimitInfoCoBrch");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoStkXchg>(entity =>
        {
            entity.HasKey(e => e.XchgCode);

            entity.ToTable("LimitInfoStkXchg");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoUsr>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("LimitInfoUsr");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasDefaultValue(0.00m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LimitInfoUsrXchg>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.XchgCode });

            entity.ToTable("LimitInfoUsrXchg");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LinkOrderQueue>(entity =>
        {
            entity.HasKey(e => new { e.LinkOrderSeqNo, e.OrderSeqNo })
                .HasName("PK_OCOOrderQueue")
                .IsClustered(false);

            entity.ToTable("LinkOrderQueue");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).HasDefaultValue(0);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LogInfo>(entity =>
        {
            entity.HasKey(e => new { e.RptGrpId, e.RptId }).HasName("PK_RptInfo");

            entity.ToTable("LogInfo");

            entity.Property(e => e.RptGrpId).HasColumnName("RptGrpID");
            entity.Property(e => e.RptId).HasColumnName("RptID");
            entity.Property(e => e.ReferNodeId).HasColumnName("ReferNodeID");
            entity.Property(e => e.RptDesc).HasMaxLength(50);
            entity.Property(e => e.RptGrpHeader).HasMaxLength(255);
            entity.Property(e => e.RptKeyDesc).HasMaxLength(50);
            entity.Property(e => e.RptKeyField).HasMaxLength(50);
            entity.Property(e => e.RptSearchStoredProc).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<LogInfo202201281859>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LogInfo_20220128_1859");

            entity.Property(e => e.ReferNodeId).HasColumnName("ReferNodeID");
            entity.Property(e => e.RptDesc).HasMaxLength(50);
            entity.Property(e => e.RptGrpHeader).HasMaxLength(255);
            entity.Property(e => e.RptGrpId).HasColumnName("RptGrpID");
            entity.Property(e => e.RptId).HasColumnName("RptID");
            entity.Property(e => e.RptKeyDesc).HasMaxLength(50);
            entity.Property(e => e.RptKeyField).HasMaxLength(50);
            entity.Property(e => e.RptSearchStoredProc).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<LogInfoGrp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LogInfoGrp");

            entity.Property(e => e.RptGrpDesc).HasMaxLength(50);
            entity.Property(e => e.RptGrpId).HasColumnName("RptGrpID");
            entity.Property(e => e.RptGrpPurgeNodeId).HasColumnName("RptGrpPurgeNodeID");
            entity.Property(e => e.RptGrpViewNodeId).HasColumnName("RptGrpViewNodeID");
        });

        modelBuilder.Entity<ManualOrderFilled>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ManualOrderFilled");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("F-Price");
            entity.Property(e => e.FQty).HasColumnName("F-Qty");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MassQuote>(entity =>
        {
            entity.HasKey(e => e.MassQuoteId).IsClustered(false);

            entity.ToTable("MassQuote");

            entity.Property(e => e.MassQuoteId)
                .ValueGeneratedNever()
                .HasColumnName("MassQuoteID");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MassQuoteClOrdId>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.ClOrdId, e.SecondaryClOrdId }).IsClustered(false);

            entity.ToTable("MassQuoteClOrdId");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SecondaryClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MassQuoteList>(entity =>
        {
            entity.HasKey(e => new { e.MassQuoteId, e.SequenceNo }).IsClustered(false);

            entity.ToTable("MassQuoteList");

            entity.Property(e => e.MassQuoteId).HasColumnName("MassQuoteID");
        });

        modelBuilder.Entity<MassQuoteQueue>(entity =>
        {
            entity.HasKey(e => new { e.MassQuoteId, e.OrderSeqNo }).IsClustered(false);

            entity.ToTable("MassQuoteQueue");

            entity.Property(e => e.MassQuoteId).HasColumnName("MassQuoteID");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).HasDefaultValue(0);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MimosSvcInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MimosSvcInfo");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.UpdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("0");
            entity.Property(e => e.UsrChannel)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MimosSvcInfoHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MimosSvcInfo_Hist");

            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.UpdFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrChannel)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MinBidSize>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.CurrencyCode, e.PriceBidType, e.Price });

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.BidSize).HasColumnType("decimal(10, 3)");
        });

        modelBuilder.Entity<MinBidSizes20181010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MinBidSizes_20181010");

            entity.Property(e => e.BidSize).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MiscSetOff>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.BranchCode, e.TransNo, e.TransDate });

            entity.ToTable("MiscSetOff");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.TransNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(day,[TransDate],getdate()))", false);
            entity.Property(e => e.TransAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TransDueDate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.TransType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<MstActiveBrch>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.ToTable("MstActiveBrch");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstBank>(entity =>
        {
            entity.HasKey(e => e.BankCode);

            entity.ToTable("MstBank");

            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstBidLmt>(entity =>
        {
            entity.ToTable("MstBidLmt");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.DataCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstBidLmtDtl>(entity =>
        {
            entity.ToTable("MstBidLmtDtl");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BidLmt).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.BidLmtId).HasColumnName("BidLmtID");
            entity.Property(e => e.SharePrc).HasColumnType("decimal(10, 4)");
        });

        modelBuilder.Entity<MstBrchGrp>(entity =>
        {
            entity.HasKey(e => e.BrchGrpCode);

            entity.ToTable("MstBrchGrp");

            entity.Property(e => e.BrchGrpCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BrchGrpDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstBrk>(entity =>
        {
            entity.HasKey(e => e.BrkCode);

            entity.ToTable("MstBrk");

            entity.Property(e => e.BrkCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BrkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BrkSname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BrkSName");
            entity.Property(e => e.ForeignInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
        });

        modelBuilder.Entity<MstClntExp>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsCheckIdss).HasColumnName("ClntExpsCheckIDSS");
            entity.Property(e => e.ClntExpsCheckIdssgross).HasColumnName("ClntExpsCheckIDSSGross");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmt");
            entity.Property(e => e.ClntExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmtTopUp");
            entity.Property(e => e.ClntExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmt");
            entity.Property(e => e.ClntExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.ClntExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsWithLimit).HasDefaultValueSql("('1')");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntMaxCotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntPortfolioInd).HasDefaultValue(false);
            entity.Property(e => e.ClntRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
        });

        modelBuilder.Entity<MstClntExps202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntExps_20240621_1438");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsCheckIdss).HasColumnName("ClntExpsCheckIDSS");
            entity.Property(e => e.ClntExpsCheckIdssgross).HasColumnName("ClntExpsCheckIDSSGross");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmt");
            entity.Property(e => e.ClntExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmtTopUp");
            entity.Property(e => e.ClntExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmt");
            entity.Property(e => e.ClntExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.ClntExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntMaxCotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
        });

        modelBuilder.Entity<MstClntExps202407151738>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntExps_20240715_1738");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsCheckIdss).HasColumnName("ClntExpsCheckIDSS");
            entity.Property(e => e.ClntExpsCheckIdssgross).HasColumnName("ClntExpsCheckIDSSGross");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmt");
            entity.Property(e => e.ClntExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmtTopUp");
            entity.Property(e => e.ClntExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmt");
            entity.Property(e => e.ClntExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.ClntExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntMaxCotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
        });

        modelBuilder.Entity<MstClntExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntExps_bak20221209");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsCheckIdss).HasColumnName("ClntExpsCheckIDSS");
            entity.Property(e => e.ClntExpsCheckIdssgross).HasColumnName("ClntExpsCheckIDSSGross");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmt");
            entity.Property(e => e.ClntExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSAmtTopUp");
            entity.Property(e => e.ClntExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmt");
            entity.Property(e => e.ClntExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.ClntExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossDayOrder");
            entity.Property(e => e.ClntExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.ClntExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsIDSSPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntMaxCotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
        });

        modelBuilder.Entity<MstClntExpsNew>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.ToTable("MstClntExpsNew");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ApproveTradingLimit).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CashBalance).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntMaxCotrLossAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntPortfolioInd).HasDefaultValue(false);
            entity.Property(e => e.ClntRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DlrEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrSoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
            entity.Property(e => e.FsttodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedAmt");
            entity.Property(e => e.FsttodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayEarmarkedSellAmt");
            entity.Property(e => e.FsttodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodayPurchasedAmt");
            entity.Property(e => e.FsttodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("FSTTodaySoldAmt");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<MstClntNettLmtExp>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.UpdatedDate }).HasName("PK_MstClntNettLmtExp_1");

            entity.ToTable("MstClntNettLmtExp");

            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ClntDlrCode).HasMaxLength(16);
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.DlrExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(16)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstClntType>(entity =>
        {
            entity.HasKey(e => e.ClntType).HasName("PK_ClntType");

            entity.ToTable("MstClntType");

            entity.Property(e => e.ClntType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntTypeDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<MstClntType202301161607>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntType_20230116_1607");

            entity.Property(e => e.ClntType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntTypeDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<MstClntXchgExp>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.XchgCode });

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod)
                .HasDefaultValue(0)
                .HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("X")
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
        });

        modelBuilder.Entity<MstClntXchgExps202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntXchgExps_20240621_1438");

            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod).HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstClntXchgExps202407151739>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntXchgExps_20240715_1739");

            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod).HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstClntXchgExpsBak20221116>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntXchgExps_bak20221116");

            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod).HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstClntXchgExpsNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntXchgExpsNew");

            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod).HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstClntXchgExpsNew1>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.XchgCode }).HasName("PK_MstClntXchgExpsNew");

            entity.ToTable("MstClntXchgExpsNew1");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClntBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntGtcexpiryPeriod)
                .HasDefaultValue(0)
                .HasColumnName("ClntGTCExpiryPeriod");
            entity.Property(e => e.ClntGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("X")
                .HasColumnName("ClntGTDMode");
            entity.Property(e => e.ClntNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClntNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DlrEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.DlrSoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.EcosbuyBidLimit).HasColumnName("ECOSBuyBidLimit");
            entity.Property(e => e.EcossellBidLimit).HasColumnName("ECOSSellBidLimit");
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<MstClntXexp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstClntXExps");

            entity.Property(e => e.ClntExpsCheckFst).HasColumnName("ClntExpsCheckFST");
            entity.Property(e => e.ClntExpsEcosamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsECOSAmt");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
        });

        modelBuilder.Entity<MstCo>(entity =>
        {
            entity.HasKey(e => e.CoCode);

            entity.ToTable("MstCo");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SenderType).HasDefaultValueSql("('')");
            entity.Property(e => e.UsrAccessLimitDefEndTime).HasColumnType("datetime");
            entity.Property(e => e.UsrAccessLimitDefExprDate).HasColumnType("datetime");
            entity.Property(e => e.UsrAccessLimitDefStartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MstCoBrch>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.ToTable("MstCoBrch");

            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.BrchGrpCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchAddr).HasMaxLength(250);
            entity.Property(e => e.CoBrchDesc).HasMaxLength(40);
            entity.Property(e => e.CoBrchPhone).HasMaxLength(15);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrcFeedSvrAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstCoBrchEcm>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.ToTable("MstCoBrchECM");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.BrchGrpCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchAddr).HasMaxLength(250);
            entity.Property(e => e.CoBrchDesc).HasMaxLength(40);
            entity.Property(e => e.CoBrchPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PrcFeedSvrAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstCoBrchExp>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchBuyDbtshrLimit).HasColumnName("CoBrchBuyDBTShrLimit");
            entity.Property(e => e.CoBrchBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchClntBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntBuyTLimit");
            entity.Property(e => e.CoBrchClntNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntNettTLimit");
            entity.Property(e => e.CoBrchClntSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntSellTLimit");
            entity.Property(e => e.CoBrchClntTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntTotalTLimit");
            entity.Property(e => e.CoBrchDbtcancel).HasColumnName("CoBrchDBTCancel");
            entity.Property(e => e.CoBrchDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTLowLimitPctg");
            entity.Property(e => e.CoBrchDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTUpLimitPctg");
            entity.Property(e => e.CoBrchExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsCheckIdss).HasColumnName("CoBrchExpsCheckIDSS");
            entity.Property(e => e.CoBrchExpsCheckIdssgross).HasColumnName("CoBrchExpsCheckIDSSGross");
            entity.Property(e => e.CoBrchExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSAmt");
            entity.Property(e => e.CoBrchExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSAmtTopUp");
            entity.Property(e => e.CoBrchExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSDayOrder");
            entity.Property(e => e.CoBrchExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossAmt");
            entity.Property(e => e.CoBrchExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.CoBrchExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossDayOrder");
            entity.Property(e => e.CoBrchExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.CoBrchExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSPrevDayOrder");
            entity.Property(e => e.CoBrchExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchSellDbtshrLimit).HasColumnName("CoBrchSellDBTShrLimit");
            entity.Property(e => e.CoBrchSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchUsrBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrBuyTLimit");
            entity.Property(e => e.CoBrchUsrNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrNettTLimit");
            entity.Property(e => e.CoBrchUsrSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrSellTLimit");
            entity.Property(e => e.CoBrchUsrTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrTotalTLimit");
        });

        modelBuilder.Entity<MstCoBrchExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstCoBrchExps_bak20221209");

            entity.Property(e => e.CoBrchBuyDbtshrLimit).HasColumnName("CoBrchBuyDBTShrLimit");
            entity.Property(e => e.CoBrchBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchClntBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntBuyTLimit");
            entity.Property(e => e.CoBrchClntNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntNettTLimit");
            entity.Property(e => e.CoBrchClntSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntSellTLimit");
            entity.Property(e => e.CoBrchClntTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntTotalTLimit");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchDbtcancel).HasColumnName("CoBrchDBTCancel");
            entity.Property(e => e.CoBrchDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTLowLimitPctg");
            entity.Property(e => e.CoBrchDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTUpLimitPctg");
            entity.Property(e => e.CoBrchExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsCheckIdss).HasColumnName("CoBrchExpsCheckIDSS");
            entity.Property(e => e.CoBrchExpsCheckIdssgross).HasColumnName("CoBrchExpsCheckIDSSGross");
            entity.Property(e => e.CoBrchExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSAmt");
            entity.Property(e => e.CoBrchExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSAmtTopUp");
            entity.Property(e => e.CoBrchExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSDayOrder");
            entity.Property(e => e.CoBrchExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossAmt");
            entity.Property(e => e.CoBrchExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.CoBrchExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossDayOrder");
            entity.Property(e => e.CoBrchExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.CoBrchExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoBrchExpsIDSSPrevDayOrder");
            entity.Property(e => e.CoBrchExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchSellDbtshrLimit).HasColumnName("CoBrchSellDBTShrLimit");
            entity.Property(e => e.CoBrchSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchUsrBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrBuyTLimit");
            entity.Property(e => e.CoBrchUsrNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrNettTLimit");
            entity.Property(e => e.CoBrchUsrSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrSellTLimit");
            entity.Property(e => e.CoBrchUsrTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrTotalTLimit");
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstCoBrchExpsNew>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode });

            entity.ToTable("MstCoBrchExpsNew");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchBuyDbtshrLimit).HasColumnName("CoBrchBuyDBTShrLimit");
            entity.Property(e => e.CoBrchBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchClntBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntBuyTLimit");
            entity.Property(e => e.CoBrchClntNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntNettTLimit");
            entity.Property(e => e.CoBrchClntSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntSellTLimit");
            entity.Property(e => e.CoBrchClntTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchClntTotalTLimit");
            entity.Property(e => e.CoBrchDbtcancel).HasColumnName("CoBrchDBTCancel");
            entity.Property(e => e.CoBrchDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTLowLimitPctg");
            entity.Property(e => e.CoBrchDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoBrchDBTUpLimitPctg");
            entity.Property(e => e.CoBrchExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoBrchRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchSellDbtshrLimit).HasColumnName("CoBrchSellDBTShrLimit");
            entity.Property(e => e.CoBrchSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoBrchUsrBuyTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrBuyTLimit");
            entity.Property(e => e.CoBrchUsrNettTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrNettTLimit");
            entity.Property(e => e.CoBrchUsrSellTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrSellTLimit");
            entity.Property(e => e.CoBrchUsrTotalTlimit)
                .HasColumnType("decimal(30, 2)")
                .HasColumnName("CoBrchUsrTotalTLimit");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<MstCoBrchXchgPrcFeed>(entity =>
        {
            entity.HasKey(e => new { e.CoCode, e.CoBrchCode, e.XchgCode });

            entity.ToTable("MstCoBrchXchgPrcFeed");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DelayPrcFeedSvrAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrcFeedSvrAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstCoExp>(entity =>
        {
            entity.HasKey(e => e.CoCode);

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoDbtbuyShrLimit).HasColumnName("CoDBTBuyShrLimit");
            entity.Property(e => e.CoDbtcancel).HasColumnName("CoDBTCancel");
            entity.Property(e => e.CoDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTLowLimitPctg");
            entity.Property(e => e.CoDbtsellShrLimit).HasColumnName("CoDBTSellShrLimit");
            entity.Property(e => e.CoDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTUpLimitPctg");
            entity.Property(e => e.CoExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsCheckIdss).HasColumnName("CoExpsCheckIDSS");
            entity.Property(e => e.CoExpsCheckIdssgross).HasColumnName("CoExpsCheckIDSSGross");
            entity.Property(e => e.CoExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSAmt");
            entity.Property(e => e.CoExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSAmtTopUp");
            entity.Property(e => e.CoExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSDayOrder");
            entity.Property(e => e.CoExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossAmt");
            entity.Property(e => e.CoExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.CoExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossDayOrder");
            entity.Property(e => e.CoExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.CoExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSPrevDayOrder");
            entity.Property(e => e.CoExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoSellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstCoExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstCoExps_bak20221209");

            entity.Property(e => e.CoBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoDbtbuyShrLimit).HasColumnName("CoDBTBuyShrLimit");
            entity.Property(e => e.CoDbtcancel).HasColumnName("CoDBTCancel");
            entity.Property(e => e.CoDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTLowLimitPctg");
            entity.Property(e => e.CoDbtsellShrLimit).HasColumnName("CoDBTSellShrLimit");
            entity.Property(e => e.CoDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTUpLimitPctg");
            entity.Property(e => e.CoExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsCheckIdss).HasColumnName("CoExpsCheckIDSS");
            entity.Property(e => e.CoExpsCheckIdssgross).HasColumnName("CoExpsCheckIDSSGross");
            entity.Property(e => e.CoExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSAmt");
            entity.Property(e => e.CoExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSAmtTopUp");
            entity.Property(e => e.CoExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSDayOrder");
            entity.Property(e => e.CoExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossAmt");
            entity.Property(e => e.CoExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.CoExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossDayOrder");
            entity.Property(e => e.CoExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.CoExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("CoExpsIDSSPrevDayOrder");
            entity.Property(e => e.CoExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoSellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstCoExpsNew>(entity =>
        {
            entity.HasKey(e => e.CoCode);

            entity.ToTable("MstCoExpsNew");

            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoDbtbuyShrLimit).HasColumnName("CoDBTBuyShrLimit");
            entity.Property(e => e.CoDbtcancel).HasColumnName("CoDBTCancel");
            entity.Property(e => e.CoDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTLowLimitPctg");
            entity.Property(e => e.CoDbtsellShrLimit).HasColumnName("CoDBTSellShrLimit");
            entity.Property(e => e.CoDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CoDBTUpLimitPctg");
            entity.Property(e => e.CoExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CoNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CoRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<MstCountry>(entity =>
        {
            entity.HasKey(e => e.CountryCode);

            entity.ToTable("MstCountry");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CountryName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstCountryExp>(entity =>
        {
            entity.HasKey(e => e.CountryCode);

            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CountryBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryDbtbuyShrLimit).HasColumnName("CountryDBTBuyShrLimit");
            entity.Property(e => e.CountryDbtcancel).HasColumnName("CountryDBTCancel");
            entity.Property(e => e.CountryDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CountryDBTLowLimitPctg");
            entity.Property(e => e.CountryDbtsellShrLimit).HasColumnName("CountryDBTSellShrLimit");
            entity.Property(e => e.CountryDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("CountryDBTUpLimitPctg");
            entity.Property(e => e.CountryExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CountryExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CountryNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CountryNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.CountryRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CountrySellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstCurcy>(entity =>
        {
            entity.HasKey(e => e.CurcyCode);

            entity.ToTable("MstCurcy");

            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurcyBrkRate).HasColumnType("decimal(11, 8)");
            entity.Property(e => e.CurcyBrkRateChngDate).HasColumnType("datetime");
            entity.Property(e => e.CurcyBursaRate).HasColumnType("decimal(11, 8)");
            entity.Property(e => e.CurcyBursaRateChngDate).HasColumnType("datetime");
            entity.Property(e => e.CurcyBuyRate).HasColumnType("decimal(11, 8)");
            entity.Property(e => e.CurcyRate2Use)
                .HasDefaultValue(1)
                .HasComment("0 - Using Bursa Rate (CurcyBursaRate); 1 - Using Broker Rate (CurcyBrkRate);");
            entity.Property(e => e.CurcySellRate).HasColumnType("decimal(11, 8)");
        });

        modelBuilder.Entity<MstDept>(entity =>
        {
            entity.HasKey(e => e.DeptId);

            entity.ToTable("MstDept");

            entity.Property(e => e.DeptId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DeptID");
            entity.Property(e => e.DeptDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstDeptContact>(entity =>
        {
            entity.ToTable("MstDeptContact");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DeptId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("DeptID");
            entity.Property(e => e.Email)
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstDocument>(entity =>
        {
            entity.HasKey(e => e.DocId);

            entity.Property(e => e.DocId).HasColumnName("DocID");
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DocFileName).HasMaxLength(255);
            entity.Property(e => e.DocTitle).HasMaxLength(255);
            entity.Property(e => e.DocType).HasMaxLength(50);
        });

        modelBuilder.Entity<MstDuitNowBank>(entity =>
        {
            entity.HasKey(e => e.BankId);

            entity.ToTable("MstDuitNowBank");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankDisplayName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.BankUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BankURL");
            entity.Property(e => e.LastResetDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MstDuitNowBankProd>(entity =>
        {
            entity.HasKey(e => e.BankId);

            entity.ToTable("MstDuitNowBank_PROD");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankDisplayName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("A")
                .IsFixedLength();
            entity.Property(e => e.BankUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BankURL");
            entity.Property(e => e.LastResetDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MstDuitNowReasonCode>(entity =>
        {
            entity.HasKey(e => new { e.ReasonCode, e.StatusCode });

            entity.Property(e => e.ReasonCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.StatusCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ReasonDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstDuitNowStatusCode>(entity =>
        {
            entity.HasKey(e => e.StatusCode);

            entity.Property(e => e.StatusCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.StatusDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StatusName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstEduLvl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstEduLvl");

            entity.Property(e => e.EduCode).ValueGeneratedOnAdd();
            entity.Property(e => e.EduDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstEprod>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstEProd");

            entity.Property(e => e.ClientType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProdCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProdDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstFbmstk>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstFBMStk");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Fbm).HasColumnName("FBM");
        });

        modelBuilder.Entity<MstForm>(entity =>
        {
            entity.HasKey(e => new { e.DeptId, e.FormId });

            entity.ToTable("MstForm");

            entity.Property(e => e.DeptId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DeptID");
            entity.Property(e => e.FormId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("FormID");
            entity.Property(e => e.CutOffTimeFr).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CutOffTimeTo).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.FormDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Msg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PageEdit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PageView)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmitAfterCutOffTime)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
        });

        modelBuilder.Entity<MstFpxbank>(entity =>
        {
            entity.HasKey(e => e.BankId);

            entity.ToTable("MstFPXBank");

            entity.Property(e => e.BankId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankDisplayName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstGlobalClntEcosLimitExp>(entity =>
        {
            entity.HasKey(e => e.ExpLevelType);

            entity.Property(e => e.ExpLevelType).ValueGeneratedNever();
            entity.Property(e => e.ExpVal)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LimitChangePctg).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<MstGlobalLimitExp>(entity =>
        {
            entity.HasKey(e => e.ExpsType);

            entity.Property(e => e.ExpsType)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.LimitChangePctg).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstHld>(entity =>
        {
            entity.HasKey(e => new { e.HldDate, e.XchgCode });

            entity.ToTable("MstHld");

            entity.Property(e => e.HldDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HldDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeEndTime).HasColumnType("datetime");
            entity.Property(e => e.TradeStartTime).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstIncGrp>(entity =>
        {
            entity.HasKey(e => e.IncGrpCode);

            entity.ToTable("MstIncGrp");

            entity.Property(e => e.IncGrpDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.IncMaxVal).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.IncMinVal).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<MstInstrStpDty>(entity =>
        {
            entity.HasKey(e => e.InstrTypeCd).HasName("PK__MstInstr__7E42F4C6DDEC3BBB");

            entity.ToTable("MstInstrStpDty");

            entity.Property(e => e.InstrTypeCd).ValueGeneratedNever();
            entity.Property(e => e.InstrTypeDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StpDtyMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StpDtyMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StpDtyVal).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MstInternalAcType>(entity =>
        {
            entity.HasKey(e => e.InternalAcTypeCode);

            entity.ToTable("MstInternalAcType");

            entity.Property(e => e.InternalAcTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.InternalAcTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstLegalStat>(entity =>
        {
            entity.HasKey(e => e.LegalStatCode);

            entity.ToTable("MstLegalStat");

            entity.Property(e => e.LegalStatCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LegalStatDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstMsgList>(entity =>
        {
            entity.HasKey(e => e.MsgId).HasName("PK_MsgID");

            entity.ToTable("MstMsgList");

            entity.Property(e => e.MsgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MsgID");
            entity.Property(e => e.MsgDesc)
                .HasMaxLength(512)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstMsgList20191113>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstMsgList_20191113");

            entity.Property(e => e.MsgDesc)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.MsgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MsgID");
        });

        modelBuilder.Entity<MstMsgList202201281900>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstMsgList_20220128_1900");

            entity.Property(e => e.MsgDesc)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.MsgId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MsgID");
        });

        modelBuilder.Entity<MstMultiXchgOptList>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.OptGrpVal }).HasName("PK_MstMultiXchgOptList_1");

            entity.ToTable("MstMultiXchgOptList");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OptGrpVal)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OptText).HasMaxLength(255);
        });

        modelBuilder.Entity<MstOccup>(entity =>
        {
            entity.HasKey(e => e.OccupCode);

            entity.ToTable("MstOccup");

            entity.Property(e => e.OccupDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstOff9Bank>(entity =>
        {
            entity.HasKey(e => e.BankCode);

            entity.ToTable("MstOff9Bank");

            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BankValue)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstOptList>(entity =>
        {
            entity.HasKey(e => new { e.OptGrp, e.OptVal }).HasName("PK_MstOptList_1");

            entity.ToTable("MstOptList");

            entity.Property(e => e.OptVal).HasMaxLength(10);
            entity.Property(e => e.OptText).HasMaxLength(255);
        });

        modelBuilder.Entity<MstOptList20160819>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstOptList_20160819");

            entity.Property(e => e.OptText).HasMaxLength(255);
            entity.Property(e => e.OptVal).HasMaxLength(10);
        });

        modelBuilder.Entity<MstOptList20191112>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstOptList_20191112");

            entity.Property(e => e.OptText).HasMaxLength(255);
            entity.Property(e => e.OptVal).HasMaxLength(10);
        });

        modelBuilder.Entity<MstOptList202201281859>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstOptList_20220128_1859");

            entity.Property(e => e.OptText).HasMaxLength(255);
            entity.Property(e => e.OptVal).HasMaxLength(10);
        });

        modelBuilder.Entity<MstOptList202406061351>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstOptList_20240606_1351");

            entity.Property(e => e.OptText).HasMaxLength(255);
            entity.Property(e => e.OptVal).HasMaxLength(10);
        });

        modelBuilder.Entity<MstOptListBk20160217>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstOptList_bk20160217");

            entity.Property(e => e.OptText).HasMaxLength(255);
            entity.Property(e => e.OptVal).HasMaxLength(10);
        });

        modelBuilder.Entity<MstOrderGroup>(entity =>
        {
            entity.HasKey(e => e.GroupCode);

            entity.ToTable("MstOrderGroup");

            entity.Property(e => e.DateFrom).HasColumnType("datetime");
            entity.Property(e => e.DateTo).HasColumnType("datetime");
            entity.Property(e => e.GroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupValue)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstPayeeInfo>(entity =>
        {
            entity.HasKey(e => new { e.PaymentBank, e.CoBrchCode });

            entity.ToTable("MstPayeeInfo");

            entity.Property(e => e.PaymentBank).HasMaxLength(50);
            entity.Property(e => e.CoBrchCode).HasMaxLength(5);
            entity.Property(e => e.PayeeCode).HasMaxLength(50);
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrPwd).HasMaxLength(50);
        });

        modelBuilder.Entity<MstRldClnt>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.ClntCode, e.CoBrchCode });

            entity.ToTable("MstRldClnt");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStk>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStk");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkBestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkHighestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkHighestLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkHighestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLowestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLowestLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLowestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStk20161006>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_20161006");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStk20190802>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_20190802");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStk20200309>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_20200309");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStk20211206>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_20211206");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkBackup181210>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_Backup181210");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkBk190621Err>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_bk190621_err");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ListingDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkIndexCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLowerLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkRefPrc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkShareIssue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkVolumeTraded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStkBk220801>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_bk220801");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkBrd>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.BrdCode }).HasName("PK_MstStkBrd_1");

            entity.ToTable("MstStkBrd");

            entity.Property(e => e.XchgCode).HasMaxLength(10);
            entity.Property(e => e.BrdCode).HasMaxLength(10);
            entity.Property(e => e.BrdDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<MstStkBrdExp>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.BrdCode }).HasName("PK_MstStkBrdExps_1");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BrdCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AllowPdt).HasColumnName("AllowPDT");
        });

        modelBuilder.Entity<MstStkExp>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.CoBrchCode, e.CoInd });

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CoInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CtrlType).HasDefaultValueSql("('2')");
            entity.Property(e => e.CtrlTypeEcos)
                .HasDefaultValueSql("('2')")
                .HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.StkExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.StkExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsCheckIdss).HasColumnName("StkExpsCheckIDSS");
            entity.Property(e => e.StkExpsCheckIdssgross).HasColumnName("StkExpsCheckIDSSGross");
            entity.Property(e => e.StkExpsDefaultLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsEcosbuyBidLimit).HasColumnName("StkExpsECOSBuyBidLimit");
            entity.Property(e => e.StkExpsEcossellBidLimit).HasColumnName("StkExpsECOSSellBidLimit");
            entity.Property(e => e.StkExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmt");
            entity.Property(e => e.StkExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmtTopUp");
            entity.Property(e => e.StkExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSDayOrder");
            entity.Property(e => e.StkExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmt");
            entity.Property(e => e.StkExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.StkExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossDayOrder");
            entity.Property(e => e.StkExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.StkExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSPrevDayOrder");
            entity.Property(e => e.StkExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStkExpsBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStkExpsBackup");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CtrlTypeEcos).HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.StkExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsDefaultLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsEcosbuyBidLimit).HasColumnName("StkExpsECOSBuyBidLimit");
            entity.Property(e => e.StkExpsEcossellBidLimit).HasColumnName("StkExpsECOSSellBidLimit");
            entity.Property(e => e.StkExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStkExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStkExps_bak20221209");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CtrlTypeEcos).HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.StkExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsCheckIdss).HasColumnName("StkExpsCheckIDSS");
            entity.Property(e => e.StkExpsCheckIdssgross).HasColumnName("StkExpsCheckIDSSGross");
            entity.Property(e => e.StkExpsDefaultLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsEcosbuyBidLimit).HasColumnName("StkExpsECOSBuyBidLimit");
            entity.Property(e => e.StkExpsEcossellBidLimit).HasColumnName("StkExpsECOSSellBidLimit");
            entity.Property(e => e.StkExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmt");
            entity.Property(e => e.StkExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmtTopUp");
            entity.Property(e => e.StkExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSDayOrder");
            entity.Property(e => e.StkExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmt");
            entity.Property(e => e.StkExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.StkExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossDayOrder");
            entity.Property(e => e.StkExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.StkExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSPrevDayOrder");
            entity.Property(e => e.StkExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStkExpsTest>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.CoBrchCode, e.CoInd });

            entity.ToTable("MstStkExpsTest");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CoInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CtrlType).HasDefaultValueSql("('2')");
            entity.Property(e => e.CtrlTypeEcos)
                .HasDefaultValueSql("('2')")
                .HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.StkExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.StkExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsCheckIdss).HasColumnName("StkExpsCheckIDSS");
            entity.Property(e => e.StkExpsCheckIdssgross).HasColumnName("StkExpsCheckIDSSGross");
            entity.Property(e => e.StkExpsDefaultLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsEcosbuyBidLimit).HasColumnName("StkExpsECOSBuyBidLimit");
            entity.Property(e => e.StkExpsEcossellBidLimit).HasColumnName("StkExpsECOSSellBidLimit");
            entity.Property(e => e.StkExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmt");
            entity.Property(e => e.StkExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSAmtTopUp");
            entity.Property(e => e.StkExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSDayOrder");
            entity.Property(e => e.StkExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmt");
            entity.Property(e => e.StkExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.StkExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossDayOrder");
            entity.Property(e => e.StkExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.StkExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("StkExpsIDSSPrevDayOrder");
            entity.Property(e => e.StkExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.StkRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstStkHlbsmf181210>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStk_HLBSMF181210");

            entity.Property(e => e.CcyCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.MaturityDt).HasColumnType("datetime");
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDelvCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkEcprice).HasColumnName("StkECPrice");
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkParVal).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkInstrTypeCdSecCatCd>(entity =>
        {
            entity.HasKey(e => new { e.InstrTypeCd, e.SecCatCd });

            entity.ToTable("MstStkInstrTypeCdSecCatCd");
        });

        modelBuilder.Entity<MstStkIpo>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStkIPO");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
        });

        modelBuilder.Entity<MstStkIpotest>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStkIPOTest");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
        });

        modelBuilder.Entity<MstStkProd>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStkProd");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
        });

        modelBuilder.Entity<MstStkSect>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.BrdCode, e.SectCode }).HasName("PK_MstStkSect_1");

            entity.ToTable("MstStkSect");

            entity.Property(e => e.XchgCode).HasMaxLength(10);
            entity.Property(e => e.BrdCode).HasMaxLength(10);
            entity.Property(e => e.SectCode).HasMaxLength(10);
            entity.Property(e => e.SectDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<MstStkSect20181218>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStkSect_20181218");

            entity.Property(e => e.BrdCode).HasMaxLength(10);
            entity.Property(e => e.SectCode).HasMaxLength(10);
            entity.Property(e => e.SectDesc).HasMaxLength(50);
            entity.Property(e => e.XchgCode).HasMaxLength(10);
        });

        modelBuilder.Entity<MstStkTemp>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStk_temp");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkBestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkHighestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkHighestLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkHighestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkLowestBuyPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLowestLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLowestSellPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkTest>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode });

            entity.ToTable("MstStkTest");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MstStkXchg>(entity =>
        {
            entity.HasKey(e => e.XchgCode);

            entity.ToTable("MstStkXchg");

            entity.Property(e => e.XchgCode).HasMaxLength(10);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.FrontEndShow)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("0");
            entity.Property(e => e.ImgSrc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.W8benInd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("W8BenInd");
            entity.Property(e => e.XchgName).HasMaxLength(50);
        });

        modelBuilder.Entity<MstStkXchgExp>(entity =>
        {
            entity.HasKey(e => e.XchgCode);

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgDbtbuyShrLimit).HasColumnName("XchgDBTBuyShrLimit");
            entity.Property(e => e.XchgDbtcancel).HasColumnName("XchgDBTCancel");
            entity.Property(e => e.XchgDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTLowLimitPctg");
            entity.Property(e => e.XchgDbtsellShrLimit).HasColumnName("XchgDBTSellShrLimit");
            entity.Property(e => e.XchgDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTUpLimitPctg");
            entity.Property(e => e.XchgExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsCheckIdss).HasColumnName("XchgExpsCheckIDSS");
            entity.Property(e => e.XchgExpsCheckIdssgross).HasColumnName("XchgExpsCheckIDSSGross");
            entity.Property(e => e.XchgExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSAmt");
            entity.Property(e => e.XchgExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSAmtTopUp");
            entity.Property(e => e.XchgExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSDayOrder");
            entity.Property(e => e.XchgExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossAmt");
            entity.Property(e => e.XchgExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.XchgExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossDayOrder");
            entity.Property(e => e.XchgExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.XchgExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSPrevDayOrder");
            entity.Property(e => e.XchgExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgSellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstStkXchgExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstStkXchgExps_bak20221209");

            entity.Property(e => e.XchgBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgDbtbuyShrLimit).HasColumnName("XchgDBTBuyShrLimit");
            entity.Property(e => e.XchgDbtcancel).HasColumnName("XchgDBTCancel");
            entity.Property(e => e.XchgDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTLowLimitPctg");
            entity.Property(e => e.XchgDbtsellShrLimit).HasColumnName("XchgDBTSellShrLimit");
            entity.Property(e => e.XchgDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTUpLimitPctg");
            entity.Property(e => e.XchgExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsCheckIdss).HasColumnName("XchgExpsCheckIDSS");
            entity.Property(e => e.XchgExpsCheckIdssgross).HasColumnName("XchgExpsCheckIDSSGross");
            entity.Property(e => e.XchgExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSAmt");
            entity.Property(e => e.XchgExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSAmtTopUp");
            entity.Property(e => e.XchgExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSDayOrder");
            entity.Property(e => e.XchgExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossAmt");
            entity.Property(e => e.XchgExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.XchgExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossDayOrder");
            entity.Property(e => e.XchgExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.XchgExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("XchgExpsIDSSPrevDayOrder");
            entity.Property(e => e.XchgExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgSellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstStkXchgExpsNew>(entity =>
        {
            entity.HasKey(e => e.XchgCode);

            entity.ToTable("MstStkXchgExpsNew");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.XchgBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgDbtbuyShrLimit).HasColumnName("XchgDBTBuyShrLimit");
            entity.Property(e => e.XchgDbtcancel).HasColumnName("XchgDBTCancel");
            entity.Property(e => e.XchgDbtlowLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTLowLimitPctg");
            entity.Property(e => e.XchgDbtsellShrLimit).HasColumnName("XchgDBTSellShrLimit");
            entity.Property(e => e.XchgDbtupLimitPctg)
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("XchgDBTUpLimitPctg");
            entity.Property(e => e.XchgExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.XchgNormalLowLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgNormalUpLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.XchgRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgSellTrnxLimit).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<MstSubAccountCrOrder>(entity =>
        {
            entity.HasKey(e => new { e.SubAccount, e.ClntCode });

            entity.ToTable("MstSubAccountCrOrder");

            entity.Property(e => e.SubAccount)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstTrxnCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstTrxnCost");

            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GstbrokerageFee)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTBrokerageFee");
            entity.Property(e => e.GstclearingFee)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("GSTClearingFee");
            entity.Property(e => e.GststampDuty)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTStampDuty");
            entity.Property(e => e.MaxClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgNormal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgOther).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SstbrokerageFee)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SSTBrokerageFee");
            entity.Property(e => e.SstclearingFee)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SSTClearingFee");
            entity.Property(e => e.SststampDuty)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SSTStampDuty");
            entity.Property(e => e.StampDutyMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyVal).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MstTrxnCost20190124>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstTrxnCost_20190124");

            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GstbrokerageFee)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTBrokerageFee");
            entity.Property(e => e.GstclearingFee)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("GSTClearingFee");
            entity.Property(e => e.GststampDuty)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTStampDuty");
            entity.Property(e => e.MaxClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgNormal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgOther).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyVal).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MstTrxnCostAcc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstTrxnCostAcc");

            entity.Property(e => e.AccountName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GstbrokerageFee)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTBrokerageFee");
            entity.Property(e => e.GstclearingFee)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("GSTClearingFee");
            entity.Property(e => e.GststampDuty)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GSTStampDuty");
            entity.Property(e => e.MaxClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgNormal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBrkgOther).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SstbrokerageFee)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SSTBrokerageFee");
            entity.Property(e => e.SstclearingFee)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SSTClearingFee");
            entity.Property(e => e.SststampDuty)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SSTStampDuty");
            entity.Property(e => e.StampDutyMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StampDutyVal).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<MstTrxnCostBrkgRate>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("MstTrxnCostBrkgRate");

            entity.Property(e => e.SeqNo).ValueGeneratedNever();
            entity.Property(e => e.AmtFrom).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmtTo).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<MstUsrExp>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.CtrlType).HasDefaultValueSql("('2')");
            entity.Property(e => e.CtrlTypeEcos)
                .HasDefaultValueSql("('2')")
                .HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.UsrBuyBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyEcosbidLmtHgh).HasColumnName("UsrBuyECOSBidLmtHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtLwr).HasColumnName("UsrBuyECOSBidLmtLwr");
            entity.Property(e => e.UsrBuyEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctLwr");
            entity.Property(e => e.UsrBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrDbtoverride).HasColumnName("UsrDBTOverride");
            entity.Property(e => e.UsrEcosbidLmtOddCheck).HasColumnName("UsrECOSBidLmtOddCheck");
            entity.Property(e => e.UsrExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.UsrExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsCheckIdss).HasColumnName("UsrExpsCheckIDSS");
            entity.Property(e => e.UsrExpsCheckIdssgross).HasColumnName("UsrExpsCheckIDSSGross");
            entity.Property(e => e.UsrExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSAmt");
            entity.Property(e => e.UsrExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSAmtTopUp");
            entity.Property(e => e.UsrExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSDayOrder");
            entity.Property(e => e.UsrExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossAmt");
            entity.Property(e => e.UsrExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.UsrExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossDayOrder");
            entity.Property(e => e.UsrExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.UsrExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSPrevDayOrder");
            entity.Property(e => e.UsrExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsWithLimit).HasDefaultValueSql("('1')");
            entity.Property(e => e.UsrRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrSellBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellEcosbidLmtHgh).HasColumnName("UsrSellECOSBidLmtHgh");
            entity.Property(e => e.UsrSellEcosbidLmtLwr).HasColumnName("UsrSellECOSBidLmtLwr");
            entity.Property(e => e.UsrSellEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctHgh");
            entity.Property(e => e.UsrSellEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctLwr");
            entity.Property(e => e.UsrSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTdayAmend).HasColumnName("UsrTDayAmend");
        });

        modelBuilder.Entity<MstUsrExpsBak20221209>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MstUsrExps_bak20221209");

            entity.Property(e => e.CtrlTypeEcos).HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.UsrBuyBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyEcosbidLmtHgh).HasColumnName("UsrBuyECOSBidLmtHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtLwr).HasColumnName("UsrBuyECOSBidLmtLwr");
            entity.Property(e => e.UsrBuyEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctLwr");
            entity.Property(e => e.UsrBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrDbtoverride).HasColumnName("UsrDBTOverride");
            entity.Property(e => e.UsrEcosbidLmtOddCheck).HasColumnName("UsrECOSBidLmtOddCheck");
            entity.Property(e => e.UsrExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.UsrExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsCheckIdss).HasColumnName("UsrExpsCheckIDSS");
            entity.Property(e => e.UsrExpsCheckIdssgross).HasColumnName("UsrExpsCheckIDSSGross");
            entity.Property(e => e.UsrExpsIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSAmt");
            entity.Property(e => e.UsrExpsIdssamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSAmtTopUp");
            entity.Property(e => e.UsrExpsIdssdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSDayOrder");
            entity.Property(e => e.UsrExpsIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossAmt");
            entity.Property(e => e.UsrExpsIdssgrossAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossAmtTopUp");
            entity.Property(e => e.UsrExpsIdssgrossDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossDayOrder");
            entity.Property(e => e.UsrExpsIdssgrossPrevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSGrossPrevDayOrder");
            entity.Property(e => e.UsrExpsIdssprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrExpsIDSSPrevDayOrder");
            entity.Property(e => e.UsrExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrSellBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellEcosbidLmtHgh).HasColumnName("UsrSellECOSBidLmtHgh");
            entity.Property(e => e.UsrSellEcosbidLmtLwr).HasColumnName("UsrSellECOSBidLmtLwr");
            entity.Property(e => e.UsrSellEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctHgh");
            entity.Property(e => e.UsrSellEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctLwr");
            entity.Property(e => e.UsrSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTdayAmend).HasColumnName("UsrTDayAmend");
        });

        modelBuilder.Entity<MstUsrExpsNew>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("MstUsrExpsNew");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.CtrlType).HasDefaultValueSql("('2')");
            entity.Property(e => e.CtrlTypeEcos)
                .HasDefaultValueSql("('2')")
                .HasColumnName("CtrlTypeECOS");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UsrBuyBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrBuyEcosbidLmtHgh).HasColumnName("UsrBuyECOSBidLmtHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtLwr).HasColumnName("UsrBuyECOSBidLmtLwr");
            entity.Property(e => e.UsrBuyEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctHgh");
            entity.Property(e => e.UsrBuyEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrBuyECOSBidLmtPctLwr");
            entity.Property(e => e.UsrBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralCashValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralNonStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockMultiplier).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrCollateralStockValue).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrDbtoverride).HasColumnName("UsrDBTOverride");
            entity.Property(e => e.UsrEcosbidLmtOddCheck).HasColumnName("UsrECOSBidLmtOddCheck");
            entity.Property(e => e.UsrExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.UsrExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrSellBidLmtPctHgh).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellBidLmtPctLwr).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.UsrSellEcosbidLmtHgh).HasColumnName("UsrSellECOSBidLmtHgh");
            entity.Property(e => e.UsrSellEcosbidLmtLwr).HasColumnName("UsrSellECOSBidLmtLwr");
            entity.Property(e => e.UsrSellEcosbidLmtPctHgh)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctHgh");
            entity.Property(e => e.UsrSellEcosbidLmtPctLwr)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("UsrSellECOSBidLmtPctLwr");
            entity.Property(e => e.UsrSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTdayAmend).HasColumnName("UsrTDayAmend");
        });

        modelBuilder.Entity<MstUsrXchgExp>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.XchgCode });

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.UsrBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstUsrXchgExpsNew>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.XchgCode });

            entity.ToTable("MstUsrXchgExpsNew");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Percentage).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UsrBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrBuyTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrExpsRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrNettAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrNettPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrSellTrnxLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTradeRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MstXchg>(entity =>
        {
            entity.HasKey(e => e.XchgCode);

            entity.ToTable("MstXchg");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TradeUntilNextDay)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Mstcobrch20130816>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("mstcobrch_20130816");

            entity.Property(e => e.BrchGrpCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchAddr).HasMaxLength(250);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchDesc).HasMaxLength(40);
            entity.Property(e => e.CoBrchPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrcFeedSvrAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Mststk20190821>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("mststk_20190821");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ListingDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkIndexCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLowerLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkRefPrc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkShareIssue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkVolumeTraded)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MststkBk200203>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("mststk_bk200203");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MststktestBk200204>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("mststktest_bk200204");

            entity.Property(e => e.Currency)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Entitlement)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Idssind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IDSSInd");
            entity.Property(e => e.Idssvalue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IDSSValue");
            entity.Property(e => e.Idssvolume).HasColumnName("IDSSVolume");
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Isin)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("ISIN");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ListingDate).HasColumnType("datetime");
            entity.Property(e => e.Pn17gn3ind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PN17GN3Ind");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLowerLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkParValue).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkPucapt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("StkPUCapt");
            entity.Property(e => e.StkRefPrc).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.YearHigh).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.YearLow).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MyAccProcDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyAccProcDate");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ProcessType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyAccProcess>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyAccProcess");

            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<N2nclientTradeInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("N2NClientTradeInfo");

            entity.Property(e => e.BranchId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.ExeRefId)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("ExeRefID");
            entity.Property(e => e.MatchedPrice)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.MatchedQty)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NewOrderSubmission2023718>(entity =>
        {
            entity.HasKey(e => e.RowNumber).HasName("PK__NewOrder__AAAC09D8A50BF93A");

            entity.ToTable("NewOrderSubmission_2023718");

            entity.Property(e => e.ApplicationName).HasMaxLength(128);
            entity.Property(e => e.BinaryData).HasColumnType("image");
            entity.Property(e => e.ClientProcessId).HasColumnName("ClientProcessID");
            entity.Property(e => e.Cpu).HasColumnName("CPU");
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.NtuserName)
                .HasMaxLength(128)
                .HasColumnName("NTUserName");
            entity.Property(e => e.Spid).HasColumnName("SPID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TextData).HasColumnType("ntext");
        });

        modelBuilder.Entity<NewTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("new_table");

            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.ForceSuccess)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Force Success");
            entity.Property(e => e.ForceSuccessTime)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Force Success Time");
            entity.Property(e => e.Frequency)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.InputFilePath)
                .HasMaxLength(4000)
                .HasColumnName("Input File & Path");
            entity.Property(e => e.InputParameter)
                .HasMaxLength(255)
                .HasColumnName("Input Parameter");
            entity.Property(e => e.NextDay)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Next Day");
            entity.Property(e => e.OutputFile)
                .HasMaxLength(256)
                .HasColumnName("Output File");
            entity.Property(e => e.Phrase)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ProcessOnNonTradingDay)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Process On Non-Trading Day");
            entity.Property(e => e.ProcessProgram)
                .HasMaxLength(256)
                .HasColumnName("Process Program");
            entity.Property(e => e.StartTime)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Start Time");
            entity.Property(e => e.TaskCategory).HasColumnName("Task Category");
            entity.Property(e => e.TaskDependencyById)
                .IsUnicode(false)
                .HasColumnName("Task Dependency by ID");
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("Task ID");
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .HasColumnName("Task Name");
        });

        modelBuilder.Entity<NotificationSetting>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.DevId });

            entity.ToTable("NotificationSetting");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DevId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DevID");
            entity.Property(e => e.Ipo).HasColumnName("IPO");
        });

        modelBuilder.Entity<Off9PaymentPnl>(entity =>
        {
            entity.HasKey(e => new { e.BkCode, e.BkDesc, e.BkAcctCode });

            entity.ToTable("Off9PaymentPnl");

            entity.Property(e => e.BkCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BkDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BkAcctCode)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OmsusrSession>(entity =>
        {
            entity.HasKey(e => new { e.SvrId, e.SvrSource, e.UsrId, e.UsrSessionId });

            entity.ToTable("OMSUsrSession");

            entity.Property(e => e.SvrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SvrID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrSessionId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("UsrSessionID");
            entity.Property(e => e.LastUpdate).HasColumnType("datetime");
        });

        modelBuilder.Entity<On9EnqPolicy>(entity =>
        {
            entity.HasKey(e => new { e.On9EnqId, e.On9EnqSysType }).HasName("PK_On9EnqPolicy_1");

            entity.ToTable("On9EnqPolicy");

            entity.Property(e => e.On9EnqId).HasColumnName("On9EnqID");
            entity.Property(e => e.On9EnqAllowSelect).HasDefaultValue(true);
        });

        modelBuilder.Entity<On9EnqSetting>(entity =>
        {
            entity.HasKey(e => e.On9EnqId);

            entity.ToTable("On9EnqSetting");

            entity.Property(e => e.On9EnqId)
                .ValueGeneratedNever()
                .HasColumnName("On9EnqID");
            entity.Property(e => e.On9EnqDesc).HasMaxLength(50);
            entity.Property(e => e.On9EnqDescVn)
                .HasMaxLength(50)
                .HasColumnName("On9EnqDescVN");
            entity.Property(e => e.On9EnqRedirectUrl).HasMaxLength(500);
        });

        modelBuilder.Entity<OrdRejReason>(entity =>
        {
            entity.HasKey(e => e.OrdRejReason1);

            entity.ToTable("OrdRejReason");

            entity.Property(e => e.OrdRejReason1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("OrdRejReason");
            entity.Property(e => e.OrdRejReasonDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdStatus>(entity =>
        {
            entity.HasKey(e => e.OrdStatus1);

            entity.ToTable("OrdStatus");

            entity.Property(e => e.OrdStatus1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("OrdStatus");
            entity.Property(e => e.OrdStatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrdType>(entity =>
        {
            entity.HasKey(e => e.OrdType1).HasName("PK_OrderType");

            entity.ToTable("OrdType");

            entity.Property(e => e.OrdType1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("OrdType");
            entity.Property(e => e.OrdTypeDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderClOrdId>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.ClOrdId, e.XchgCode }).HasName("PK_OrderClOrdId_1");

            entity.ToTable("OrderClOrdId");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderClOrdId20141003>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OrderClOrdId_20141003");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderClOrdId20220325>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OrderClOrdId_20220325");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderClOrdIdEx>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.ClOrdId });

            entity.ToTable("OrderClOrdIdEx");

            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderConfirmEx>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.OrderNo });

            entity.ToTable("OrderConfirmEX");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalCoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SequenceNo).HasDefaultValueSql("('')");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Trsno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.UpliftedFlag).HasDefaultValue(0);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<OrderConfirmExhistory>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.OrderNo, e.TimestampFmt }).HasName("PK_OrderConfirmExHistory");

            entity.ToTable("OrderConfirmEXHistory");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalCoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SequenceNo).HasDefaultValueSql("('')");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Trsno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.UpliftedFlag).HasDefaultValue(0);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<OrderConfirmExstatus>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("OrderConfirmEXStatus");

            entity.Property(e => e.SequenceNo).HasDefaultValueSql("('')");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<OrderConfirmExstatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.StatusSeqNo, e.ClOrdId });

            entity.ToTable("OrderConfirmEXStatusHistory");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo).HasDefaultValueSql("('')");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<OrderConfirmExstatusHistorySumm>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.TimestampFmt, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("OrderConfirmEXStatusHistorySumm");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderConfirmExstatusHistorySummArchive>(entity =>
        {
            entity.HasKey(e => new { e.OrderNo, e.TimestampFmt, e.Timestamp, e.StatusSeqNo }).HasName("PK_OrderConfirmEXStatusHistorySumm_Arcv");

            entity.ToTable("OrderConfirmEXStatusHistorySumm_Archive");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderException>(entity =>
        {
            entity.HasKey(e => e.SequenceNo).IsClustered(false);

            entity.ToTable("OrderException");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExceedValue).HasColumnType("decimal(25, 2)");
            entity.Property(e => e.ExcpDate).HasColumnType("datetime");
            entity.Property(e => e.ExcpRemarks).HasMaxLength(255);
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<OrderExceptionHistory>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.TimestampFmt }).IsClustered(false);

            entity.ToTable("OrderExceptionHistory");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExceedValue).HasColumnType("decimal(25, 2)");
            entity.Property(e => e.ExcpDate).HasColumnType("datetime");
            entity.Property(e => e.ExcpRemarks).HasMaxLength(255);
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<OrderGroupDtl>(entity =>
        {
            entity.HasKey(e => new { e.GroupCode, e.UsrId });

            entity.ToTable("OrderGroupDtl");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<OrderMetadatum>(entity =>
        {
            entity.HasKey(e => e.OrderSeqNo).IsClustered(false);

            entity.Property(e => e.OrderSeqNo).ValueGeneratedNever();
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FixVer)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.Prefix)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PrevClOrdId)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SystemOrdId)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderPlaced>(entity =>
        {
            entity.HasKey(e => e.SequenceNo).IsClustered(false);

            entity.ToTable("OrderPlaced");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.BuyBckQty).HasDefaultValue(0);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdLinkId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClOrdLinkID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkAdjAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.Idssflag)
                .HasDefaultValue(false)
                .HasColumnName("IDSSFlag");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.PrevMatchedQty).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrivateOrder)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ShariahAccount).HasDefaultValue(0);
            entity.Property(e => e.StockBoard)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("C")
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<OrderPlacedGtd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OrderPlacedGTD");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderPlacedHistory>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.SequenceNo, e.TimestampFmt });

            entity.ToTable("OrderPlacedHistory");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdLinkId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClOrdLinkID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkAdjAmount).HasColumnType("decimal(17, 4)");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.PrevMatchedQty).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrivateOrder)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ShariahAccount).HasDefaultValue(0);
            entity.Property(e => e.StockBoard)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<OrderPlacedHistoryArchive>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.SequenceNo, e.TimestampFmt });

            entity.ToTable("OrderPlacedHistory_Archive");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdLinkId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClOrdLinkID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkAdjAmount).HasColumnType("decimal(17, 4)");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShariahAccount).HasDefaultValue(0);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderPlacedHistoryTest>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.SequenceNo, e.TimestampFmt });

            entity.ToTable("OrderPlacedHistoryTEST");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderPlacedTest>(entity =>
        {
            entity.HasKey(e => e.Timestamp).IsClustered(false);

            entity.ToTable("OrderPlacedTest");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 4)");
        });

        modelBuilder.Entity<OrderQueue>(entity =>
        {
            entity.HasKey(e => e.OrderSeqNo).IsClustered(false);

            entity.ToTable("OrderQueue");

            entity.Property(e => e.OrderSeqNo).ValueGeneratedNever();
            entity.Property(e => e.AmendStatus)
                .HasMaxLength(1)
                .HasDefaultValue("P");
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrivateOrder)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerEarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).HasDefaultValue(0);
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StockBoard)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderQueueDelIdss>(entity =>
        {
            entity.HasKey(e => new { e.OrderSeqNo, e.OrderDate }).IsClustered(false);

            entity.ToTable("OrderQueueDelIDSS");

            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.AmendStatus).HasMaxLength(1);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CancelOrderTime).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerEarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderQueueDelLog>(entity =>
        {
            entity.HasKey(e => e.OrderSeqNo).IsClustered(false);

            entity.ToTable("OrderQueueDelLog");

            entity.Property(e => e.OrderSeqNo).ValueGeneratedNever();
            entity.Property(e => e.AmendStatus)
                .HasMaxLength(1)
                .HasDefaultValue("P");
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo).HasDefaultValue(0);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).HasDefaultValue(0);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderQueueDelLogChgBrch>(entity =>
        {
            entity.HasKey(e => e.OrderSeqNo).IsClustered(false);

            entity.ToTable("OrderQueueDelLogChgBrch");

            entity.Property(e => e.OrderSeqNo).ValueGeneratedNever();
            entity.Property(e => e.AmendStatus).HasMaxLength(1);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerEarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderQueueHistory>(entity =>
        {
            entity.HasKey(e => new { e.OrderSeqNo, e.TimestampFmt }).IsClustered(false);

            entity.ToTable("OrderQueueHistory");

            entity.Property(e => e.AmendStatus).HasMaxLength(1);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PrivateOrder)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerEarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockBoard)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderRejected>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.SequenceNo });

            entity.ToTable("OrderRejected");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("C")
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderRejectedHistory>(entity =>
        {
            entity.HasKey(e => new { e.Timestamp, e.SequenceNo, e.TimestampFmt }).IsClustered(false);

            entity.ToTable("OrderRejectedHistory");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OriginalSeqNo).HasDefaultValue(0);
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.PreOpenFlag).HasDefaultValue(0);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("C")
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderStatus>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.Timestamp, e.StatusSeqNo }).IsClustered(false);

            entity.ToTable("OrderStatus");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<OrderStatusFlag>(entity =>
        {
            entity.HasKey(e => e.Status);

            entity.ToTable("OrderStatusFlag");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderStatusHistory>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.TimeStamp, e.StatusSeqNo, e.TimestampFmt });

            entity.ToTable("OrderStatusHistory");

            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<OrderStatusHistorySumm>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.TimestampFmt, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("OrderStatusHistorySumm");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderStatusHistorySumm1>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.TimestampFmt, e.Timestamp, e.StatusSeqNo });

            entity.ToTable("OrderStatusHistorySumm_1");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderStatusHistorySummArchive>(entity =>
        {
            entity.HasKey(e => new { e.SequenceNo, e.TimestampFmt, e.Timestamp, e.StatusSeqNo }).HasName("PK_OrderStatusHistorySumm_Arcv");

            entity.ToTable("OrderStatusHistorySumm_Archive");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Osbill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSBill");

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrgAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice).HasColumnType("numeric(20, 8)");
        });

        modelBuilder.Entity<OsbillHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSBillHistory");

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OrgAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice).HasColumnType("numeric(20, 8)");
        });

        modelBuilder.Entity<OsbillHistoryArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSBillHistory_Archive");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
        });

        modelBuilder.Entity<OsclntInfoBatch2>(entity =>
        {
            entity.HasKey(e => new { e.SClntCode, e.SCoBrchCode, e.SCurrency });

            entity.ToTable("OSClntInfoBatch2");

            entity.Property(e => e.SClntCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("sClntCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCurrency");
        });

        modelBuilder.Entity<OsdueSettlement>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode });

            entity.ToTable("OSDueSettlement");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
        });

        modelBuilder.Entity<OsdueSettlement2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSDueSettlement_2012");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
        });

        modelBuilder.Entity<OsdueSettlementHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSDueSettlementHistory");

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice).HasColumnType("numeric(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OsdueSettlementHistoryArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSDueSettlementHistory_Archive");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OsforcedSelling>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode }).HasName("PK_OSForcedSelling_1");

            entity.ToTable("OSForcedSelling");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
        });

        modelBuilder.Entity<OsforcedSelling2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSForcedSelling_2012");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(14, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(14, 8)");
        });

        modelBuilder.Entity<OsforcedSellingBak20241105>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSForcedSelling_bak20241105");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OsforcedSellingHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode, e.LastUpdateDate }).HasName("PK_OSForcedSelling_History");

            entity.ToTable("OSForcedSellingHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Osother>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode }).HasName("PK_[OSOthers");

            entity.ToTable("OSOthers");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
        });

        modelBuilder.Entity<OsothersHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode, e.LastUpdateDate }).HasName("PK_[OSOthersHistory");

            entity.ToTable("OSOthersHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
        });

        modelBuilder.Entity<OsrpurchaseContract>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode });

            entity.ToTable("OSRPurchaseContracts");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
        });

        modelBuilder.Entity<OsrpurchaseContractsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSRPurchaseContractsHistory");

            entity.Property(e => e.Brokerage).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("numeric(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("numeric(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.StampDuty).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.UnitPrice).HasColumnType("numeric(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OsrpurchaseContractsHistoryArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSRPurchaseContractsHistory_Archive");

            entity.Property(e => e.Brokerage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClearingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(34)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osinterest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSInterest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StampDuty).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OsrsalesContract>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode });

            entity.ToTable("OSRSalesContracts");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(14, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(14, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
        });

        modelBuilder.Entity<OsrsalesContractsHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode, e.LastUpdateDate });

            entity.ToTable("OSRSalesContractsHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(14, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(14, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OssalesProceedsDue>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode });

            entity.ToTable("OSSalesProceedsDue");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValue("MYR");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
        });

        modelBuilder.Entity<OssalesProceedsDueHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.ContractNo, e.TradeDate, e.CoBrchCode, e.LastUpdateDate });

            entity.ToTable("OSSalesProceedsDueHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Dffee)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DFFee");
            entity.Property(e => e.DocumentType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.OrgAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrgQty).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SettleCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SettleDate).HasColumnType("smalldatetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeCcy)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatchDataTable20140115>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.UsrName, e.PatchUsrName });

            entity.ToTable("PatchDataTable_20140115");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.UsrName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PatchUsrName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PatchUserInfo>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.UsrName });

            entity.ToTable("PatchUserInfo");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrName).HasMaxLength(50);
            entity.Property(e => e.PatchUsrName).HasMaxLength(50);
        });

        modelBuilder.Entity<PaymentContract>(entity =>
        {
            entity.HasKey(e => new { e.PaymentRefNo, e.ContractNo });

            entity.ToTable("PaymentContract");

            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DepositType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PayAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("F - Full Payment  \r\nP - Partially Payment");
            entity.Property(e => e.PayInterest).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtAmtByTrust).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.UpdateBosflag)
                .IsRequired()
                .HasDefaultValueSql("('')")
                .HasColumnName("UpdateBOSFlag");
        });

        modelBuilder.Entity<PaymentContractArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentContract_Archive");

            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PymtAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentRecon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentRecon");

            entity.Property(e => e.Amt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankRef)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.CompanyId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CompanyID");
            entity.Property(e => e.EffectDate).HasColumnType("datetime");
            entity.Property(e => e.MbbacctName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MBBAcctName");
            entity.Property(e => e.MbbacctNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MBBAcctNo");
            entity.Property(e => e.MbbbrchCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("MBBBrchCode");
            entity.Property(e => e.MbbclntCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MBBClntCode");
            entity.Property(e => e.MbbmultiCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("MBBMultiCode");
            entity.Property(e => e.Mbbsource)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("MBBSource");
            entity.Property(e => e.MbbtellerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MBBTellerID");
            entity.Property(e => e.MbbtransCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("MBBTransCode");
            entity.Property(e => e.MbbtransDesc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MBBTransDesc");
            entity.Property(e => e.PayType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentReconArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentRecon_Archive");

            entity.Property(e => e.Amt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BankRef)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.CompanyId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CompanyID");
            entity.Property(e => e.EffectDate).HasColumnType("datetime");
            entity.Property(e => e.MbbacctNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("MBBAcctNo");
            entity.Property(e => e.MbbbrchCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("MBBBrchCode");
            entity.Property(e => e.MbbclntCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MBBClntCode");
            entity.Property(e => e.MbbmultiCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("MBBMultiCode");
            entity.Property(e => e.Mbbsource)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("MBBSource");
            entity.Property(e => e.MbbtransCode)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("MBBTransCode");
            entity.Property(e => e.MbbtransDesc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MBBTransDesc");
            entity.Property(e => e.PayType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentRefNo>(entity =>
        {
            entity.HasKey(e => e.PaymentRefNo1).HasName("PK_PaymentRefNo_1");

            entity.ToTable("PaymentRefNo");

            entity.Property(e => e.PaymentRefNo1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PaymentRefNo");
            entity.Property(e => e.AddRefNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ChannelId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CustId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CustID");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.PayeeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentAmtByTrust).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PaymentBankBranch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ReqAmount).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.Request)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.RetUsrName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SReturnBankRef)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sReturnBankRef");
            entity.Property(e => e.SettlementStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("transDate");
            entity.Property(e => e.TransTime)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("transTime");
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TrxnDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<PaymentRefNoArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentRefNo_Archive");

            entity.Property(e => e.AddRefNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CustId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CustID");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ReqAmount).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.Request)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("transDate");
            entity.Property(e => e.TrnxRefNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentRefNoException>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentRefNoException");

            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentRefNoExceptionArchive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentRefNoException_Archive");

            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PaymentStatus");

            entity.Property(e => e.AddRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MerchantID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PfclntActSum>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.ToTable("PFClntActSum");

            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.AccountType).HasMaxLength(2);
            entity.Property(e => e.ApproveMof)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ApproveMOF");
            entity.Property(e => e.CashBal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrInterestrate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentMof)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CurrentMOF");
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .HasColumnName("DealerID");
            entity.Property(e => e.DtLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdate");
            entity.Property(e => e.ForceSellRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MrgnCallRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OpenLimitBal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Osbalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSBalance");
            entity.Property(e => e.OverdueAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SellDown).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TopUpCase).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TopUpShare).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TtlColCash).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.WithdrawalRatio).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PfclntActSumHistory>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.RecDate });

            entity.ToTable("PFClntActSumHistory");

            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.RecDate).HasColumnType("datetime");
            entity.Property(e => e.AccountType).HasMaxLength(2);
            entity.Property(e => e.ApproveMof)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ApproveMOF");
            entity.Property(e => e.CashBal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreditLimit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrInterestrate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentMof)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CurrentMOF");
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .HasColumnName("DealerID");
            entity.Property(e => e.DtLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdate");
            entity.Property(e => e.ForceSellRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Interest).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MrgnCallRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OpenLimitBal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Osbalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSBalance");
            entity.Property(e => e.OverdueAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SellDown).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TopUpCase).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TopUpShare).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TtlColCash).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.WithdrawalRatio).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PfclntInfo>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode });

            entity.ToTable("PFClntInfo");

            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CashBal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DtLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdate");
            entity.Property(e => e.InitCapital).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PortfolioClientTradeInfo>(entity =>
        {
            entity.HasKey(e => new { e.TransSeqNo, e.MatchedTime });

            entity.ToTable("PortfolioClientTradeInfo");

            entity.Property(e => e.MatchedTime).HasColumnType("datetime");
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientCdsno).HasColumnName("ClientCDSNo");
            entity.Property(e => e.ClientNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(7, 3)");
            entity.Property(e => e.Processed).HasDefaultValue((byte)0);
            entity.Property(e => e.SettlementCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
        });

        modelBuilder.Entity<PortfolioRealSummary>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.BranchCode, e.StockCode, e.XchgCode });

            entity.ToTable("PortfolioRealSummary");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AvgBuyPrice)
                .HasComputedColumnSql("(case when [TotalBuyQty]<>(0) then CONVERT([decimal](20,4),[TotalBuyAmt]/[TotalBuyQty],(0)) else (0.0) end)", false)
                .HasColumnType("decimal(20, 4)");
            entity.Property(e => e.AvgSellPrice)
                .HasComputedColumnSql("(case when [TotalSellQty]<>(0) then CONVERT([decimal](20,4),[TotalSellAmt]/[TotalSellQty],(0)) else (0.0) end)", false)
                .HasColumnType("decimal(20, 4)");
            entity.Property(e => e.BalanceQty).HasDefaultValue(0);
            entity.Property(e => e.CapPrice).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.GrossBuyAmt)
                .HasComputedColumnSql("(case when [BalanceQty]>(0) then CONVERT([decimal](18,3),[BalanceQty]*[VWAvgBuyPrice],(0)) else (0.0) end)", false)
                .HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGain).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGainIncDiv)
                .HasComputedColumnSql("([RealizedGain]+[Dividend])", false)
                .HasColumnType("decimal(19, 3)");
            entity.Property(e => e.TotalBuyAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalBuyOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.VwavgBuyPrice)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPrice");
            entity.Property(e => e.VwavgBuyPriceIncOvh)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPriceIncOvh");
        });

        modelBuilder.Entity<PortfolioRealSummary20240220>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PortfolioRealSummary_20240220");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.AvgSellPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CapPrice).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.GrossBuyAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGain).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGainIncDiv).HasColumnType("decimal(19, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TotalBuyAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalBuyOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.VwavgBuyPrice)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPrice");
            entity.Property(e => e.VwavgBuyPriceIncOvh)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPriceIncOvh");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioRealSummary202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PortfolioRealSummary_20240621_1438");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.AvgSellPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CapPrice).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Dividend).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.GrossBuyAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGain).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.RealizedGainIncDiv).HasColumnType("decimal(19, 3)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TotalBuyAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalBuyOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellAmt).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalSellOverhead).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.VwavgBuyPrice)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPrice");
            entity.Property(e => e.VwavgBuyPriceIncOvh)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("VWAvgBuyPriceIncOvh");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioSetting>(entity =>
        {
            entity.HasKey(e => e.PfSetId);

            entity.ToTable("PortfolioSetting");

            entity.Property(e => e.PfSetId)
                .ValueGeneratedNever()
                .HasColumnName("PfSetID");
            entity.Property(e => e.PfSetDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PfSetValue)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PortfolioSettingBrch>(entity =>
        {
            entity.HasKey(e => new { e.CompanyCode, e.PfSetId });

            entity.ToTable("PortfolioSettingBrch");

            entity.Property(e => e.CompanyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PfSetId).HasColumnName("PfSetID");
            entity.Property(e => e.PfSetValue)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Portfoliorealtransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("portfoliorealtransactions");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(21, 4)");
            entity.Property(e => e.TransactionCost).HasColumnType("numeric(23, 5)");
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PriceAlert>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.ClntCode, e.AlertId });

            entity.ToTable("PriceAlert");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AlertId).HasColumnName("AlertID");
            entity.Property(e => e.AlertStatus)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ConditionType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ConditionValue).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastTriggerTime).HasColumnType("datetime");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
        });

        modelBuilder.Entity<ProcessDate>(entity =>
        {
            entity.HasKey(e => e.ProcessDate1);

            entity.ToTable("ProcessDate");

            entity.Property(e => e.ProcessDate1)
                .HasColumnType("datetime")
                .HasColumnName("ProcessDate");
        });

        modelBuilder.Entity<ProcessPymtReconExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProcessPymtReconExcp");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContDate).HasColumnType("datetime");
            entity.Property(e => e.ContNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DbexcpCode).HasColumnName("DBExcpCode");
            entity.Property(e => e.ExcpDate).HasColumnType("datetime");
            entity.Property(e => e.ExcpDetail)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PymtRefNo)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProdCodeList>(entity =>
        {
            entity.HasKey(e => e.ProdCode).HasName("PK_ProductCodeList");

            entity.ToTable("ProdCodeList");

            entity.Property(e => e.ProdCode).ValueGeneratedNever();
            entity.Property(e => e.ProdDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PwdGen>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.UsrId });

            entity.ToTable("PwdGen");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrPwd)
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.UsrPwdChngDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<PwdGenHenry0>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PwdGen_HENRY0");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwdChngDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PwdGenLog>(entity =>
        {
            entity.HasKey(e => new { e.LogDate, e.UsrId, e.UsrPwdChngDate }).HasName("PK_PwdGenLog_1");

            entity.ToTable("PwdGenLog");

            entity.Property(e => e.LogDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrPwdChngDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrPwd)
                .HasMaxLength(100)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<PwdGenLogHenry0>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PwdGenLog_HENRY0");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwdChngDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<PwdQuestionList>(entity =>
        {
            entity.HasKey(e => e.PwdQuestionId).HasName("PK_PwdQuesionList");

            entity.ToTable("PwdQuestionList");

            entity.Property(e => e.PwdQuestionId)
                .ValueGeneratedNever()
                .HasColumnName("PwdQuestionID");
            entity.Property(e => e.PwdQuestion)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PwdQuestionListEcm>(entity =>
        {
            entity.HasKey(e => e.PwdQuestionId).HasName("PK_PwdQuesionListECM");

            entity.ToTable("PwdQuestionListECM");

            entity.Property(e => e.PwdQuestionId)
                .ValueGeneratedNever()
                .HasColumnName("PwdQuestionID");
            entity.Property(e => e.PwdQuestion)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PymtRefNo>(entity =>
        {
            entity.HasKey(e => e.PaymentRefNo);

            entity.ToTable("PymtRefNo");

            entity.Property(e => e.PaymentRefNo).ValueGeneratedNever();
        });

        modelBuilder.Entity<PymtRefUnknownEmailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PymtRefUnknownEmailLog");

            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
        });

        modelBuilder.Entity<ResIdstkCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ResIDStkCode");

            entity.Property(e => e.ResId).HasColumnName("ResID");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Research>(entity =>
        {
            entity.HasKey(e => e.ResId);

            entity.ToTable("Research");

            entity.Property(e => e.ResId).HasColumnName("ResID");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.PublishTime).HasColumnType("datetime");
            entity.Property(e => e.ResAnalyst)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ResCatId).HasColumnName("ResCatID");
            entity.Property(e => e.ResDate).HasColumnType("datetime");
            entity.Property(e => e.ResFileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ResStatus).HasDefaultValue(0);
            entity.Property(e => e.ResTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ResearchAnalyst>(entity =>
        {
            entity.HasKey(e => e.AnalystCode);

            entity.ToTable("ResearchAnalyst");

            entity.Property(e => e.AnalystCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AnalystDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AnalystName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ResearchCategory>(entity =>
        {
            entity.HasKey(e => new { e.CategoryId, e.CategoryCode });

            entity.ToTable("ResearchCategory");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CategoryName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RptOptGrp>(entity =>
        {
            entity.HasKey(e => e.RptGrpId);

            entity.ToTable("RptOptGrp");

            entity.Property(e => e.RptGrpId)
                .HasMaxLength(15)
                .HasComment("D - Daily; W - Weekly; M - Monthly; Q - Quaterly; H - Half-Yearly; Y - Yearly;")
                .HasColumnName("RptGrpID");
            entity.Property(e => e.RptFolderPath).HasMaxLength(500);
            entity.Property(e => e.RptGrpDesc).HasMaxLength(255);
        });

        modelBuilder.Entity<RptOptLst>(entity =>
        {
            entity.HasKey(e => new { e.RptGrpId, e.RptId }).HasName("PK_RptOptLst_1");

            entity.ToTable("RptOptLst");

            entity.Property(e => e.RptGrpId)
                .HasMaxLength(15)
                .HasColumnName("RptGrpID");
            entity.Property(e => e.RptId)
                .HasMaxLength(15)
                .HasColumnName("RptID");
            entity.Property(e => e.RptDesc).HasMaxLength(255);
            entity.Property(e => e.RptFileName).HasMaxLength(255);
        });

        modelBuilder.Entity<RsaDeviceToken>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("RSA_DeviceToken");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DeviceToken)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<RsaSetting>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RSA_Setting");

            entity.Property(e => e.EnableMobileRsa).HasColumnName("EnableMobileRSA");
            entity.Property(e => e.EnableRsa).HasColumnName("EnableRSA");
            entity.Property(e => e.WebProxy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WebProxyDomain)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebProxyLogin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebProxyPassword)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RsaUsrType>(entity =>
        {
            entity.HasKey(e => e.UsrType);

            entity.ToTable("RSA_UsrType");

            entity.Property(e => e.UsrType).ValueGeneratedNever();
        });

        modelBuilder.Entity<ScnFundDatum>(entity =>
        {
            entity.HasKey(e => new { e.StkCode, e.XchgCode });

            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("XChgCode");
            entity.Property(e => e.DAvgEqtHld)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAvgEqtHld");
            entity.Property(e => e.DBasicEps)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dBasicEPS");
            entity.Property(e => e.DBeta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dBeta");
            entity.Property(e => e.DCurRatio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dCurRatio");
            entity.Property(e => e.DDebtCvg)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dDebtCvg");
            entity.Property(e => e.DDvdnPayoutRatio)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("dDvdnPayoutRatio");
            entity.Property(e => e.DEbitda)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dEBITDA");
            entity.Property(e => e.DEbitdamrgn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dEBITDAMrgn");
            entity.Property(e => e.DEvtoEbitda)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dEVToEBITDA");
            entity.Property(e => e.DEvtoFcf)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dEVToFCF");
            entity.Property(e => e.DFreeCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dFreeCashFlow");
            entity.Property(e => e.DFreeCashFlowDebt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dFreeCashFlowDebt");
            entity.Property(e => e.DGearingRatio)
                .HasColumnType("decimal(38, 19)")
                .HasColumnName("dGearingRatio");
            entity.Property(e => e.DGrossDvdnPerShare)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("dGrossDvdnPerShare");
            entity.Property(e => e.DGrossDvdnYield)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("dGrossDvdnYield");
            entity.Property(e => e.DGrossProfitMrgn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dGrossProfitMrgn");
            entity.Property(e => e.DIntCvg)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dIntCvg");
            entity.Property(e => e.DInventoryCycle)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dInventoryCycle");
            entity.Property(e => e.DMktCap)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dMktCap");
            entity.Property(e => e.DMktCapEv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dMktCapEV");
            entity.Property(e => e.DNetAssetsPerShare)
                .HasColumnType("decimal(38, 22)")
                .HasColumnName("dNetAssetsPerShare");
            entity.Property(e => e.DNetCashPerShare)
                .HasColumnType("decimal(38, 16)")
                .HasColumnName("dNetCashPerShare");
            entity.Property(e => e.DNetDebtCvg)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dNetDebtCvg");
            entity.Property(e => e.DNetDvdnPerShare)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("dNetDvdnPerShare");
            entity.Property(e => e.DNetDvdnYield)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("dNetDvdnYield");
            entity.Property(e => e.DNetOprCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dNetOprCashFlow");
            entity.Property(e => e.DNetProfitMrgn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dNetProfitMrgn");
            entity.Property(e => e.DNetTgbAssetPerShare)
                .HasColumnType("decimal(38, 22)")
                .HasColumnName("dNetTgbAssetPerShare");
            entity.Property(e => e.DOprCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dOprCashFlow");
            entity.Property(e => e.DPeratio)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPERatio");
            entity.Property(e => e.DPriceToBook)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPriceToBook");
            entity.Property(e => e.DPriceToEbitda)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPriceToEBITDA");
            entity.Property(e => e.DPriceToFcf)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPriceToFCF");
            entity.Property(e => e.DPriceToOprCashFlow)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPriceToOprCashFlow");
            entity.Property(e => e.DPriceToRevenue)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dPriceToRevenue");
            entity.Property(e => e.DProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dProfit");
            entity.Property(e => e.DProfitAttTo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dProfitAttTo");
            entity.Property(e => e.DQuickRatio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dQuickRatio");
            entity.Property(e => e.DRetOnAssets)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("dRetOnAssets");
            entity.Property(e => e.DRetOnCapEmply)
                .HasColumnType("decimal(38, 16)")
                .HasColumnName("dRetOnCapEmply");
            entity.Property(e => e.DRetOnShareholderEqt)
                .HasColumnType("decimal(38, 16)")
                .HasColumnName("dRetOnShareholderEqt");
            entity.Property(e => e.DRevenue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dRevenue");
            entity.Property(e => e.DTrdPayblsCycle)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrdPayblsCycle");
            entity.Property(e => e.DTrdRcvblsCycle)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrdRcvblsCycle");
            entity.Property(e => e.DYoyebitda)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dYOYEBITDA");
            entity.Property(e => e.DYoyfreeCashFlow)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dYOYFreeCashFlow");
            entity.Property(e => e.DYoygrossProfit)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dYOYGrossProfit");
            entity.Property(e => e.DYoyrevenue)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dYOYRevenue");
        });

        modelBuilder.Entity<Scotr>(entity =>
        {
            entity.HasKey(e => new { e.SellerCdsno, e.Trsno, e.BuyerCdsno, e.OrderNo }).HasName("PK_SCOTRS_1");

            entity.ToTable("SCOTRS");

            entity.Property(e => e.SellerCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SellerCDSNo");
            entity.Property(e => e.Trsno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.BuyerCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("BuyerCDSNo");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BuyerCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.BuyerCoCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ErrMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.LotCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.SellerCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SellerCoCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ShortSell)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Side)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
        });

        modelBuilder.Entity<Scotrshistory>(entity =>
        {
            entity.HasKey(e => new { e.CreateDate, e.SellerCdsno, e.Trsno, e.BuyerCdsno, e.OrderNo }).HasName("PK_SCOTRSHistory_1");

            entity.ToTable("SCOTRSHistory");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.SellerCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SellerCDSNo");
            entity.Property(e => e.Trsno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.BuyerCdsno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("BuyerCDSNo");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BuyerCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.BuyerCoCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ErrMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.LotCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.SellerCoBrchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SellerCoCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ShortSell)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Side)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
        });

        modelBuilder.Entity<Scotrssumm>(entity =>
        {
            entity.HasKey(e => new { e.CoBrchCode, e.ClntCode, e.OrderNo, e.Trsno });

            entity.ToTable("SCOTRSSumm");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Trsno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ErrMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.Side)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
        });

        modelBuilder.Entity<ScotrssummHistory>(entity =>
        {
            entity.HasKey(e => new { e.CreateDate, e.CoBrchCode, e.ClntCode, e.OrderNo, e.Trsno });

            entity.ToTable("SCOTRSSummHistory");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.Trsno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TRSNo");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ErrMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.Side)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
        });

        modelBuilder.Entity<ScreenerCriteriaGrp>(entity =>
        {
            entity.HasKey(e => e.CriteriaGrpId);

            entity.ToTable("ScreenerCriteriaGrp");

            entity.Property(e => e.CriteriaGrpId)
                .ValueGeneratedNever()
                .HasColumnName("CriteriaGrpID");
            entity.Property(e => e.CriteriaGrpBgimg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CriteriaGrpBGImg");
            entity.Property(e => e.CriteriaGrpDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaGrpTextClass)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ScreenerCriterion>(entity =>
        {
            entity.HasKey(e => new { e.CriteriaGrpId, e.CriteriaId });

            entity.Property(e => e.CriteriaGrpId).HasColumnName("CriteriaGrpID");
            entity.Property(e => e.CriteriaId).HasColumnName("CriteriaID");
            entity.Property(e => e.CriteriaActvChartImg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaColumnName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaInActvChartImg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaMinVal).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CriteriaPreCondition)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaScale).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.CriteriaShortDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CriteriaValFormat)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ScreenerGrp>(entity =>
        {
            entity.ToTable("ScreenerGrp");

            entity.Property(e => e.ScreenerGrpId)
                .ValueGeneratedNever()
                .HasColumnName("ScreenerGrpID");
            entity.Property(e => e.ScreenerGrpDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ScreenerList>(entity =>
        {
            entity.HasKey(e => new { e.ScreenerGrpId, e.ScreenerId });

            entity.ToTable("ScreenerList");

            entity.Property(e => e.ScreenerGrpId).HasColumnName("ScreenerGrpID");
            entity.Property(e => e.ScreenerId).HasColumnName("ScreenerID");
            entity.Property(e => e.IAceMrkt)
                .HasDefaultValue(0)
                .HasColumnName("iAceMrkt");
            entity.Property(e => e.IMainMrkt)
                .HasDefaultValue(0)
                .HasColumnName("iMainMrkt");
            entity.Property(e => e.IWholeMrkt)
                .HasDefaultValue(0)
                .HasColumnName("iWholeMrkt");
            entity.Property(e => e.PreCondition)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreenerDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Set5>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SET 5");

            entity.Property(e => e.Currency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkClosePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkDeliveryBasis)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkIsSyariah)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkLowerLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkRefPrc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkShareIssue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StkStat)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StkUpperLmtPrice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShareConsolidate>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.StartDate });

            entity.ToTable("ShareConsolidate");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ShareConsolidationRecon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ShareConsolidationRecon");

            entity.Property(e => e.AccQualifier1)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AccQualifier2)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.BookClsDtEntDt).HasColumnType("datetime");
            entity.Property(e => e.CorpExerType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DepositorCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DepositorCDSNo");
            entity.Property(e => e.DepositorNm)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DepositorNric)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DepositorNRIC");
            entity.Property(e => e.ExDate).HasColumnType("datetime");
            entity.Property(e => e.ListDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NewStkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.NewStkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NewStkSName");
            entity.Property(e => e.Ratio)
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShareInfo>(entity =>
        {
            entity.HasKey(e => new { e.BranchCode, e.ClientCode, e.StockCode, e.XchgCode }).HasName("PK_ShareInfo_1");

            entity.ToTable("ShareInfo");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("BM")
                .IsFixedLength();
            entity.Property(e => e.IdssbuyBackQty)
                .HasDefaultValue(0)
                .HasColumnName("IDSSBuyBackQty");
            entity.Property(e => e.IdsssoldQty)
                .HasDefaultValue(0)
                .HasColumnName("IDSSSoldQty");
            entity.Property(e => e.LastUpdateDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.MaxWithdrawalQty).HasDefaultValue(0);
            entity.Property(e => e.OpenFreeBalance).HasDefaultValue(0);
            entity.Property(e => e.OpenPurchaseQty).HasDefaultValue(0);
            entity.Property(e => e.OpenSalesQty).HasDefaultValue(0);
            entity.Property(e => e.TodayDbtearmarkBuyQty)
                .HasDefaultValue(0)
                .HasColumnName("TodayDBTEarmarkBuyQty");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedQty).HasDefaultValue(0);
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchaseQty).HasDefaultValue(0);
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldQty).HasDefaultValue(0);
            entity.Property(e => e.TodayTransferOutQty).HasDefaultValue(0);
        });

        modelBuilder.Entity<ShareInfo20240220>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ShareInfo_20240220");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdssbuyBackQty).HasColumnName("IDSSBuyBackQty");
            entity.Property(e => e.IdsssoldQty).HasColumnName("IDSSSoldQty");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TodayDbtearmarkBuyQty).HasColumnName("TodayDBTEarmarkBuyQty");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ShareInfo202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ShareInfo_20240621_1438");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdssbuyBackQty).HasColumnName("IDSSBuyBackQty");
            entity.Property(e => e.IdsssoldQty).HasColumnName("IDSSSoldQty");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TodayDbtearmarkBuyQty).HasColumnName("TodayDBTEarmarkBuyQty");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ShareInfoRemoved>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ShareInfo_Removed");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IdssbuyBackQty).HasColumnName("IDSSBuyBackQty");
            entity.Property(e => e.IdsssoldQty).HasColumnName("IDSSSoldQty");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.RemovedDate).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TodayDbtearmarkBuyQty).HasColumnName("TodayDBTEarmarkBuyQty");
            entity.Property(e => e.TodayEarmarkedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedSellAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayPurchasedAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ShareInfoStk>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.CoCode });

            entity.ToTable("ShareInfoStk");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedQty).HasDefaultValue(0);
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasComputedColumnSql("(case when [TodayEarmarkedAmt] IS NULL then (0) else [TodayEarmarkedAmt] end-case when [TodaySoldAmt] IS NULL then (0) else [TodaySoldAmt] end)", false)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.TodayPurchaseQty).HasDefaultValue(0);
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldQty).HasDefaultValue(0);
        });

        modelBuilder.Entity<ShareInfoStkBrch>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.CoCode, e.CoBrchCode });

            entity.ToTable("ShareInfoStkBrch");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IdssgrossTodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedAmt");
            entity.Property(e => e.IdssgrossTodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayEarmarkedSellAmt");
            entity.Property(e => e.IdssgrossTodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodayPurchasedAmt");
            entity.Property(e => e.IdssgrossTodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSGrossTodaySoldAmt");
            entity.Property(e => e.IdsstodayEarmarkedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedAmt");
            entity.Property(e => e.IdsstodayEarmarkedSellAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayEarmarkedSellAmt");
            entity.Property(e => e.IdsstodayPurchasedAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodayPurchasedAmt");
            entity.Property(e => e.IdsstodaySoldAmt)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("IDSSTodaySoldAmt");
            entity.Property(e => e.TodayEarmarkedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayEarmarkedQty).HasDefaultValue(0);
            entity.Property(e => e.TodayEarmarkedSellAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodayNettAmt)
                .HasComputedColumnSql("(case when [TodayEarmarkedAmt] IS NULL then (0) else [TodayEarmarkedAmt] end-case when [TodaySoldAmt] IS NULL then (0) else [TodaySoldAmt] end)", false)
                .HasColumnType("decimal(16, 2)");
            entity.Property(e => e.TodayPurchaseQty).HasDefaultValue(0);
            entity.Property(e => e.TodayPurchasedAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldAmt)
                .HasDefaultValue(0.0m)
                .HasColumnType("decimal(15, 2)");
            entity.Property(e => e.TodaySoldQty).HasDefaultValue(0);
        });

        modelBuilder.Entity<SiteMenu>(entity =>
        {
            entity.HasKey(e => new { e.NodeSystemType, e.NodeGrpId, e.NodeId, e.NodeProdCode });

            entity.ToTable("SiteMenu");

            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeMenuShow).HasDefaultValue(true);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodePolicyShow).HasDefaultValue(true);
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenu202201281859>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteMenu_20220128_1859");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenu20241023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteMenu_20241023");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenuBak20240408>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteMenu_bak20240408");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenuBak20240920>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteMenu_bak20240920");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenuBck>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteMenuBck");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SiteMenuGrp>(entity =>
        {
            entity.HasKey(e => new { e.NodeGrpSystemType, e.NodeGrpId });

            entity.ToTable("SiteMenuGrp");

            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeGrpActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpActiveTabUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpDesc).HasMaxLength(255);
            entity.Property(e => e.NodeGrpDescVn).HasMaxLength(255);
            entity.Property(e => e.NodeGrpInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpInActiveTabUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<Sitemenu20130704>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sitemenu_20130704");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<SmfupdateOrder>(entity =>
        {
            entity.HasKey(e => e.RecordNo).HasName("PK_SMFReleaseOrder");

            entity.ToTable("SMFUpdateOrder");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.OrderAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ProcessedFlag).HasDefaultValue(0);
            entity.Property(e => e.Retry).HasDefaultValue(0);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<SsokeyGen>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SSOKeyGen");

            entity.Property(e => e.GenDate).HasColumnType("datetime");
            entity.Property(e => e.SsoKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SSO_Key");
            entity.Property(e => e.SsoSite)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SSO_Site");
        });

        modelBuilder.Entity<StateList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StateList");

            entity.Property(e => e.StateCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StkCtrl>(entity =>
        {
            entity.HasKey(e => new { e.DataType, e.DataCode, e.CtrlType, e.CtrlCode });

            entity.ToTable("StkCtrl");

            entity.Property(e => e.DataType)
                .HasMaxLength(1)
                .HasComment("C - Company; B - Branch; P - Product; N - Client; ");
            entity.Property(e => e.DataCode).HasMaxLength(50);
            entity.Property(e => e.CtrlType)
                .HasMaxLength(1)
                .HasComment("X - Exchange; B - Board; S - Sector; T - Stock; ");
            entity.Property(e => e.CtrlCode).HasMaxLength(50);
            entity.Property(e => e.BrdCode).HasMaxLength(10);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.ClntType).HasMaxLength(5);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.CtrlStatus)
                .HasMaxLength(1)
                .HasComment("Y - Allow Both Buy & Sell; B - Suspend Buy; S - Suspend Sell; N - Suspend Both Buy & Sell; ");
            entity.Property(e => e.SectCode).HasMaxLength(10);
            entity.Property(e => e.StkCode).HasMaxLength(20);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode).HasMaxLength(10);
        });

        modelBuilder.Entity<StkCtrl20220303>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StkCtrl_20220303");

            entity.Property(e => e.BrdCode).HasMaxLength(10);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.ClntType).HasMaxLength(5);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.CtrlCode).HasMaxLength(50);
            entity.Property(e => e.CtrlStatus).HasMaxLength(1);
            entity.Property(e => e.CtrlType).HasMaxLength(1);
            entity.Property(e => e.DataCode).HasMaxLength(50);
            entity.Property(e => e.DataType).HasMaxLength(1);
            entity.Property(e => e.SectCode).HasMaxLength(10);
            entity.Property(e => e.StkCode).HasMaxLength(20);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode).HasMaxLength(10);
        });

        modelBuilder.Entity<StkEnt>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.StkCode, e.ExDate, e.LodgeDate });

            entity.ToTable("StkEnt");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.ExDate).HasColumnType("datetime");
            entity.Property(e => e.LodgeDate).HasColumnType("datetime");
            entity.Property(e => e.StkEntDesc)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StkIdea>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.XchgCode, e.StkCode, e.LogUsr });

            entity.ToTable("StkIdea");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValue("BM");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Boval)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BOVal");
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DateFrom).HasColumnType("datetime");
            entity.Property(e => e.DateTo).HasColumnType("datetime");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<StockFinancialInfo>(entity =>
        {
            entity.HasKey(e => e.StockCode);

            entity.ToTable("StockFinancialInfo");

            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Data)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StockMktFinancialInfo>(entity =>
        {
            entity.HasKey(e => new { e.Type, e.Sector });

            entity.ToTable("StockMktFinancialInfo");

            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Sector)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Data)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysLmtType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SysLmtType");

            entity.Property(e => e.SysLmtType1).HasColumnName("SysLmtType");
        });

        modelBuilder.Entity<TaskDependency>(entity =>
        {
            entity.HasKey(e => new { e.TaskId, e.TaskCat, e.Dependency });

            entity.ToTable("TaskDependency");

            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TaskDependency20150727>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_20150727");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskDependency20210621>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_20210621");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskDependency202404291349>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_20240429_1349");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskDependency202406250958>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_20240625_0958");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskDependencyKibbNewTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_KIBB_NewTasks");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskDependencyKibbNewTasks20210625>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskDependency_KIBB_NewTasks_20210625");

            entity.Property(e => e.Dependency)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency>(entity =>
        {
            entity.HasKey(e => new { e.TaskId, e.TaskCat, e.Frequency, e.Ref1, e.Ref2 });

            entity.ToTable("TaskFrequency");

            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TaskFrequency20150727>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20150727");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency20210621>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20210621");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202205171150>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20220517_1150");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202403261047>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20240326_1047");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202404031550>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20240403_1550");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202404291346>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20240429_1346");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202406250957>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20240625_0957");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequency202406281353>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_20240628_1353");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequencyKibbNewTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_KIBB_NewTasks");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskFrequencyKibbNewTasks20210625>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaskFrequency_KIBB_NewTasks_20210625");

            entity.Property(e => e.Frequency)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<TaskLog>(entity =>
        {
            entity.HasKey(e => new { e.LogTime, e.TaskCat, e.TaskId, e.Status, e.TaskDate });

            entity.ToTable("TaskLog");

            entity.Property(e => e.LogTime).HasColumnType("datetime");
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.Status)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TaskDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TaskStatusEntity>(entity =>
        {
            entity.HasKey(e => new { e.TaskCat, e.TaskId, e.TaskDate });

            entity.ToTable("TaskStatus");

            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TaskStatusLog>(entity =>
        {
            entity.HasKey(e => new { e.TaskCat, e.TaskId, e.TaskDate });

            entity.ToTable("TaskStatusLog");

            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TaskEndTime).HasColumnType("datetime");
            entity.Property(e => e.TaskStartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TempPayTran>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.SContent)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sContent");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SPaymentRef)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRef");
        });

        modelBuilder.Entity<TempShareInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempShareInfo");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.RecordType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempStkIndicator>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempStkIndicator");

            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.SContent)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sContent");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempStockInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempStockInfo");

            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.SContent)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("sContent");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TempTbl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempTbl");

            entity.Property(e => e.DTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmt");
            entity.Property(e => e.DTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmtEarmark");
            entity.Property(e => e.DtLastUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLastUpdateDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Test");

            entity.Property(e => e.Avgprice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("avgprice");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TimeInForce>(entity =>
        {
            entity.HasKey(e => e.TimeInForce1);

            entity.ToTable("TimeInForce");

            entity.Property(e => e.TimeInForce1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TimeInForce");
            entity.Property(e => e.TimeInForceDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpOetrd>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpOETrd");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientUserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConfirmFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdatedTime).HasColumnType("datetime");
            entity.Property(e => e.OrdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderTypeDesc)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StkClosePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpPortfolioBal>(entity =>
        {
            entity.HasKey(e => new { e.ClntCode, e.CoBrchCode, e.StkCode });

            entity.ToTable("tmpPortfolioBal");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tncaccept>(entity =>
        {
            entity.HasKey(e => new { e.DateTime, e.UsrId });

            entity.ToTable("TNCAccept");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.Accepted)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Icno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ICNo");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Module)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Tncmaint>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.Id });

            entity.ToTable("TNCMaint");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Compulsory)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Desc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.Version)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TraceMstStkUpdate>(entity =>
        {
            entity.ToTable("TraceMstStkUpdate");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ClntAppName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ClntHostName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ClntHostProcessId).HasColumnName("ClntHostProcessID");
            entity.Property(e => e.ClntIpaddr)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ClntIPAddr");
            entity.Property(e => e.RecInsertedDateTime).HasColumnType("datetime");
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkLastDonePrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.StkRefPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TradeSplit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TradeSplit");

            entity.Property(e => e.ApprovalAdminId)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.ApprovalTimestamp).HasColumnType("smalldatetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderSource)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginateClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ReceivedBranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SplitTimestamp).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TransMovement>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.CoBrchCode, e.Currency, e.TrxDateTime, e.PrinTrxNo, e.TrxRefNo, e.MvmSeqNo });

            entity.ToTable("TransMovement");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrxDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinTrxNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TrxRefNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ClntDlrCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Credit).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.Debit).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(10, 6)");
            entity.Property(e => e.ForeignAmt).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.OverdueInterest).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.Price).HasColumnType("decimal(14, 6)");
            entity.Property(e => e.PrinTrxType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TrxDate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TrxDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrxRefType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransMovementHistory>(entity =>
        {
            entity.HasKey(e => new { e.ClientCode, e.CoBrchCode, e.Currency, e.TrxDateTime, e.PrinTrxNo, e.TrxRefNo, e.MvmSeqNo, e.LastUpdateDate });

            entity.ToTable("TransMovementHistory");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrxDateTime).HasColumnType("datetime");
            entity.Property(e => e.PrinTrxNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.TrxRefNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.ClntDlrCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Credit).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.Debit).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(10, 6)");
            entity.Property(e => e.ForeignAmt).HasColumnType("decimal(13, 2)");
            entity.Property(e => e.OverdueInterest).HasColumnType("decimal(15, 6)");
            entity.Property(e => e.Price).HasColumnType("decimal(14, 6)");
            entity.Property(e => e.PrinTrxType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TrxDate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TrxDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrxRefType)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.Property(e => e.Oid)
                .ValueGeneratedOnAdd()
                .HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionType");

            entity.Property(e => e.TransDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Transactions123>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Transactions_123");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Oid)
                .ValueGeneratedOnAdd()
                .HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsArchive>(entity =>
        {
            entity.HasKey(e => new { e.RecDate, e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("Transactions_Archive");

            entity.Property(e => e.RecDate).HasColumnType("datetime");
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TransactionsHistory>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2011>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2011");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2012>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2012");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2012202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsHistory2012_20240621_1438");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2013>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2013");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2014>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2014");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2015>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2015");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2016>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2016");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory2017>(entity =>
        {
            entity.HasKey(e => new { e.Oid, e.TransDate, e.ClientCode });

            entity.ToTable("TransactionsHistory2017");

            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistory202406211438>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsHistory_20240621_1438");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistoryBak20240910>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsHistory_bak20240910");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsHistoryTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsHistory_Temp");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("numeric(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsRealized>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Timestamp, e.SeqNo });

            entity.ToTable("TransactionsRealized");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.AvgBuyPrice)
                .HasComment("similar to VWAvgBuyPrice column in PortfolioRealSummary table")
                .HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("similar to MstCurcy table");
            entity.Property(e => e.CurcyRate)
                .HasDefaultValueSql("('1.00')")
                .HasColumnType("decimal(10, 4)");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsRealized20130828>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Timestamp, e.ClntCode }).HasName("PK_TransactionsRealized_1");

            entity.ToTable("TransactionsRealized_20130828");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.AvgBuyPrice)
                .HasComment("similar to VWAvgBuyPrice column in PortfolioRealSummary table")
                .HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("similar to MstCurcy table");
            entity.Property(e => e.CurcyRate)
                .HasDefaultValueSql("('1.00')")
                .HasColumnType("decimal(10, 4)");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsRealizedEx>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsRealizedEX");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurcyRate)
                .HasDefaultValueSql("('1.00')")
                .HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsRealizedHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsRealizedHistory");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurcyRate)
                .HasDefaultValueSql("('1.00')")
                .HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsRealizedHistory20210524>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsRealizedHistory_20210524");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurcyRate).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TransactionsTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionsTemp");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Oid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Price)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Quantity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TrdgPinGen>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.UsrId });

            entity.ToTable("TrdgPinGen");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrTrdgPin)
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.UsrTrdgPinChngDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TrdgPinGenLog>(entity =>
        {
            entity.HasKey(e => new { e.LogDate, e.UsrId, e.UsrTrdgPinChngDate });

            entity.ToTable("TrdgPinGenLog");

            entity.Property(e => e.LogDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrTrdgPinChngDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPin)
                .HasMaxLength(100)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<TxnProdVer>(entity =>
        {
            entity.HasKey(e => new { e.PlatCode, e.ReleaseVer });

            entity.ToTable("TxnProdVer");

            entity.Property(e => e.PlatCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Desc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProgramVer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UserFavourite>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.FavGroup });

            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FavList)
                .HasMaxLength(2100)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<UserFavourites20130815>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserFavourites_20130815");

            entity.Property(e => e.FavList)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserFavourites20190920>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserFavourites_20190920");

            entity.Property(e => e.FavList)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserFavourites20240131>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserFavourites_20240131");

            entity.Property(e => e.FavList)
                .HasMaxLength(2100)
                .IsUnicode(false);
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserFavouritesHistory>(entity =>
        {
            entity.HasKey(e => new { e.Date, e.UserId, e.FavGroup });

            entity.ToTable("UserFavouritesHistory");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FavList)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<UserRegistration>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UserRegistration");

            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ActivationCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ActvnChgDt).HasColumnType("datetime");
            entity.Property(e => e.ActvnExyDt).HasColumnType("datetime");
            entity.Property(e => e.Cdsno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeActvnChgDt).HasColumnType("datetime");
            entity.Property(e => e.EmpAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmpBus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpChk)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EmpFax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpOcc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpPost)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmpType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmpYear)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.SendActvnDt).HasColumnType("datetime");
            entity.Property(e => e.SiteId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SiteID");
            entity.Property(e => e.SpouseChk)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SpouseEmp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpouseEmpAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SpouseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpouseNric)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SpouseNRIC");
            entity.Property(e => e.SpouseOcc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpousePhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrialExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankAcc)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankAccNm)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsrNationality)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPostCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UsrSecretAns).HasMaxLength(255);
            entity.Property(e => e.UsrSecretQ).HasMaxLength(255);
            entity.Property(e => e.UsrSubType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.UsrTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRegistration202207211504>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserRegistration_20220721_1504");

            entity.Property(e => e.ActivationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActvnChgDt).HasColumnType("datetime");
            entity.Property(e => e.ActvnExyDt).HasColumnType("datetime");
            entity.Property(e => e.Cdsno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DeActvnChgDt).HasColumnType("datetime");
            entity.Property(e => e.EmpAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.EmpBus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpChk)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EmpFax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpOcc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpPost)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EmpType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EmpYear)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.SendActvnDt).HasColumnType("datetime");
            entity.Property(e => e.SiteId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SiteID");
            entity.Property(e => e.SpouseChk)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SpouseEmp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpouseEmpAddr)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SpouseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpouseNric)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SpouseNRIC");
            entity.Property(e => e.SpouseOcc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpousePhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrialExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankAcc)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankAccNm)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsrBankBrch)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrNationality)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPostCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UsrSecretAns).HasMaxLength(255);
            entity.Property(e => e.UsrSecretQ).HasMaxLength(255);
            entity.Property(e => e.UsrSubType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.UsrTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRegistrationEcm>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UserRegistrationECM");

            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.ActivationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.StateCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TrialExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradeFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNationality)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrPassNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrPostCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.UsrPwd)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrSecretAns).HasMaxLength(255);
            entity.Property(e => e.UsrSecretQ).HasMaxLength(255);
            entity.Property(e => e.UsrTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UsrTrdgPin)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRegistrationTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserRegistration_Test");

            entity.Property(e => e.ClientCode).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(255)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsloginActvTime>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsloginActvTime");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .HasColumnName("Column 0");
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .HasColumnName("Column 1");
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .HasColumnName("Column 2");
        });

        modelBuilder.Entity<UsrAccess>(entity =>
        {
            entity.HasKey(e => new { e.UsrSeqNo, e.UsrId }).HasName("PK_UsrLogin");

            entity.ToTable("UsrAccess");

            entity.Property(e => e.UsrSeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrLoginStat).HasComment("0-failed; 1-succeed");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccess202205171150>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_20220517_1150");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
            entity.Property(e => e.UsrSeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<UsrAccess202404031545>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_20240403_1545");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
            entity.Property(e => e.UsrSeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<UsrAccess202406281348>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_20240628_1348");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
            entity.Property(e => e.UsrSeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<UsrAccessArchive>(entity =>
        {
            entity.HasKey(e => new { e.UsrSeqNo, e.UsrId, e.UsrLastUpdated });

            entity.ToTable("UsrAccess_Archive");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrLoginStat).HasComment("0-failed; 1-succeed");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccessArchive202205171150>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_Archive_20220517_1150");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccessArchive202404031545>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_Archive_20240403_1545");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccessArchive202406281348>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrAccess_Archive_20240628_1348");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccessEx>(entity =>
        {
            entity.HasKey(e => e.UsrSeqNo).HasName("PK_UsrLoginEx");

            entity.ToTable("UsrAccessEx");

            entity.Property(e => e.AccessInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SystemType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrAccessExExtract>(entity =>
        {
            entity.HasKey(e => e.UsrSeqNo);

            entity.ToTable("UsrAccessEx_Extract");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrAccessExSumm>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.UsrIdyymm });

            entity.ToTable("UsrAccessExSumm");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrIdyymm).HasColumnName("UsrIDYYMM");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrAccessFa>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.AccessDate });

            entity.ToTable("UsrAccessFA");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.AccessDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrAccessLimit>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrAccessLimit");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrAccessLimit1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indication if access of user is limited, checking should be applied if enabled. Y - Yes; N - No ")
                .HasColumnName("UsrAccessLimit");
            entity.Property(e => e.UsrAccessLimitEndTime).HasColumnType("datetime");
            entity.Property(e => e.UsrAccessLimitExprDate)
                .HasComment("Expiry date of access limit")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrAccessLimitStartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrAnalytic>(entity =>
        {
            entity.HasKey(e => new { e.ClickDateTime, e.UsrId, e.NodeTitle, e.NodeGrpId });

            entity.ToTable("UsrAnalytic");

            entity.Property(e => e.ClickDateTime).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrAuthLimit>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrAuthLimit");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrAuthBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthBuyFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Buy should be checked.");
            entity.Property(e => e.UsrAuthBuyTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthFSTAmt");
            entity.Property(e => e.UsrAuthFstflag)
                .HasDefaultValue(false)
                .HasColumnName("UsrAuthFSTFlag");
            entity.Property(e => e.UsrAuthFsttopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthFSTTopUpAmt");
            entity.Property(e => e.UsrAuthFsttopUpFlag).HasColumnName("UsrAuthFSTTopUpFlag");
            entity.Property(e => e.UsrAuthIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthIDSSAmt");
            entity.Property(e => e.UsrAuthIdssflag).HasColumnName("UsrAuthIDSSFlag");
            entity.Property(e => e.UsrAuthIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthIDSSGrossAmt");
            entity.Property(e => e.UsrAuthIdssgrossFlag).HasColumnName("UsrAuthIDSSGrossFlag");
            entity.Property(e => e.UsrAuthIdssgrossTopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthIDSSGrossTopUpAmt");
            entity.Property(e => e.UsrAuthIdssgrossTopUpFlag).HasColumnName("UsrAuthIDSSGrossTopUpFlag");
            entity.Property(e => e.UsrAuthIdsstopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrAuthIDSSTopUpAmt");
            entity.Property(e => e.UsrAuthIdsstopUpFlag).HasColumnName("UsrAuthIDSSTopUpFlag");
            entity.Property(e => e.UsrAuthNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthNetFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Net should be checked.");
            entity.Property(e => e.UsrAuthNetTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthSellFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Sell should be checked.");
            entity.Property(e => e.UsrAuthSellTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrAuthTotalFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Total should be checked.");
            entity.Property(e => e.UsrAuthTotalTopUpAmt).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<UsrBookmark>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.NodeSystemType, e.NodeGrpId, e.NodeId, e.SeqNo });

            entity.ToTable("UsrBookmark");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
        });

        modelBuilder.Entity<UsrClntList>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.CoBrchCode, e.ClntCode });

            entity.ToTable("UsrClntList");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrClntList20140115>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.CoBrchCode, e.ClntCode });

            entity.ToTable("UsrClntList_20140115");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrClntListTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrClntList_Test");

            entity.Property(e => e.ClntCode).HasMaxLength(255);
            entity.Property(e => e.CoBrchCode).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(255)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrCoBrchAssign>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.CoCode, e.CoBrchCode });

            entity.ToTable("UsrCoBrchAssign");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
        });

        modelBuilder.Entity<UsrDormantCtrl>(entity =>
        {
            entity.HasKey(e => e.UsrType);

            entity.ToTable("UsrDormantCtrl");

            entity.Property(e => e.UsrType).ValueGeneratedNever();
        });

        modelBuilder.Entity<UsrEcm2kibb>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrECM2KIBB");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrEcmoney2Kibb>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrECMoney2KIBB");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrEmailList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrEmailList");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrEmail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrInfo>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrInfo");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BFESName");
            entity.Property(e => e.Category)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ChannelUpdFlag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GtcexpiryPeriod).HasColumnName("GTCExpiryPeriod");
            entity.Property(e => e.MimosMigrateDt).HasColumnType("datetime");
            entity.Property(e => e.MimosMigrateDtRms)
                .HasColumnType("datetime")
                .HasColumnName("MimosMigrateDt_rms");
            entity.Property(e => e.MktDepthEndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepthStartDate).HasColumnType("datetime");
            entity.Property(e => e.OriUsrEmail).HasMaxLength(255);
            entity.Property(e => e.Pid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PID");
            entity.Property(e => e.PidRms)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PID_rms");
            entity.Property(e => e.Pidflag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("PIDFlag");
            entity.Property(e => e.PidflagRms)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasColumnName("PIDFlag_rms");
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ThirdPartyUsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ThirdPartyUsrID");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y")
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrChannel)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail)
                .HasMaxLength(255)
                .HasComment("M - Male; F - Female; ");
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax).HasMaxLength(15);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .HasComment("M - Male; F - Female; ");
            entity.Property(e => e.UsrGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("B")
                .HasColumnName("UsrGTDMode");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo).HasMaxLength(30);
            entity.Property(e => e.UsrMobile).HasMaxLength(15);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo).HasMaxLength(30);
            entity.Property(e => e.UsrPhone).HasMaxLength(15);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .HasComment("M - Male; F - Female; ");
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus)
                .HasMaxLength(1)
                .HasComment("A - Active; S - Suspend; C - Close; ");
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<UsrInfo20140115>(entity =>
        {
            entity.HasKey(e => e.UsrId).HasName("PK_UsrInfo_20130115");

            entity.ToTable("UsrInfo_20140115");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("BFESName");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GtcexpiryPeriod).HasColumnName("GTCExpiryPeriod");
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.ThirdPartyUsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValue("")
                .HasColumnName("ThirdPartyUsrID");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrInfo20140826>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrInfo_20140826");

            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BFESName");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GtcexpiryPeriod).HasColumnName("GTCExpiryPeriod");
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ThirdPartyUsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ThirdPartyUsrID");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrInfoBak>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrInfo_bak");

            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BFESName");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ThirdPartyUsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ThirdPartyUsrID");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrGender)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrMobile)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrInfoTest>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrInfo_Test");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BFESName");
            entity.Property(e => e.Category)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GtcexpiryPeriod).HasColumnName("GTCExpiryPeriod");
            entity.Property(e => e.MktDepthEndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepthStartDate).HasColumnType("datetime");
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .HasDefaultValue("Y")
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax).HasMaxLength(15);
            entity.Property(e => e.UsrGender).HasMaxLength(2);
            entity.Property(e => e.UsrGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("B")
                .HasColumnName("UsrGTDMode");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo).HasMaxLength(30);
            entity.Property(e => e.UsrMobile).HasMaxLength(15);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo).HasMaxLength(30);
            entity.Property(e => e.UsrPhone).HasMaxLength(15);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace).HasMaxLength(50);
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus).HasMaxLength(1);
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<UsrInfoTest2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrInfo_Test2");

            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(255)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(255)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrStatus).HasMaxLength(255);
            entity.Property(e => e.UsrType).HasMaxLength(255);
        });

        modelBuilder.Entity<UsrJwttoken>(entity =>
        {
            entity.HasKey(e => e.UsrId).HasName("PK_UsrJWTToken_UsrID");

            entity.ToTable("UsrJWTToken");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.AccessToken)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.RefreshToken)
                .HasMaxLength(2000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrKentradePlusInfo>(entity =>
        {
            entity.HasKey(e => e.UsrId);

            entity.ToTable("UsrKentradePlusInfo");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDateMth).HasColumnType("datetime");
            entity.Property(e => e.EndDateTrial).HasColumnType("datetime");
            entity.Property(e => e.MthSubMode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MthSubPer).HasDefaultValue(6);
            entity.Property(e => e.StartDateMth).HasColumnType("datetime");
            entity.Property(e => e.StartDateTrial).HasColumnType("datetime");
            entity.Property(e => e.SubType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SubWrnPptStat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y");
            entity.Property(e => e.TrialFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrKentradePlusMonthlyReportBak20240628>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrKentradePlusMonthlyReport_bak20240628");

            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDateMth).HasColumnType("datetime");
            entity.Property(e => e.EndDateTrial).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.MthSubMode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StartDateMth).HasColumnType("datetime");
            entity.Property(e => e.StartDateTrial).HasColumnType("datetime");
            entity.Property(e => e.SubType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrialFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrKentradePlusMonthlyRpt>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.LastUpdatedDate });

            entity.ToTable("UsrKentradePlusMonthlyRpt");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDateMth).HasColumnType("datetime");
            entity.Property(e => e.EndDateTrial).HasColumnType("datetime");
            entity.Property(e => e.MthSubMode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MthSubPer).HasDefaultValue(6);
            entity.Property(e => e.StartDateMth).HasColumnType("datetime");
            entity.Property(e => e.StartDateTrial).HasColumnType("datetime");
            entity.Property(e => e.SubType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TrialFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrLogin>(entity =>
        {
            entity.HasKey(e => e.UsrId).HasName("PK_UsrLogin_UsrID");

            entity.ToTable("UsrLogin");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
            entity.Property(e => e.UsrActvCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrActvnCode).HasMaxLength(255);
            entity.Property(e => e.UsrDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastLoginDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLogin1).HasColumnName("UsrLogin");
            entity.Property(e => e.UsrOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrOTPCode");
            entity.Property(e => e.UsrOtpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("UsrOTPExpiration");
            entity.Property(e => e.UsrOtpresendAtt).HasColumnName("UsrOTPResendAtt");
            entity.Property(e => e.UsrOtpvldtAtt).HasColumnName("UsrOTPVldtAtt");
            entity.Property(e => e.UsrPwd)
                .HasMaxLength(100)
                .HasDefaultValue("");
            entity.Property(e => e.UsrPwd1).HasMaxLength(100);
            entity.Property(e => e.UsrPwdLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrPwdReset).HasDefaultValue(false);
            entity.Property(e => e.UsrPwdUnscsAtmpt).HasDefaultValue(0);
            entity.Property(e => e.UsrSecretAns1).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns2).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns3).HasMaxLength(255);
            entity.Property(e => e.UsrTrdgPin).HasMaxLength(30);
            entity.Property(e => e.UsrTrdgPinDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinStat)
                .HasMaxLength(1)
                .HasComment("Y - Created; N - Not Created; R - Reseted; ");
            entity.Property(e => e.UsrTwoFactorAuth).HasDefaultValue(1);
            entity.Property(e => e.UsrTwoFactorAuthBypassExpiryDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrLogin202204270830>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrLogin_20220427_0830");

            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
            entity.Property(e => e.UsrActvCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrActvnCode).HasMaxLength(255);
            entity.Property(e => e.UsrDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwd1).HasMaxLength(100);
            entity.Property(e => e.UsrPwdLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrSecretAns1).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns2).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns3).HasMaxLength(255);
            entity.Property(e => e.UsrTrdgPin).HasMaxLength(30);
            entity.Property(e => e.UsrTrdgPinDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinStat).HasMaxLength(1);
        });

        modelBuilder.Entity<UsrLogin202205171149>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrLogin_20220517_1149");

            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
            entity.Property(e => e.UsrActvCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrActvnCode).HasMaxLength(255);
            entity.Property(e => e.UsrDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrOTPCode");
            entity.Property(e => e.UsrOtpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("UsrOTPExpiration");
            entity.Property(e => e.UsrOtpresendAtt).HasColumnName("UsrOTPResendAtt");
            entity.Property(e => e.UsrOtpvldtAtt).HasColumnName("UsrOTPVldtAtt");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwd1).HasMaxLength(100);
            entity.Property(e => e.UsrPwdLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrSecretAns1).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns2).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns3).HasMaxLength(255);
            entity.Property(e => e.UsrTrdgPin).HasMaxLength(30);
            entity.Property(e => e.UsrTrdgPinDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinStat).HasMaxLength(1);
        });

        modelBuilder.Entity<UsrLogin202404031533>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrLogin_20240403_1533");

            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
            entity.Property(e => e.UsrActvCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrActvnCode).HasMaxLength(255);
            entity.Property(e => e.UsrDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrOtpcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrOTPCode");
            entity.Property(e => e.UsrOtpexpiration)
                .HasColumnType("datetime")
                .HasColumnName("UsrOTPExpiration");
            entity.Property(e => e.UsrOtpresendAtt).HasColumnName("UsrOTPResendAtt");
            entity.Property(e => e.UsrOtpvldtAtt).HasColumnName("UsrOTPVldtAtt");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwd1).HasMaxLength(100);
            entity.Property(e => e.UsrPwdLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrSecretAns1).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns2).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns3).HasMaxLength(255);
            entity.Property(e => e.UsrTrdgPin).HasMaxLength(30);
            entity.Property(e => e.UsrTrdgPinDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinStat).HasMaxLength(1);
            entity.Property(e => e.UsrTwoFactorAuthBypassExpiryDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrLogin202406281340>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrLogin_20240628_1340");

            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
            entity.Property(e => e.UsrActvCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrActvnCode).HasMaxLength(255);
            entity.Property(e => e.UsrDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrPwd).HasMaxLength(100);
            entity.Property(e => e.UsrPwd1).HasMaxLength(100);
            entity.Property(e => e.UsrPwdLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrSecretAns1).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns2).HasMaxLength(255);
            entity.Property(e => e.UsrSecretAns3).HasMaxLength(255);
            entity.Property(e => e.UsrTrdgPin).HasMaxLength(30);
            entity.Property(e => e.UsrTrdgPinDisableWrngDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinLastChgDate).HasColumnType("datetime");
            entity.Property(e => e.UsrTrdgPinStat).HasMaxLength(1);
        });

        modelBuilder.Entity<UsrLoginActvTime>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.UsrLogin });

            entity.ToTable("UsrLoginActvTime");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrActiveTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrLoginActvTimeTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrLoginActvTime_Temp");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<UsrMobileDeviceId>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.DeviceId, e.PlatCode, e.Uuid, e.ReleaseVer });

            entity.ToTable("UsrMobileDeviceID");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.PlatCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UUID");
            entity.Property(e => e.DeviceName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrMobileDeviceId20240716>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrMobileDeviceID_20240716");

            entity.Property(e => e.DeviceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DeviceName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PlatCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UUID");
        });

        modelBuilder.Entity<UsrMobileDeviceIdsendDtl>(entity =>
        {
            entity.HasKey(e => new { e.NewsId, e.UsrId, e.DeviceId, e.PlatCode, e.Uuid, e.LogDate, e.MessageSend });

            entity.ToTable("UsrMobileDeviceIDSendDtl");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.PlatCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UUID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrSession>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.UsrSessionId, e.SystemType }).HasName("PK_UsrSession_1");

            entity.ToTable("UsrSession");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrSessionId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UsrSessionID");
            entity.Property(e => e.UsrLoginSystemType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UsrRemoteAdd)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrSetting>(entity =>
        {
            entity.HasKey(e => e.SetId);

            entity.ToTable("UsrSetting");

            entity.Property(e => e.SetId)
                .ValueGeneratedNever()
                .HasColumnName("SetID");
            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrSetting202204270831>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrSetting_20220427_0831");

            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetId).HasColumnName("SetID");
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrSetting202205171150>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrSetting_20220517_1150");

            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetId).HasColumnName("SetID");
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrSetting202311161504>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrSetting_20231116_1504");

            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetId).HasColumnName("SetID");
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrSetting202404031542>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrSetting_20240403_1542");

            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetId).HasColumnName("SetID");
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrSetting202406281346>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrSetting_20240628_1346");

            entity.Property(e => e.SetDesc).HasMaxLength(255);
            entity.Property(e => e.SetId).HasColumnName("SetID");
            entity.Property(e => e.SetValue).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrTypeAuthLimit>(entity =>
        {
            entity.HasKey(e => e.UsrType);

            entity.ToTable("UsrTypeAuthLimit");

            entity.Property(e => e.UsrType).ValueGeneratedNever();
            entity.Property(e => e.UsrTypeAuthBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthBuyFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Buy should be checked.");
            entity.Property(e => e.UsrTypeAuthBuyTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthFSTAmt");
            entity.Property(e => e.UsrTypeAuthFstflag)
                .HasDefaultValueSql("('0')")
                .HasColumnName("UsrTypeAuthFSTFlag");
            entity.Property(e => e.UsrTypeAuthFsttopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthFSTTopUpAmt");
            entity.Property(e => e.UsrTypeAuthFsttopUpFlag).HasColumnName("UsrTypeAuthFSTTopUpFlag");
            entity.Property(e => e.UsrTypeAuthIdssamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthIDSSAmt");
            entity.Property(e => e.UsrTypeAuthIdssflag).HasColumnName("UsrTypeAuthIDSSFlag");
            entity.Property(e => e.UsrTypeAuthIdssgrossAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthIDSSGrossAmt");
            entity.Property(e => e.UsrTypeAuthIdssgrossFlag).HasColumnName("UsrTypeAuthIDSSGrossFlag");
            entity.Property(e => e.UsrTypeAuthIdssgrossTopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthIDSSGrossTopUpAmt");
            entity.Property(e => e.UsrTypeAuthIdssgrossTopUpFlag).HasColumnName("UsrTypeAuthIDSSGrossTopUpFlag");
            entity.Property(e => e.UsrTypeAuthIdsstopUpAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("UsrTypeAuthIDSSTopUpAmt");
            entity.Property(e => e.UsrTypeAuthIdsstopUpFlag).HasColumnName("UsrTypeAuthIDSSTopUpFlag");
            entity.Property(e => e.UsrTypeAuthNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthNetFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Net should be checked.");
            entity.Property(e => e.UsrTypeAuthNetTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthSellFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Sell should be checked.");
            entity.Property(e => e.UsrTypeAuthSellTopUpAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.UsrTypeAuthTotalFlag)
                .HasDefaultValue(false)
                .HasComment("Indicates if Authorization Limit for Total should be checked.");
            entity.Property(e => e.UsrTypeAuthTotalTopUpAmt).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<UsrTypeList>(entity =>
        {
            entity.HasKey(e => e.UsrType).HasName("PK_UserType");

            entity.ToTable("UsrTypeList");

            entity.Property(e => e.UsrType).ValueGeneratedNever();
            entity.Property(e => e.Allow2Trade)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y")
                .HasComment("Y - Yes; N - No;");
            entity.Property(e => e.CanDbtoverride)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasComment("Y - Yes; N - No;")
                .HasColumnName("CanDBTOverride");
            entity.Property(e => e.DealerInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HaveNotifier)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasComment("Y - Yes; N - No;");
            entity.Property(e => e.HaveSuperior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasComment("Y - Yes; N - No;");
            entity.Property(e => e.IsNotifier)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasComment("Y - Yes; N - No;");
            entity.Property(e => e.IsSuperior)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .HasComment("Y - Yes; N - No;");
            entity.Property(e => e.Rmsind)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RMSInd");
            entity.Property(e => e.ShareCheckInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ShareCheckIndWith)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrTypeDefault)
                .HasDefaultValue(false)
                .HasComment("1 - system default, user can't maintain; 0 - not system default, user can maintain");
            entity.Property(e => e.UsrTypeDesc).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrTypeProd>(entity =>
        {
            entity.HasKey(e => new { e.UsrType, e.ProdCode });

            entity.ToTable("UsrTypeProd");
        });

        modelBuilder.Entity<UsrTypeProd20130713>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrTypeProd_20130713");
        });

        modelBuilder.Entity<UsrTypeProd20240405>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrTypeProd_20240405");
        });

        modelBuilder.Entity<UsrTypeProd202410090945>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrTypeProd_20241009_0945");
        });

        modelBuilder.Entity<UsrTypeXchg>(entity =>
        {
            entity.HasKey(e => new { e.UsrType, e.XchgCode });

            entity.ToTable("UsrTypeXChg");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .HasColumnName("XChgCode");
        });

        modelBuilder.Entity<UsrXchg>(entity =>
        {
            entity.HasKey(e => new { e.UsrId, e.XchgCode, e.Type });

            entity.ToTable("UsrXchg");

            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(1);
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1");
            entity.Property(e => e.EndDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.MktDepth)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("0");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<UsrXchg202408231131>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsrXchg_20240823_1131");

            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepth)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Mode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type).HasMaxLength(1);
            entity.Property(e => e.UsrId)
                .HasMaxLength(50)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsrXchgLog>(entity =>
        {
            entity.ToTable("UsrXchg_Log");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ActionType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AppName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.ExstValEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ExstVal_Enabled");
            entity.Property(e => e.ExstValEndDate)
                .HasColumnType("datetime")
                .HasColumnName("ExstVal_EndDate");
            entity.Property(e => e.ExstValMktDepth)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ExstVal_MktDepth");
            entity.Property(e => e.ExstValMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ExstVal_Mode");
            entity.Property(e => e.ExstValStartDate)
                .HasColumnType("datetime")
                .HasColumnName("ExstVal_StartDate");
            entity.Property(e => e.HostName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NewValEnabled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NewVal_Enabled");
            entity.Property(e => e.NewValEndDate)
                .HasColumnType("datetime")
                .HasColumnName("NewVal_EndDate");
            entity.Property(e => e.NewValMktDepth)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NewVal_MktDepth");
            entity.Property(e => e.NewValMode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("NewVal_Mode");
            entity.Property(e => e.NewValStartDate)
                .HasColumnType("datetime")
                .HasColumnName("NewVal_StartDate");
            entity.Property(e => e.Type).HasMaxLength(1);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode).HasMaxLength(50);
        });

        modelBuilder.Entity<UsrXchgModeChg>(entity =>
        {
            entity.ToTable("UsrXchg_ModeChg");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ActionType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Enabled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Mode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type).HasMaxLength(1);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode).HasMaxLength(50);
        });

        modelBuilder.Entity<Usrtypeprod38>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("usrtypeprod_38");
        });

        modelBuilder.Entity<ValRcvdByAutoPaymentResend>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ValRcvdByAutoPaymentResend");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sContNo");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
        });

        modelBuilder.Entity<ValRcvdBySpupdPymtCont>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ValRcvdBySPUpdPymtCont");

            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SLocationCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sLocationCode");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
            entity.Property(e => e.SPymtStatus)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("sPymtStatus");
            entity.Property(e => e.SRemark)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("sRemark");
        });

        modelBuilder.Entity<ValRcvdBySpupdPymtRefNo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ValRcvdBySPUpdPymtRefNo");

            entity.Property(e => e.DRetPymtByBank)
                .HasColumnType("decimal(24, 2)")
                .HasColumnName("dRetPymtByBank");
            entity.Property(e => e.DtCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dtCreateDate");
            entity.Property(e => e.SBillAccNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sBillAccNo");
            entity.Property(e => e.SChannelId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sChannelID");
            entity.Property(e => e.SLocationCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sLocationCode");
            entity.Property(e => e.SMerchantId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("sMerchantID");
            entity.Property(e => e.SPymtRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPymtRefNo");
            entity.Property(e => e.SRemark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemark");
            entity.Property(e => e.SRetBankRefNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sRetBankRefNo");
            entity.Property(e => e.SRetTransCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sRetTransCode");
            entity.Property(e => e.SRetTransDate)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("sRetTransDate");
            entity.Property(e => e.SRetTransTime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("sRetTransTime");
            entity.Property(e => e.SRetUsrName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("sRetUsrName");
            entity.Property(e => e.SSptype)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("sSPType");
        });

        modelBuilder.Entity<ViewTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ViewTest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAccContDtl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AccContDtl");

            entity.Property(e => e.AmountOriginal).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.NetAmountMyr)
                .HasColumnType("decimal(13, 4)")
                .HasColumnName("NetAmount_MYR");
            entity.Property(e => e.Osamt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSAmt");
            entity.Property(e => e.Osintest)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OSIntest");
            entity.Property(e => e.Osqty)
                .HasColumnType("decimal(14, 0)")
                .HasColumnName("OSQty");
            entity.Property(e => e.Osttl)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("OSTtl");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QtyOriginal).HasColumnType("decimal(14, 0)");
            entity.Property(e => e.SettleDate).HasColumnType("datetime");
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TradedCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TradedPrice).HasColumnType("numeric(18, 3)");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClientInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientInfo");

            entity.Property(e => e.AcctActivationDate).HasColumnType("datetime");
            entity.Property(e => e.AcctDormantDate).HasColumnType("datetime");
            entity.Property(e => e.AcctLegalStatus)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AcctOpeningDate).HasColumnType("datetime");
            entity.Property(e => e.AcctReActivationDate).HasColumnType("datetime");
            entity.Property(e => e.AcctSuspendDate).HasColumnType("datetime");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientAddress).HasMaxLength(250);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName).HasMaxLength(255);
            entity.Property(e => e.ClientType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClntExpsAddLimitPctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.ClntExpsBuyAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsBuyPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsFstamt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmt");
            entity.Property(e => e.ClntExpsFstamtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTAmtTopUp");
            entity.Property(e => e.ClntExpsFstdayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTDayOrder");
            entity.Property(e => e.ClntExpsFstprevDayOrder)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntExpsFSTPrevDayOrder");
            entity.Property(e => e.ClntExpsNetAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsNetPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsSellPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmt).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalAmtTopUp).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntExpsTotalPrevDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ClntMarginEq)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginEQ");
            entity.Property(e => e.ClntMarginOs)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ClntMarginOS");
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntTradeAllowIdss).HasColumnName("ClntTradeAllowIDSS");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.EcosbuyAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmt");
            entity.Property(e => e.EcosbuyAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSBuyAmtTopUp");
            entity.Property(e => e.EcosbuyPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSBuyPct");
            entity.Property(e => e.EcosnetAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmt");
            entity.Property(e => e.EcosnetAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSNetAmtTopUp");
            entity.Property(e => e.EcosnetPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSNetPct");
            entity.Property(e => e.EcossellAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmt");
            entity.Property(e => e.EcossellAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSSellAmtTopUp");
            entity.Property(e => e.EcossellPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSSellPct");
            entity.Property(e => e.EcostotalAmt)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmt");
            entity.Property(e => e.EcostotalAmtTopUp)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("ECOSTotalAmtTopUp");
            entity.Property(e => e.EcostotalPct)
                .HasColumnType("decimal(7, 3)")
                .HasColumnName("ECOSTotalPct");
            entity.Property(e => e.FaxNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.InternalAccountType)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.LastClientInfoUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewIcno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NewICNo");
            entity.Property(e => e.OfficeNo).HasMaxLength(50);
            entity.Property(e => e.OldIcno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OldICNo");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(16)
                .HasColumnName("RemisierID");
            entity.Property(e => e.Status).HasMaxLength(1);
            entity.Property(e => e.SuspendReason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClientList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientList");

            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OriginateId)
                .HasMaxLength(16)
                .HasColumnName("OriginateID");
            entity.Property(e => e.UsrId).HasMaxLength(16);
        });

        modelBuilder.Entity<VwClientMtdturnover>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientMTDTurnover");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClientMtdturnoverChart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientMTDTurnoverChart");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClientOsdueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueContraGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraGain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraGain");
        });

        modelBuilder.Entity<VwClientOsdueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueContraLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraLoss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraLoss");
        });

        modelBuilder.Entity<VwClientOsdueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueCreditInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsdueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueDebitInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsduePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDuePurchase");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
        });

        modelBuilder.Entity<VwClientOsdueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueSale");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
        });

        modelBuilder.Entity<VwClientOsdueSetoffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueSetoffGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientOsdueSetoffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSDueSetoffLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientOsoverDueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverDueContraGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraGain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraGain");
        });

        modelBuilder.Entity<VwClientOsoverDueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverDueContraLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraLoss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraLoss");
        });

        modelBuilder.Entity<VwClientOsoverDuePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverDuePurchase");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
        });

        modelBuilder.Entity<VwClientOsoverDueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverDueSale");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
        });

        modelBuilder.Entity<VwClientOsoverdueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverdueCreditInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsoverdueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverdueDebitInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsoverdueSetoffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverdueSetoffGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientOsoverdueSetoffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSOverdueSetoffLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientOsundueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueContraGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraGain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraGain");
        });

        modelBuilder.Entity<VwClientOsundueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueContraLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOscontraLoss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSContraLoss");
        });

        modelBuilder.Entity<VwClientOsundueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueCreditInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsundueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueDebitInterest");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOsaccruedInterest)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSAccruedInterest");
        });

        modelBuilder.Entity<VwClientOsunduePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUnduePurchase");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
        });

        modelBuilder.Entity<VwClientOsundueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueSale");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
        });

        modelBuilder.Entity<VwClientOsundueSetoffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueSetoffGain");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientOsundueSetoffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientOSUndueSetoffLoss");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalOssetOffAmount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TotalOSSetOffAmount");
        });

        modelBuilder.Entity<VwClientYtdturnover>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClientYTDTurnover");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwClientshareinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_clientshareinfo");

            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwClntChgBrchMigrateTableList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClntChgBrchMigrateTableList");

            entity.Property(e => e.ColumnName).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(128);
        });

        modelBuilder.Entity<VwClntList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ClntList");

            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClntName).HasMaxLength(255);
            entity.Property(e => e.ClntSname)
                .HasMaxLength(10)
                .HasColumnName("ClntSName");
            entity.Property(e => e.ClntStat).HasMaxLength(1);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gcif)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GCIF");
            entity.Property(e => e.OriginateId)
                .HasMaxLength(16)
                .HasColumnName("OriginateID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<VwEpContRemainingO>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_EP_ContRemainingOS");

            entity.Property(e => e.ClientCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.RemainOsamount)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("RemainOSAmount");
            entity.Property(e => e.RemainOsinterest)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("RemainOSInterest");
            entity.Property(e => e.RemainOsqty)
                .HasColumnType("decimal(15, 0)")
                .HasColumnName("RemainOSQty");
            entity.Property(e => e.RemainOstotal)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("RemainOSTotal");
            entity.Property(e => e.TradeDate)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwMstStk>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_MstStk");

            entity.Property(e => e.StkBrdCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkLname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkLName");
            entity.Property(e => e.StkSectCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwNotifierList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_NotifierList");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<VwOrderException>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OrderException");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CuseDlrLmt).HasColumnName("CUseDlrLmt");
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExceedValue).HasColumnType("decimal(25, 2)");
            entity.Property(e => e.ExcpDate).HasColumnType("datetime");
            entity.Property(e => e.ExcpRemarks).HasMaxLength(255);
            entity.Property(e => e.ExecId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ExecID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrcRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SenderType)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<VwOrderPlaced>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OrderPlaced");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgGtd).HasColumnName("XchgGTD");
        });

        modelBuilder.Entity<VwOrderPlacedEco>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OrderPlacedECOS");

            entity.Property(e => e.AmendBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BasketName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Cfind).HasColumnName("CFInd");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBranch)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterBroker)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CounterDealer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EarmarkPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FirstMatchOrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FirstMatchTime).HasColumnType("datetime");
            entity.Property(e => e.LastStatus)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MatchedAmount).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Modality)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderEntryType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderSrc)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OriginalClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OriginalOrderDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.PlaceOrderTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SellerBranchCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .UseCollation("Latin1_General_CI_AI");
            entity.Property(e => e.SellerClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SellerPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.StockCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.StockName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StopLimitPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.TotalMatchedPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Validation)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.WsorderNo).HasColumnName("WSOrderNo");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOrderStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OrderStatus");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SequenceNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwOrderStatusEco>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OrderStatusECOS");

            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwSiteMenu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SiteMenu");

            entity.Property(e => e.BookMarkIconUrl).HasMaxLength(255);
            entity.Property(e => e.LockKey)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NodeActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeDesc).HasMaxLength(255);
            entity.Property(e => e.NodeDescVn)
                .HasMaxLength(255)
                .HasColumnName("NodeDescVN");
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeId).HasColumnName("NodeID");
            entity.Property(e => e.NodeInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeParentId).HasColumnName("NodeParentID");
            entity.Property(e => e.NodeScript).HasMaxLength(255);
            entity.Property(e => e.NodeTitle).HasMaxLength(255);
            entity.Property(e => e.NodeTitleVn)
                .HasMaxLength(255)
                .HasColumnName("NodeTitleVN");
            entity.Property(e => e.NodeUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<VwSiteMenuGrp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SiteMenuGrp");

            entity.Property(e => e.NodeGrpActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpActiveTabUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpDesc).HasMaxLength(255);
            entity.Property(e => e.NodeGrpDescVn).HasMaxLength(255);
            entity.Property(e => e.NodeGrpId).HasColumnName("NodeGrpID");
            entity.Property(e => e.NodeGrpInActiveIconUrl).HasMaxLength(255);
            entity.Property(e => e.NodeGrpInActiveTabUrl).HasMaxLength(255);
        });

        modelBuilder.Entity<VwSuperiorList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SuperiorList");

            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<VwTaskBemgr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TaskBEMgr");

            entity.Property(e => e.BrkCode).HasMaxLength(50);
            entity.Property(e => e.CheckTime).HasMaxLength(50);
            entity.Property(e => e.InputFileName).HasMaxLength(256);
            entity.Property(e => e.InputFolderName).HasMaxLength(256);
            entity.Property(e => e.InputParameter).HasMaxLength(255);
            entity.Property(e => e.NextDay).HasMaxLength(1);
            entity.Property(e => e.NonTrading).HasMaxLength(50);
            entity.Property(e => e.OutputFolderName).HasMaxLength(256);
            entity.Property(e => e.ProgramName).HasMaxLength(256);
            entity.Property(e => e.RtnTrueTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.StartTime).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Status).HasMaxLength(256);
            entity.Property(e => e.TaskId)
                .HasMaxLength(50)
                .HasColumnName("TaskID");
            entity.Property(e => e.TaskName).HasMaxLength(50);
        });

        modelBuilder.Entity<VwTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Trans");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransHistory");

            entity.Property(e => e.AmendedFrom)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmendmentTime).HasColumnType("datetime");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemisierId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("RemisierID");
            entity.Property(e => e.StatusCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TerminalID");
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransDetail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransDetail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UploadDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransactionsRealized>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_TransactionsRealized");

            entity.Property(e => e.AvgBuyPrice).HasColumnType("decimal(20, 4)");
            entity.Property(e => e.ClOrdId)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurcyRate).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.RealizedPl)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("RealizedPL");
            entity.Property(e => e.StkCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StkName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUserMtdturnover>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserMTDTurnover");

            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("source");
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Userid)
                .HasMaxLength(16)
                .HasColumnName("userid");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUserMtdturnoverChart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserMTDTurnoverChart");

            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.Month).HasColumnName("month");
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Userid)
                .HasMaxLength(16)
                .HasColumnName("userid");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUserOsdueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueContraGain");

            entity.Property(e => e.TotaloscontraGain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontraGain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueContraLoss");

            entity.Property(e => e.Totaloscontraloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontraloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueCreditInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueDebitInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsduePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDuePurchase");

            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueSale");

            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueSetOffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueSetOffGain");

            entity.Property(e => e.Totalossetoffgain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffgain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsdueSetOffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSDueSetOffLoss");

            entity.Property(e => e.Totalossetoffloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueContraGain");

            entity.Property(e => e.Totaloscontragain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontragain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueContraLoss");

            entity.Property(e => e.Totaloscontraloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontraloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueCreditInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueDebitInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDuePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDuePurchase");

            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueSetOffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueSetOffGain");

            entity.Property(e => e.Totalossetoffgain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffgain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverDueSetOffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverDueSetOffLoss");

            entity.Property(e => e.Totalossetoffloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsoverdueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSOverdueSale");

            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsunDueCreditInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUnDueCreditInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsunDueDebitInterest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUnDueDebitInterest");

            entity.Property(e => e.Totalosaccrued)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalosaccrued");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsunDueSetOffGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUnDueSetOffGain");

            entity.Property(e => e.Totalossetoffgain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffgain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsunDueSetOffLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUnDueSetOffLoss");

            entity.Property(e => e.Totalossetoffloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossetoffloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsundueContraGain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUndueContraGain");

            entity.Property(e => e.TotaloscontraGain)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontraGain");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsundueContraLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUndueContraLoss");

            entity.Property(e => e.Totaloscontraloss)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totaloscontraloss");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsunduePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUnduePurchase");

            entity.Property(e => e.Totalospurchase)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalospurchase");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserOsundueSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserOSUndueSale");

            entity.Property(e => e.Totalossale)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("totalossale");
            entity.Property(e => e.Userid)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("userid");
        });

        modelBuilder.Entity<VwUserYtdturnover>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserYTDTurnover");

            entity.Property(e => e.Brokerage)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("brokerage");
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("source");
            entity.Property(e => e.Turnover)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("turnover");
            entity.Property(e => e.Userid)
                .HasMaxLength(16)
                .HasColumnName("userid");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUsrAccess>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UsrAccess");

            entity.Property(e => e.AccessInd).HasMaxLength(1);
            entity.Property(e => e.LoginMsg).HasMaxLength(255);
            entity.Property(e => e.SystemType).HasMaxLength(10);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdated).HasColumnType("datetime");
            entity.Property(e => e.UsrRemoteAdd).HasMaxLength(50);
            entity.Property(e => e.UsrSeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<VwUsrInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UsrInfo");

            entity.Property(e => e.Bfesname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BFESName");
            entity.Property(e => e.Category)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ChannelUpdFlag)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.DlrCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GtcexpiryPeriod).HasColumnName("GTCExpiryPeriod");
            entity.Property(e => e.MimosMigrateDt).HasColumnType("datetime");
            entity.Property(e => e.MimosMigrateDtRms)
                .HasColumnType("datetime")
                .HasColumnName("MimosMigrateDt_rms");
            entity.Property(e => e.MktDepthEndDate).HasColumnType("datetime");
            entity.Property(e => e.MktDepthStartDate).HasColumnType("datetime");
            entity.Property(e => e.OriUsrEmail).HasMaxLength(255);
            entity.Property(e => e.Pid)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PID");
            entity.Property(e => e.PidRms)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PID_rms");
            entity.Property(e => e.Pidflag)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PIDFlag");
            entity.Property(e => e.PidflagRms)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PIDFlag_rms");
            entity.Property(e => e.RmsType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ThirdPartyUsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ThirdPartyUsrID");
            entity.Property(e => e.UsrAccessFa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrAccessFA");
            entity.Property(e => e.UsrAddr).HasMaxLength(250);
            entity.Property(e => e.UsrAssctPwd).HasMaxLength(8);
            entity.Property(e => e.UsrBtxmode)
                .HasMaxLength(1)
                .HasColumnName("UsrBTXMode");
            entity.Property(e => e.UsrChannel)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.UsrCreationDate).HasColumnType("datetime");
            entity.Property(e => e.UsrDob)
                .HasColumnType("datetime")
                .HasColumnName("UsrDOB");
            entity.Property(e => e.UsrEmail).HasMaxLength(255);
            entity.Property(e => e.UsrExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.UsrFax).HasMaxLength(15);
            entity.Property(e => e.UsrGender).HasMaxLength(2);
            entity.Property(e => e.UsrGtdmode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UsrGTDMode");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrLastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UsrLicenseNo).HasMaxLength(30);
            entity.Property(e => e.UsrMobile).HasMaxLength(15);
            entity.Property(e => e.UsrName).HasMaxLength(255);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrNotifierId).HasColumnName("UsrNotifierID");
            entity.Property(e => e.UsrPassNo).HasMaxLength(30);
            entity.Property(e => e.UsrPhone).HasMaxLength(15);
            entity.Property(e => e.UsrQualify)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsrRace).HasMaxLength(50);
            entity.Property(e => e.UsrRegisterDate).HasColumnType("datetime");
            entity.Property(e => e.UsrResignDate).HasColumnType("datetime");
            entity.Property(e => e.UsrStatus).HasMaxLength(1);
            entity.Property(e => e.UsrSuperiorId).HasColumnName("UsrSuperiorID");
            entity.Property(e => e.UsrTdrdate)
                .HasColumnType("datetime")
                .HasColumnName("UsrTDRDate");
            entity.Property(e => e.WithoutClntList)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUsrTypeProd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UsrTypeProd");
        });

        modelBuilder.Entity<WinscoreSetting>(entity =>
        {
            entity.HasKey(e => e.BrkCode);

            entity.ToTable("WinscoreSetting");

            entity.Property(e => e.BrkCode).HasMaxLength(3);
            entity.Property(e => e.BranchIdmode)
                .HasMaxLength(1)
                .HasColumnName("BranchIDMode");
            entity.Property(e => e.BranchToVarchar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
            entity.Property(e => e.DateIntFormat)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
            entity.Property(e => e.DefChannel)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FormatVersion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("1");
            entity.Property(e => e.ReuseDlrCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("Y");
            entity.Property(e => e.TrimClntCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N");
            entity.Property(e => e.UsrIdmode)
                .HasMaxLength(1)
                .HasColumnName("UsrIDMode");
        });

        modelBuilder.Entity<XchgEarmark>(entity =>
        {
            entity.HasKey(e => e.XchgCode).IsClustered(false);

            entity.ToTable("XchgEarmark");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XchgTradingHour>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XchgTradingHour");

            entity.Property(e => e.EarmarkTime).HasColumnName("earmarkTime");
            entity.Property(e => e.FirstTradeEnd)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("firstTradeEnd");
            entity.Property(e => e.FirstTradeTime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("firstTradeTime");
            entity.Property(e => e.NextTradeTime)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.SecondTradeEnd).HasColumnName("secondTradeEnd");
            entity.Property(e => e.SecondTradeTime)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("secondTradeTime");
            entity.Property(e => e.TradingEnd).HasColumnName("tradingEnd");
            entity.Property(e => e.TradingStart).HasColumnName("tradingStart");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("xchgCode");
        });

        modelBuilder.Entity<XlogAccTrustSummAutoReleaseEarmark>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogAccTrustSumm_AutoReleaseEarmark");

            entity.Property(e => e.DTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dTrustAmt");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.NewTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("newTrustAmtEarmark");
            entity.Property(e => e.OldTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("oldTrustAmtEarmark");
            entity.Property(e => e.ReleaseEarmarkAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SClientCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
        });

        modelBuilder.Entity<XlogAllowCounterControl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogAllowCounterControl");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogAnnouncement>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogAnnouncements");

            entity.Property(e => e.SeqNo).HasComment("");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
        });

        modelBuilder.Entity<XlogAnnouncementsControl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogUsr, e.LogDate, e.LogAction });

            entity.ToTable("XLogAnnouncementsControl");

            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; D-Delete");
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
        });

        modelBuilder.Entity<XlogAnnouncementsControlUsr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogAnnouncementsControlUsr");

            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; D-Delete");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogBlockCounterControl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogBlockCounterControl");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrchExpsLimit6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchExpsLimit6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrchExpsLimit6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchExpsLimit6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrchExpsLimitExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchExpsLimitExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrchPrevDayOrd6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchPrevDayOrd6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrchPrevDayOrd6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchPrevDayOrd6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrchPrevDayOrdExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrchPrevDayOrdExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrkExpsLimit6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkExpsLimit6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrkExpsLimit6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkExpsLimit6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrkExpsLimitExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkExpsLimitExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogBrkPrevDayOrd6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkPrevDayOrd6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrkPrevDayOrd6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkPrevDayOrd6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrkPrevDayOrdExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogBrkPrevDayOrdExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBrkPrevDayOrderExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate });

            entity.ToTable("XLogBrkPrevDayOrderExcp");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ServerId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ServerID");
        });

        modelBuilder.Entity<XlogBroadcastMsgMaint>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogBroadcastMsgMaint");

            entity.Property(e => e.SeqNo).HasComment("");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
        });

        modelBuilder.Entity<XlogBuyingInDefaulter>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogBuyingInDefaulter");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TradeDate)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClientTurnOver>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClientTurnOver");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(3);
            entity.Property(e => e.ClientCode).HasMaxLength(15);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("P")
                .IsFixedLength();
        });

        modelBuilder.Entity<XlogClntAcct>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntAcct");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntAcctArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntAcct_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntBankAccInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntBankAccInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntDefList>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntDefList");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction).HasMaxLength(1);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogClntDeletion6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntDeletion6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogClntDeletion6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntDeletion6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<XlogClntDeletionExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.ClntCode });

            entity.ToTable("XLogClntDeletionExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntFslist>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntFSList");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogClntInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogClntInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntInfo6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntInfo6Srs");

            entity.Property(e => e.AccountType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AllowedCallWarrant)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedClntAssociate)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMarketMaker)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMultiCurrency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedShortSelling)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntAddress)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno).HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClntIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClntICNo");
            entity.Property(e => e.ClntName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClntShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogClntInfo6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntInfo6SrsHistory");

            entity.Property(e => e.AccountType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AllowedCallWarrant)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedClntAssociate)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMarketMaker)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMultiCurrency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedShortSelling)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntAddress)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno).HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClntIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClntICNo");
            entity.Property(e => e.ClntName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClntShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntInfoExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate });

            entity.ToTable("XLogClntInfoExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.AccountType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AllowedCallWarrant)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedClntAssociate)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMarketMaker)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMultiCurrency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedShortSelling)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClntAddress)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno).HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClntIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClntICNo");
            entity.Property(e => e.ClntName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClntShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntInfoExcpArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate });

            entity.ToTable("XLogClntInfoExcp_Archive");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.AccountType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.AllowedCallWarrant)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedClntAssociate)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMarketMaker)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedMultiCurrency)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AllowedShortSelling)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClntAddress)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno).HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClntIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClntICNo");
            entity.Property(e => e.ClntName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ClntShortName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntLimit6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntLimit6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntLimit6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntLimit6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntLimitExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.ClntCode });

            entity.ToTable("XLogClntLimitExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntLimitExcpArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.ClntCode });

            entity.ToTable("XLogClntLimitExcp_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntPrevDayOrd6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntPrevDayOrd6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogClntPrevDayOrd6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntPrevDayOrd6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<XlogClntPrevDayOrdExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntPrevDayOrdExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogClntSusp6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntSusp6Srs");

            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogClntSusp6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogClntSusp6SrsHistory");

            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntSuspExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.ClntCode });

            entity.ToTable("XLogClntSuspExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ErrRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(120)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogClntXchg>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.XchgCode, e.Item });

            entity.ToTable("XLogClntXchg");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogContraDetail>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogContraDetail");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(6);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContraNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo).HasMaxLength(30);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogContraSetOff>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogContraSetOff");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransNo)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogContraSummary>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogContraSummary");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode).HasMaxLength(6);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContraDate).HasColumnType("datetime");
            entity.Property(e => e.ContraNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogContractSummary>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogContractSummary");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrExpsLimit6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrExpsLimit6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrExpsLimit6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrExpsLimit6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrExpsLimitExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.DealerId });

            entity.ToTable("XLogDlrExpsLimitExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrExpsLimitExcpArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.DealerId });

            entity.ToTable("XLogDlrExpsLimitExcp_Archive");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.ClearPrvDayOrd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ExceedLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxBuyCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxNettCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxSellCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.MaxTotalCrLimit).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.WithLimitInd)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrPrevDayOrd6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrPrevDayOrd6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DlrCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogDlrPrevDayOrd6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrPrevDayOrd6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DlrCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
        });

        modelBuilder.Entity<XlogDlrPrevDayOrdExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrPrevDayOrdExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DlrCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PrevBuyDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevNettDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevSellDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.PrevTotalDayOrder).HasColumnType("decimal(20, 2)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogDlrReassign6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrReassign6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PermanentTemporary)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ReassignDealerId)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogDlrReassign6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrReassign6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PermanentTemporary)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ReassignDealerId)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrReassignExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrReassignExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PermanentTemporary)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ReassignDealerId)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogDlrSusp6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrSusp6Srs");

            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<XlogDlrSusp6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogDlrSusp6SrsHistory");

            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogDlrSuspExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.DealerId });

            entity.ToTable("XLogDlrSuspExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DealerId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.AccessSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BuySuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ErrRemarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SellSuspendResume)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogEcosmarketDepthMaint>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogECOSMarketDepthMaint");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogEndDayStartTask>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogEndDayStartTask");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogEndDayTask>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogEndDayTask");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.TaskId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TaskID");
        });

        modelBuilder.Entity<XlogEpAccountSummaryTrust>(entity =>
        {
            entity.HasKey(e => e.ISeqNo).HasName("PK_XLogEPAccountSummaryTrust");

            entity.ToTable("XLogEP_AccountSummaryTrust");

            entity.Property(e => e.ISeqNo)
                .ValueGeneratedNever()
                .HasColumnName("iSeqNo");
            entity.Property(e => e.DAfterAvailableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterAvailableTrustAmt");
            entity.Property(e => e.DAfterAvailableTrustAmtBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterAvailableTrustAmtBalance");
            entity.Property(e => e.DAfterTrustAccount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterTrustAccount");
            entity.Property(e => e.DAfterTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterTrustAmtEarmark");
            entity.Property(e => e.DB4availableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4AvailableTrustAmt");
            entity.Property(e => e.DB4availableTrustAmtBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4AvailableTrustAmtBalance");
            entity.Property(e => e.DB4trustAccount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4TrustAccount");
            entity.Property(e => e.DB4trustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4TrustAmtEarmark");
            entity.Property(e => e.DUpdateAvailableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dUpdateAvailableTrustAmt");
            entity.Property(e => e.DUpdateTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dUpdateTrustAmtEarmark");
            entity.Property(e => e.DtContractDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContractDate");
            entity.Property(e => e.DtLogDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLogDate");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCurrency");
            entity.Property(e => e.SLogAction)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sLogAction");
            entity.Property(e => e.SLogUsr)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sLogUsr");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SProcName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sProcName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemark");
            entity.Property(e => e.STransType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sTransType");
        });

        modelBuilder.Entity<XlogEpAccountSummaryTrust202403011751>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogEP_AccountSummaryTrust_20240301_1751");

            entity.Property(e => e.DAfterAvailableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterAvailableTrustAmt");
            entity.Property(e => e.DAfterAvailableTrustAmtBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterAvailableTrustAmtBalance");
            entity.Property(e => e.DAfterTrustAccount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterTrustAccount");
            entity.Property(e => e.DAfterTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dAfterTrustAmtEarmark");
            entity.Property(e => e.DB4availableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4AvailableTrustAmt");
            entity.Property(e => e.DB4availableTrustAmtBalance)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4AvailableTrustAmtBalance");
            entity.Property(e => e.DB4trustAccount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4TrustAccount");
            entity.Property(e => e.DB4trustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dB4TrustAmtEarmark");
            entity.Property(e => e.DUpdateAvailableTrustAmt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dUpdateAvailableTrustAmt");
            entity.Property(e => e.DUpdateTrustAmtEarmark)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("dUpdateTrustAmtEarmark");
            entity.Property(e => e.DtContractDate)
                .HasColumnType("datetime")
                .HasColumnName("dtContractDate");
            entity.Property(e => e.DtLogDate)
                .HasColumnType("datetime")
                .HasColumnName("dtLogDate");
            entity.Property(e => e.ISeqNo).HasColumnName("iSeqNo");
            entity.Property(e => e.SClientCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sClientCode");
            entity.Property(e => e.SCoBrchCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("sCoBrchCode");
            entity.Property(e => e.SContractNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sContractNo");
            entity.Property(e => e.SCurrency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sCurrency");
            entity.Property(e => e.SLogAction)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("sLogAction");
            entity.Property(e => e.SLogUsr)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sLogUsr");
            entity.Property(e => e.SPaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sPaymentRefNo");
            entity.Property(e => e.SProcName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sProcName");
            entity.Property(e => e.SRemark)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sRemark");
            entity.Property(e => e.STransType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("sTransType");
        });

        modelBuilder.Entity<XlogEpPaymentContract>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogEP_PaymentContract");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogEpayment>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogEpayment");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogFpxresponse>(entity =>
        {
            entity.HasKey(e => e.SeqNo);

            entity.ToTable("XLogFPXResponse");

            entity.Property(e => e.ErrMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogGtcexpiryPeriod>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogGTCExpiryPeriod");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogItrFileTrnx>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogItrFileTrnx");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogLimitInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogLimitInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMarketDepthMaint>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMarketDepthMaint");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMiscSetOff>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMiscSetOff");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.TransNo)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstBrk>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstBrk");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BrkCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstClntExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntExpsArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstClntExps_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstClntTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntTradeSettArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstClntTradeSett_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntXchgExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.XchgCode, e.Item });

            entity.ToTable("XLogMstClntXchgExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstClntXchgTrade>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstClntXchgTrade");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCoBrch>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCoBrch");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchcode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCoBrchExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCoBrchExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCoBrchTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCoBrchTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCoExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCoExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCoTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCoTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCountry>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCountry");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCountryExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCountryExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CountryCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstCrOrder>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCrOrder");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(20);
            entity.Property(e => e.CoBrchCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMstCurcy>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstCurcy");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CurcyCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstDmaorder>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstDMAOrder");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(20);
            entity.Property(e => e.CoBrchCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(20)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMstForm>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstForm");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FormDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FormGrpId)
                .HasMaxLength(15)
                .HasColumnName("FormGrpID");
            entity.Property(e => e.FormId)
                .HasMaxLength(15)
                .HasColumnName("FormID");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstGlobalClntEcosLimitExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogMstGlobalClntEcosLimitExps_1");

            entity.ToTable("XLogMstGlobalClntEcosLimitExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(4000);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(4000);
        });

        modelBuilder.Entity<XlogMstGlobalLimitExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstGlobalLimitExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExpsType).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LimitChangePctg).HasColumnType("decimal(7, 4)");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.Module)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ShortModule)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<XlogMstHld>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstHld");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.HldDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstInstrStpDty>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK__XLogMstI__ADBC407CA5F94152");

            entity.ToTable("XLogMstInstrStpDty");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(1500);
            entity.Property(e => e.InstrTypeDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(1500);
        });

        modelBuilder.Entity<XlogMstInternalAcType>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstInternalAcType");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.InternalAcTypeCode).HasMaxLength(5);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstLegalStat>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstLegalStat");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LegalStatCode).HasMaxLength(5);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstOrderGroup>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstOrderGroup");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GroupDesc).HasMaxLength(50);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstStk>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStk");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstStkBrdExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkBrdExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BrdCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstStkExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode).HasMaxLength(8);
            entity.Property(e => e.XchgCode).HasMaxLength(6);
        });

        modelBuilder.Entity<XlogMstStkExpsBrch>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkExpsBrch");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode).HasMaxLength(8);
            entity.Property(e => e.XchgCode).HasMaxLength(6);
        });

        modelBuilder.Entity<XlogMstStkTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode).HasMaxLength(8);
            entity.Property(e => e.XchgCode).HasMaxLength(6);
        });

        modelBuilder.Entity<XlogMstStkTradeSettBrch>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkTradeSettBrch");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode).HasMaxLength(8);
            entity.Property(e => e.XchgCode).HasMaxLength(6);
        });

        modelBuilder.Entity<XlogMstStkTradeSettBrchCtrl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkTradeSettBrchCtrl");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstStkXchg>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkXchg");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode).HasMaxLength(10);
        });

        modelBuilder.Entity<XlogMstStkXchgExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkXchgExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode).HasMaxLength(5);
        });

        modelBuilder.Entity<XlogMstStkXchgTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstStkXchgTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.XchgCode).HasMaxLength(5);
        });

        modelBuilder.Entity<XlogMstTrxnCost>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstTrxnCost");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(1500);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(1500);
        });

        modelBuilder.Entity<XlogMstUsrExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstUsrExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMstUsrExpsArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstUsrExps_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMstUsrTradeSett>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstUsrTradeSett");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogMstUsrXchgExp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogMstUsrXchgExps");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogMstUsrXchgTrade>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogMstUsrXchgXLogMstUsrXchgTrade");

            entity.ToTable("XLogMstUsrXchgTrade");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogNotificationSetting>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogNotificationSetting");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogOn9Tagging>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogOn9Tagging");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.On9Ind)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogOrderGroupDtl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogOrderGroupDtl");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.GroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogOrderQueue>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogOrderQueue");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AmendClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ApprvRemarks).HasMaxLength(255);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DataCode)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogOrderTypeAdj>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogOrderTypeAdj");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DataCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogPaymentRefNo>(entity =>
        {
            entity.HasKey(e => new { e.LogDate, e.PaymentRefNo, e.ContractNo });

            entity.ToTable("XLogPaymentRefNo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentRefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BRequest)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bRequest");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ConfNum)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CustID");
            entity.Property(e => e.PaymentAmt).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.PaymentBank)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PymtInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ReqAmount).HasColumnType("decimal(24, 3)");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ReturnMsg)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransDate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("transDate");
        });

        modelBuilder.Entity<XlogPfclntInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogPFClntInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode).HasMaxLength(15);
            entity.Property(e => e.CoBrchCode).HasMaxLength(6);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogPriceAlert>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogPriceAlert");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogResearch>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogResearch");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ResId).HasColumnName("ResID");
        });

        modelBuilder.Entity<XlogResearchAnalyst>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogResearchAnalyst");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AnalystCode).HasMaxLength(5);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogResearchCategory>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogResearchCategory");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogRldClntList>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogRldClntList");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogShareInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogShareInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<XlogShareInfoExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.BranchId, e.ClntCode });

            entity.ToTable("XLogShareInfoExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.BtxbalanceQty).HasColumnName("BTXBalanceQty");
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogShareInfoExcp20240220>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogShareInfoExcp_20240220");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BtxbalanceQty).HasColumnName("BTXBalanceQty");
            entity.Property(e => e.Cdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDSNo");
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.StkCode)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.StkSname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StkSName");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogStkCtrl>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogstkCtrl");

            entity.ToTable("XLogStkCtrl");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction).HasMaxLength(1);
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.CtrlCode).HasMaxLength(50);
            entity.Property(e => e.CtrlType)
                .HasMaxLength(1)
                .HasComment("X - Exchange; B - Board; S - Sector; T - Stock; ");
            entity.Property(e => e.DataCode).HasMaxLength(50);
            entity.Property(e => e.DataType)
                .HasMaxLength(1)
                .HasComment("C - Company; B - Branch; P - Product; N - Client; ");
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr).HasMaxLength(16);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogStkIdea>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogStkIdea");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogStockControlClientList>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogStockControlClntList");

            entity.ToTable("XLogStockControlClientList");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClientData)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StkSection)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogT8forceSellingList6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogT8ForceSellingList6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BrokerId).HasColumnName("BrokerID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.OrderPrice)
                .HasDefaultValueSql("('0')")
                .HasColumnType("decimal(6, 3)");
            entity.Property(e => e.OrderType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogT8forceSellingList6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogT8ForceSellingList6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BrokerId).HasColumnName("BrokerID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.OrderPrice)
                .HasDefaultValueSql("('0')")
                .HasColumnType("decimal(6, 3)");
            entity.Property(e => e.OrderType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogT8forceSellingListExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogT8ForceSellingListExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.BrokerId).HasColumnName("BrokerID");
            entity.Property(e => e.BuySellCode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.OrderPrice)
                .HasDefaultValueSql("('0')")
                .HasColumnType("decimal(6, 3)");
            entity.Property(e => e.OrderType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogThresholdLimitExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogThresholdLimitExcp");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClntCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CoBrchCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ExpsExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExpsNewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ThresholdLimit).HasColumnType("decimal(30, 2)");
            entity.Property(e => e.TopUpExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TopUpNewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogTncmaint>(entity =>
        {
            entity.HasKey(e => new { e.XchgCode, e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogTNCMaint");

            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogTransaction>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogTransactions");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.BrchCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CdsbalEnquiryDate)
                .HasColumnType("datetime")
                .HasColumnName("CDSBalEnquiryDate");
            entity.Property(e => e.CdsbalQty).HasColumnName("CDSBalQty");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Oid).HasColumnName("OID");
            entity.Property(e => e.StockCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TransDate).HasColumnType("datetime");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUserDeletion6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUserDeletion6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUserDeletion6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUserDeletion6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUserDeletionExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUserDeletionExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DeleteInd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUserFavouritesRemoveDelistedStk>(entity =>
        {
            entity.HasKey(e => new { e.InsertDate, e.InsertDateTime, e.UserId, e.FavGroup });

            entity.ToTable("XLogUserFavourites_RemoveDelistedStk");

            entity.Property(e => e.InsertDateTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NewFavList)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OldFavList)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUsrAuthLimit>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrAuthLimit");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr).HasMaxLength(16);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrCtrlInfoExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrCtrlInfoExcp");

            entity.Property(e => e.AssociatePassword)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.NotifierId).HasColumnName("NotifierID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.SuperiorId).HasColumnName("SuperiorID");
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrDeviceInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrDeviceInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogUsrInfo_1");

            entity.ToTable("XLogUsrInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrInfo20140115>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogUsrInfo__20140115");

            entity.ToTable("XLogUsrInfo_20140115");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrInfo6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrInfo6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DealerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.ShortSellAllow)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrAddr)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrSname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrSName");
            entity.Property(e => e.UsrType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUsrInfo6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrInfo6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DealerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.ShortSellAllow)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrAddr)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.UsrName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrSname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrSName");
            entity.Property(e => e.UsrType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUsrInfoArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item }).HasName("PK_XLogUsrInfo_Archive_1");

            entity.ToTable("XLogUsrInfo_Archive");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrInfoExcp>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.CoBrchCode, e.UsrId });

            entity.ToTable("XLogUsrInfoExcp");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DealerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellAllow)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrAddr)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.UsrName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrSname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrSName");
            entity.Property(e => e.UsrType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUsrInfoExcpArchive>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.CoBrchCode, e.UsrId });

            entity.ToTable("XLogUsrInfoExcp_Archive");

            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.UsrId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.DealerCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ShortSellAllow)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrAddr)
                .HasMaxLength(160)
                .IsUnicode(false);
            entity.Property(e => e.UsrName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UsrNicno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UsrNICNo");
            entity.Property(e => e.UsrSname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UsrSName");
            entity.Property(e => e.UsrType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogUsrInfoRegMember>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrInfoRegMember");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction).HasMaxLength(1);
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr).HasMaxLength(16);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrKentradePlusInfo>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrKentradePlusInfo");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrLogin>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrLogin");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr).HasMaxLength(15);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrMobileDeviceId>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrMobileDeviceID");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.Uuid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UUID");
        });

        modelBuilder.Entity<XlogUsrRegInfo6Sr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrRegInfo6Srs");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DateDealer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateResigned)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateTdr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DateTDR");
            entity.Property(e => e.Dob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Qualification)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TelNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrRegInfo6SrsHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrRegInfo6SrsHistory");

            entity.Property(e => e.BranchId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DateDealer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateResigned)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateTdr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DateTDR");
            entity.Property(e => e.Dob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Qualification)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TelNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrRegInfoExcp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrRegInfoExcp");

            entity.Property(e => e.BranchId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BranchID");
            entity.Property(e => e.DateDealer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateResigned)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateTdr)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DateTDR");
            entity.Property(e => e.Dob)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.Qualification)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Race)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.SeqNo).ValueGeneratedOnAdd();
            entity.Property(e => e.Sex)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TelNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrSetting>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrSetting");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .HasComment("A-Add; E-Edit; D-Delete");
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr).HasMaxLength(15);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogUsrTypeAuthLimit>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogUsrTypeAuthLimit");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogUsrTypeList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrTypeList");

            entity.Property(e => e.ExstMenuItem)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewMenuItem)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogUsrTypeListProd>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.LogUsr, e.UsrType, e.Item }).HasName("PK_XLogUsrTypeList");

            entity.ToTable("XLogUsrTypeList_PROD");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr).HasMaxLength(16);
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ExstVal).HasMaxLength(255);
            entity.Property(e => e.NewVal).HasMaxLength(255);
        });

        modelBuilder.Entity<XlogUsrXchg>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.XchgCode, e.Item });

            entity.ToTable("XLogUsrXchg");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
        });

        modelBuilder.Entity<XlogUsrXchg202408231343>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XLogUsrXchg_20240823_1343");

            entity.Property(e => e.ExstVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UsrId)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<XlogZmbmsresend>(entity =>
        {
            entity.HasKey(e => new { e.SeqNo, e.LogDate, e.LogAction, e.Item });

            entity.ToTable("XLogZMBMSResend");

            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogAction)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ExstVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.LogUsr)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.NewVal)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmbmsinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSInfo");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
        });

        modelBuilder.Entity<ZmbmsinfoFst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSInfo_FST");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ZmbmsinfoHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSInfoHistory");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CounterBrokerID");
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(10, 4)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
        });

        modelBuilder.Entity<ZmbmsinfoHistoryFst>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSInfoHistory_FST");

            entity.Property(e => e.AmtDefaulted).HasColumnType("decimal(11, 2)");
            entity.Property(e => e.BosmsgCode).HasColumnName("BOSMsgCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClientIcno)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ClientICNo");
            entity.Property(e => e.ClientOldIcno)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("ClientOldICNo");
            entity.Property(e => e.ClientPassNo)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.ClntCdsno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClntCDSNo");
            entity.Property(e => e.ClntName).HasMaxLength(30);
            entity.Property(e => e.ClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CounterBrokerId).HasColumnName("CounterBrokerID");
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DealerID");
            entity.Property(e => e.DefaulterRefNum).HasColumnType("decimal(10, 0)");
            entity.Property(e => e.LastUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.MatchedPrice).HasColumnType("decimal(6, 3)");
            entity.Property(e => e.Mbmssend).HasColumnName("MBMSSend");
            entity.Property(e => e.MbmssentTime)
                .HasColumnType("datetime")
                .HasColumnName("MBMSSentTime");
            entity.Property(e => e.MemCirNoDefaulted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MemCirNoLifted)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OldClntNo)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.OrdPrice).HasColumnType("decimal(8, 3)");
            entity.Property(e => e.ProgramId)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ProgramID");
            entity.Property(e => e.SettlementCurrency)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.StkCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.TerminalId).HasColumnName("TerminalID");
            entity.Property(e => e.TransSeqNo).HasColumnType("decimal(9, 0)");
            entity.Property(e => e.Trsno).HasColumnName("TRSNo");
            entity.Property(e => e.UsrId).HasColumnName("UsrID");
            entity.Property(e => e.XchgCode)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmbmsresend>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSResend");

            entity.Property(e => e.CompletionTime).HasColumnType("datetime");
            entity.Property(e => e.LogUsr).HasMaxLength(20);
            entity.Property(e => e.MbmstradeId).HasColumnName("MBMSTradeID");
            entity.Property(e => e.Session).HasDefaultValue(2);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SubmissionTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ZmbmsresendHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZMBMSResendHistory");

            entity.Property(e => e.CompletionTime).HasColumnType("datetime");
            entity.Property(e => e.LogUsr)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MbmstradeId).HasColumnName("MBMSTradeID");
            entity.Property(e => e.Session).HasDefaultValue(2);
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SubmissionTime).HasColumnType("datetime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
